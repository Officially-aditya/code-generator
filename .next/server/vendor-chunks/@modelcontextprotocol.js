"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@modelcontextprotocol";
exports.ids = ["vendor-chunks/@modelcontextprotocol"];
exports.modules = {

/***/ "(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/auth.js":
/*!************************************************************************!*\
  !*** ./node_modules/@modelcontextprotocol/sdk/dist/esm/client/auth.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UnauthorizedError: () => (/* binding */ UnauthorizedError),\n/* harmony export */   auth: () => (/* binding */ auth),\n/* harmony export */   buildDiscoveryUrls: () => (/* binding */ buildDiscoveryUrls),\n/* harmony export */   discoverAuthorizationServerMetadata: () => (/* binding */ discoverAuthorizationServerMetadata),\n/* harmony export */   discoverOAuthMetadata: () => (/* binding */ discoverOAuthMetadata),\n/* harmony export */   discoverOAuthProtectedResourceMetadata: () => (/* binding */ discoverOAuthProtectedResourceMetadata),\n/* harmony export */   exchangeAuthorization: () => (/* binding */ exchangeAuthorization),\n/* harmony export */   extractResourceMetadataUrl: () => (/* binding */ extractResourceMetadataUrl),\n/* harmony export */   parseErrorResponse: () => (/* binding */ parseErrorResponse),\n/* harmony export */   refreshAuthorization: () => (/* binding */ refreshAuthorization),\n/* harmony export */   registerClient: () => (/* binding */ registerClient),\n/* harmony export */   selectResourceURL: () => (/* binding */ selectResourceURL),\n/* harmony export */   startAuthorization: () => (/* binding */ startAuthorization)\n/* harmony export */ });\n/* harmony import */ var pkce_challenge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pkce-challenge */ \"(rsc)/./node_modules/pkce-challenge/dist/index.node.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/types.js\");\n/* harmony import */ var _shared_auth_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shared/auth.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/auth.js\");\n/* harmony import */ var _shared_auth_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/auth-utils.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/auth-utils.js\");\n/* harmony import */ var _server_auth_errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../server/auth/errors.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/server/auth/errors.js\");\n\n\n\n\n\n\nclass UnauthorizedError extends Error {\n    constructor(message) {\n        super(message !== null && message !== void 0 ? message : \"Unauthorized\");\n    }\n}\n/**\n * Determines the best client authentication method to use based on server support and client configuration.\n *\n * Priority order (highest to lowest):\n * 1. client_secret_basic (if client secret is available)\n * 2. client_secret_post (if client secret is available)\n * 3. none (for public clients)\n *\n * @param clientInformation - OAuth client information containing credentials\n * @param supportedMethods - Authentication methods supported by the authorization server\n * @returns The selected authentication method\n */\nfunction selectClientAuthMethod(clientInformation, supportedMethods) {\n    const hasClientSecret = clientInformation.client_secret !== undefined;\n    // If server doesn't specify supported methods, use RFC 6749 defaults\n    if (supportedMethods.length === 0) {\n        return hasClientSecret ? \"client_secret_post\" : \"none\";\n    }\n    // Try methods in priority order (most secure first)\n    if (hasClientSecret && supportedMethods.includes(\"client_secret_basic\")) {\n        return \"client_secret_basic\";\n    }\n    if (hasClientSecret && supportedMethods.includes(\"client_secret_post\")) {\n        return \"client_secret_post\";\n    }\n    if (supportedMethods.includes(\"none\")) {\n        return \"none\";\n    }\n    // Fallback: use what we have\n    return hasClientSecret ? \"client_secret_post\" : \"none\";\n}\n/**\n * Applies client authentication to the request based on the specified method.\n *\n * Implements OAuth 2.1 client authentication methods:\n * - client_secret_basic: HTTP Basic authentication (RFC 6749 Section 2.3.1)\n * - client_secret_post: Credentials in request body (RFC 6749 Section 2.3.1)\n * - none: Public client authentication (RFC 6749 Section 2.1)\n *\n * @param method - The authentication method to use\n * @param clientInformation - OAuth client information containing credentials\n * @param headers - HTTP headers object to modify\n * @param params - URL search parameters to modify\n * @throws {Error} When required credentials are missing\n */\nfunction applyClientAuthentication(method, clientInformation, headers, params) {\n    const { client_id, client_secret } = clientInformation;\n    switch (method) {\n        case \"client_secret_basic\":\n            applyBasicAuth(client_id, client_secret, headers);\n            return;\n        case \"client_secret_post\":\n            applyPostAuth(client_id, client_secret, params);\n            return;\n        case \"none\":\n            applyPublicAuth(client_id, params);\n            return;\n        default:\n            throw new Error(`Unsupported client authentication method: ${method}`);\n    }\n}\n/**\n * Applies HTTP Basic authentication (RFC 6749 Section 2.3.1)\n */\nfunction applyBasicAuth(clientId, clientSecret, headers) {\n    if (!clientSecret) {\n        throw new Error(\"client_secret_basic authentication requires a client_secret\");\n    }\n    const credentials = btoa(`${clientId}:${clientSecret}`);\n    headers.set(\"Authorization\", `Basic ${credentials}`);\n}\n/**\n * Applies POST body authentication (RFC 6749 Section 2.3.1)\n */\nfunction applyPostAuth(clientId, clientSecret, params) {\n    params.set(\"client_id\", clientId);\n    if (clientSecret) {\n        params.set(\"client_secret\", clientSecret);\n    }\n}\n/**\n * Applies public client authentication (RFC 6749 Section 2.1)\n */\nfunction applyPublicAuth(clientId, params) {\n    params.set(\"client_id\", clientId);\n}\n/**\n * Parses an OAuth error response from a string or Response object.\n *\n * If the input is a standard OAuth2.0 error response, it will be parsed according to the spec\n * and an instance of the appropriate OAuthError subclass will be returned.\n * If parsing fails, it falls back to a generic ServerError that includes\n * the response status (if available) and original content.\n *\n * @param input - A Response object or string containing the error response\n * @returns A Promise that resolves to an OAuthError instance\n */\nasync function parseErrorResponse(input) {\n    const statusCode = input instanceof Response ? input.status : undefined;\n    const body = input instanceof Response ? await input.text() : input;\n    try {\n        const result = _shared_auth_js__WEBPACK_IMPORTED_MODULE_2__.OAuthErrorResponseSchema.parse(JSON.parse(body));\n        const { error, error_description, error_uri } = result;\n        const errorClass = _server_auth_errors_js__WEBPACK_IMPORTED_MODULE_4__.OAUTH_ERRORS[error] || _server_auth_errors_js__WEBPACK_IMPORTED_MODULE_4__.ServerError;\n        return new errorClass(error_description || '', error_uri);\n    }\n    catch (error) {\n        // Not a valid OAuth error response, but try to inform the user of the raw data anyway\n        const errorMessage = `${statusCode ? `HTTP ${statusCode}: ` : ''}Invalid OAuth error response: ${error}. Raw body: ${body}`;\n        return new _server_auth_errors_js__WEBPACK_IMPORTED_MODULE_4__.ServerError(errorMessage);\n    }\n}\n/**\n * Orchestrates the full auth flow with a server.\n *\n * This can be used as a single entry point for all authorization functionality,\n * instead of linking together the other lower-level functions in this module.\n */\nasync function auth(provider, options) {\n    var _a, _b;\n    try {\n        return await authInternal(provider, options);\n    }\n    catch (error) {\n        // Handle recoverable error types by invalidating credentials and retrying\n        if (error instanceof _server_auth_errors_js__WEBPACK_IMPORTED_MODULE_4__.InvalidClientError || error instanceof _server_auth_errors_js__WEBPACK_IMPORTED_MODULE_4__.UnauthorizedClientError) {\n            await ((_a = provider.invalidateCredentials) === null || _a === void 0 ? void 0 : _a.call(provider, 'all'));\n            return await authInternal(provider, options);\n        }\n        else if (error instanceof _server_auth_errors_js__WEBPACK_IMPORTED_MODULE_4__.InvalidGrantError) {\n            await ((_b = provider.invalidateCredentials) === null || _b === void 0 ? void 0 : _b.call(provider, 'tokens'));\n            return await authInternal(provider, options);\n        }\n        // Throw otherwise\n        throw error;\n    }\n}\nasync function authInternal(provider, { serverUrl, authorizationCode, scope, resourceMetadataUrl, fetchFn, }) {\n    let resourceMetadata;\n    let authorizationServerUrl;\n    try {\n        resourceMetadata = await discoverOAuthProtectedResourceMetadata(serverUrl, { resourceMetadataUrl }, fetchFn);\n        if (resourceMetadata.authorization_servers && resourceMetadata.authorization_servers.length > 0) {\n            authorizationServerUrl = resourceMetadata.authorization_servers[0];\n        }\n    }\n    catch (_a) {\n        // Ignore errors and fall back to /.well-known/oauth-authorization-server\n    }\n    /**\n     * If we don't get a valid authorization server metadata from protected resource metadata,\n     * fallback to the legacy MCP spec's implementation (version 2025-03-26): MCP server acts as the Authorization server.\n     */\n    if (!authorizationServerUrl) {\n        authorizationServerUrl = serverUrl;\n    }\n    const resource = await selectResourceURL(serverUrl, provider, resourceMetadata);\n    const metadata = await discoverAuthorizationServerMetadata(authorizationServerUrl, {\n        fetchFn,\n    });\n    // Handle client registration if needed\n    let clientInformation = await Promise.resolve(provider.clientInformation());\n    if (!clientInformation) {\n        if (authorizationCode !== undefined) {\n            throw new Error(\"Existing OAuth client information is required when exchanging an authorization code\");\n        }\n        if (!provider.saveClientInformation) {\n            throw new Error(\"OAuth client information must be saveable for dynamic registration\");\n        }\n        const fullInformation = await registerClient(authorizationServerUrl, {\n            metadata,\n            clientMetadata: provider.clientMetadata,\n            fetchFn,\n        });\n        await provider.saveClientInformation(fullInformation);\n        clientInformation = fullInformation;\n    }\n    // Exchange authorization code for tokens\n    if (authorizationCode !== undefined) {\n        const codeVerifier = await provider.codeVerifier();\n        const tokens = await exchangeAuthorization(authorizationServerUrl, {\n            metadata,\n            clientInformation,\n            authorizationCode,\n            codeVerifier,\n            redirectUri: provider.redirectUrl,\n            resource,\n            addClientAuthentication: provider.addClientAuthentication,\n            fetchFn: fetchFn,\n        });\n        await provider.saveTokens(tokens);\n        return \"AUTHORIZED\";\n    }\n    const tokens = await provider.tokens();\n    // Handle token refresh or new authorization\n    if (tokens === null || tokens === void 0 ? void 0 : tokens.refresh_token) {\n        try {\n            // Attempt to refresh the token\n            const newTokens = await refreshAuthorization(authorizationServerUrl, {\n                metadata,\n                clientInformation,\n                refreshToken: tokens.refresh_token,\n                resource,\n                addClientAuthentication: provider.addClientAuthentication,\n                fetchFn,\n            });\n            await provider.saveTokens(newTokens);\n            return \"AUTHORIZED\";\n        }\n        catch (error) {\n            // If this is a ServerError, or an unknown type, log it out and try to continue. Otherwise, escalate so we can fix things and retry.\n            if (!(error instanceof _server_auth_errors_js__WEBPACK_IMPORTED_MODULE_4__.OAuthError) || error instanceof _server_auth_errors_js__WEBPACK_IMPORTED_MODULE_4__.ServerError) {\n                // Could not refresh OAuth tokens\n            }\n            else {\n                // Refresh failed for another reason, re-throw\n                throw error;\n            }\n        }\n    }\n    const state = provider.state ? await provider.state() : undefined;\n    // Start new authorization flow\n    const { authorizationUrl, codeVerifier } = await startAuthorization(authorizationServerUrl, {\n        metadata,\n        clientInformation,\n        state,\n        redirectUrl: provider.redirectUrl,\n        scope: scope || provider.clientMetadata.scope,\n        resource,\n    });\n    await provider.saveCodeVerifier(codeVerifier);\n    await provider.redirectToAuthorization(authorizationUrl);\n    return \"REDIRECT\";\n}\nasync function selectResourceURL(serverUrl, provider, resourceMetadata) {\n    const defaultResource = (0,_shared_auth_utils_js__WEBPACK_IMPORTED_MODULE_3__.resourceUrlFromServerUrl)(serverUrl);\n    // If provider has custom validation, delegate to it\n    if (provider.validateResourceURL) {\n        return await provider.validateResourceURL(defaultResource, resourceMetadata === null || resourceMetadata === void 0 ? void 0 : resourceMetadata.resource);\n    }\n    // Only include resource parameter when Protected Resource Metadata is present\n    if (!resourceMetadata) {\n        return undefined;\n    }\n    // Validate that the metadata's resource is compatible with our request\n    if (!(0,_shared_auth_utils_js__WEBPACK_IMPORTED_MODULE_3__.checkResourceAllowed)({ requestedResource: defaultResource, configuredResource: resourceMetadata.resource })) {\n        throw new Error(`Protected resource ${resourceMetadata.resource} does not match expected ${defaultResource} (or origin)`);\n    }\n    // Prefer the resource from metadata since it's what the server is telling us to request\n    return new URL(resourceMetadata.resource);\n}\n/**\n * Extract resource_metadata from response header.\n */\nfunction extractResourceMetadataUrl(res) {\n    const authenticateHeader = res.headers.get(\"WWW-Authenticate\");\n    if (!authenticateHeader) {\n        return undefined;\n    }\n    const [type, scheme] = authenticateHeader.split(' ');\n    if (type.toLowerCase() !== 'bearer' || !scheme) {\n        return undefined;\n    }\n    const regex = /resource_metadata=\"([^\"]*)\"/;\n    const match = regex.exec(authenticateHeader);\n    if (!match) {\n        return undefined;\n    }\n    try {\n        return new URL(match[1]);\n    }\n    catch (_a) {\n        return undefined;\n    }\n}\n/**\n * Looks up RFC 9728 OAuth 2.0 Protected Resource Metadata.\n *\n * If the server returns a 404 for the well-known endpoint, this function will\n * return `undefined`. Any other errors will be thrown as exceptions.\n */\nasync function discoverOAuthProtectedResourceMetadata(serverUrl, opts, fetchFn = fetch) {\n    const response = await discoverMetadataWithFallback(serverUrl, 'oauth-protected-resource', fetchFn, {\n        protocolVersion: opts === null || opts === void 0 ? void 0 : opts.protocolVersion,\n        metadataUrl: opts === null || opts === void 0 ? void 0 : opts.resourceMetadataUrl,\n    });\n    if (!response || response.status === 404) {\n        throw new Error(`Resource server does not implement OAuth 2.0 Protected Resource Metadata.`);\n    }\n    if (!response.ok) {\n        throw new Error(`HTTP ${response.status} trying to load well-known OAuth protected resource metadata.`);\n    }\n    return _shared_auth_js__WEBPACK_IMPORTED_MODULE_2__.OAuthProtectedResourceMetadataSchema.parse(await response.json());\n}\n/**\n * Helper function to handle fetch with CORS retry logic\n */\nasync function fetchWithCorsRetry(url, headers, fetchFn = fetch) {\n    try {\n        return await fetchFn(url, { headers });\n    }\n    catch (error) {\n        if (error instanceof TypeError) {\n            if (headers) {\n                // CORS errors come back as TypeError, retry without headers\n                return fetchWithCorsRetry(url, undefined, fetchFn);\n            }\n            else {\n                // We're getting CORS errors on retry too, return undefined\n                return undefined;\n            }\n        }\n        throw error;\n    }\n}\n/**\n * Constructs the well-known path for auth-related metadata discovery\n */\nfunction buildWellKnownPath(wellKnownPrefix, pathname = '', options = {}) {\n    // Strip trailing slash from pathname to avoid double slashes\n    if (pathname.endsWith('/')) {\n        pathname = pathname.slice(0, -1);\n    }\n    return options.prependPathname\n        ? `${pathname}/.well-known/${wellKnownPrefix}`\n        : `/.well-known/${wellKnownPrefix}${pathname}`;\n}\n/**\n * Tries to discover OAuth metadata at a specific URL\n */\nasync function tryMetadataDiscovery(url, protocolVersion, fetchFn = fetch) {\n    const headers = {\n        \"MCP-Protocol-Version\": protocolVersion\n    };\n    return await fetchWithCorsRetry(url, headers, fetchFn);\n}\n/**\n * Determines if fallback to root discovery should be attempted\n */\nfunction shouldAttemptFallback(response, pathname) {\n    return !response || (response.status >= 400 && response.status < 500) && pathname !== '/';\n}\n/**\n * Generic function for discovering OAuth metadata with fallback support\n */\nasync function discoverMetadataWithFallback(serverUrl, wellKnownType, fetchFn, opts) {\n    var _a, _b;\n    const issuer = new URL(serverUrl);\n    const protocolVersion = (_a = opts === null || opts === void 0 ? void 0 : opts.protocolVersion) !== null && _a !== void 0 ? _a : _types_js__WEBPACK_IMPORTED_MODULE_1__.LATEST_PROTOCOL_VERSION;\n    let url;\n    if (opts === null || opts === void 0 ? void 0 : opts.metadataUrl) {\n        url = new URL(opts.metadataUrl);\n    }\n    else {\n        // Try path-aware discovery first\n        const wellKnownPath = buildWellKnownPath(wellKnownType, issuer.pathname);\n        url = new URL(wellKnownPath, (_b = opts === null || opts === void 0 ? void 0 : opts.metadataServerUrl) !== null && _b !== void 0 ? _b : issuer);\n        url.search = issuer.search;\n    }\n    let response = await tryMetadataDiscovery(url, protocolVersion, fetchFn);\n    // If path-aware discovery fails with 404 and we're not already at root, try fallback to root discovery\n    if (!(opts === null || opts === void 0 ? void 0 : opts.metadataUrl) && shouldAttemptFallback(response, issuer.pathname)) {\n        const rootUrl = new URL(`/.well-known/${wellKnownType}`, issuer);\n        response = await tryMetadataDiscovery(rootUrl, protocolVersion, fetchFn);\n    }\n    return response;\n}\n/**\n * Looks up RFC 8414 OAuth 2.0 Authorization Server Metadata.\n *\n * If the server returns a 404 for the well-known endpoint, this function will\n * return `undefined`. Any other errors will be thrown as exceptions.\n *\n * @deprecated This function is deprecated in favor of `discoverAuthorizationServerMetadata`.\n */\nasync function discoverOAuthMetadata(issuer, { authorizationServerUrl, protocolVersion, } = {}, fetchFn = fetch) {\n    if (typeof issuer === 'string') {\n        issuer = new URL(issuer);\n    }\n    if (!authorizationServerUrl) {\n        authorizationServerUrl = issuer;\n    }\n    if (typeof authorizationServerUrl === 'string') {\n        authorizationServerUrl = new URL(authorizationServerUrl);\n    }\n    protocolVersion !== null && protocolVersion !== void 0 ? protocolVersion : (protocolVersion = _types_js__WEBPACK_IMPORTED_MODULE_1__.LATEST_PROTOCOL_VERSION);\n    const response = await discoverMetadataWithFallback(authorizationServerUrl, 'oauth-authorization-server', fetchFn, {\n        protocolVersion,\n        metadataServerUrl: authorizationServerUrl,\n    });\n    if (!response || response.status === 404) {\n        return undefined;\n    }\n    if (!response.ok) {\n        throw new Error(`HTTP ${response.status} trying to load well-known OAuth metadata`);\n    }\n    return _shared_auth_js__WEBPACK_IMPORTED_MODULE_2__.OAuthMetadataSchema.parse(await response.json());\n}\n/**\n * Builds a list of discovery URLs to try for authorization server metadata.\n * URLs are returned in priority order:\n * 1. OAuth metadata at the given URL\n * 2. OAuth metadata at root (if URL has path)\n * 3. OIDC metadata endpoints\n */\nfunction buildDiscoveryUrls(authorizationServerUrl) {\n    const url = typeof authorizationServerUrl === 'string' ? new URL(authorizationServerUrl) : authorizationServerUrl;\n    const hasPath = url.pathname !== '/';\n    const urlsToTry = [];\n    if (!hasPath) {\n        // Root path: https://example.com/.well-known/oauth-authorization-server\n        urlsToTry.push({\n            url: new URL('/.well-known/oauth-authorization-server', url.origin),\n            type: 'oauth'\n        });\n        // OIDC: https://example.com/.well-known/openid-configuration\n        urlsToTry.push({\n            url: new URL(`/.well-known/openid-configuration`, url.origin),\n            type: 'oidc'\n        });\n        return urlsToTry;\n    }\n    // Strip trailing slash from pathname to avoid double slashes\n    let pathname = url.pathname;\n    if (pathname.endsWith('/')) {\n        pathname = pathname.slice(0, -1);\n    }\n    // 1. OAuth metadata at the given URL\n    // Insert well-known before the path: https://example.com/.well-known/oauth-authorization-server/tenant1\n    urlsToTry.push({\n        url: new URL(`/.well-known/oauth-authorization-server${pathname}`, url.origin),\n        type: 'oauth'\n    });\n    // Root path: https://example.com/.well-known/oauth-authorization-server\n    urlsToTry.push({\n        url: new URL('/.well-known/oauth-authorization-server', url.origin),\n        type: 'oauth'\n    });\n    // 3. OIDC metadata endpoints\n    // RFC 8414 style: Insert /.well-known/openid-configuration before the path\n    urlsToTry.push({\n        url: new URL(`/.well-known/openid-configuration${pathname}`, url.origin),\n        type: 'oidc'\n    });\n    // OIDC Discovery 1.0 style: Append /.well-known/openid-configuration after the path\n    urlsToTry.push({\n        url: new URL(`${pathname}/.well-known/openid-configuration`, url.origin),\n        type: 'oidc'\n    });\n    return urlsToTry;\n}\n/**\n * Discovers authorization server metadata with support for RFC 8414 OAuth 2.0 Authorization Server Metadata\n * and OpenID Connect Discovery 1.0 specifications.\n *\n * This function implements a fallback strategy for authorization server discovery:\n * 1. Attempts RFC 8414 OAuth metadata discovery first\n * 2. If OAuth discovery fails, falls back to OpenID Connect Discovery\n *\n * @param authorizationServerUrl - The authorization server URL obtained from the MCP Server's\n *                                 protected resource metadata, or the MCP server's URL if the\n *                                 metadata was not found.\n * @param options - Configuration options\n * @param options.fetchFn - Optional fetch function for making HTTP requests, defaults to global fetch\n * @param options.protocolVersion - MCP protocol version to use, defaults to LATEST_PROTOCOL_VERSION\n * @returns Promise resolving to authorization server metadata, or undefined if discovery fails\n */\nasync function discoverAuthorizationServerMetadata(authorizationServerUrl, { fetchFn = fetch, protocolVersion = _types_js__WEBPACK_IMPORTED_MODULE_1__.LATEST_PROTOCOL_VERSION, } = {}) {\n    var _a;\n    const headers = { 'MCP-Protocol-Version': protocolVersion };\n    // Get the list of URLs to try\n    const urlsToTry = buildDiscoveryUrls(authorizationServerUrl);\n    // Try each URL in order\n    for (const { url: endpointUrl, type } of urlsToTry) {\n        const response = await fetchWithCorsRetry(endpointUrl, headers, fetchFn);\n        if (!response) {\n            /**\n             * CORS error occurred - don't throw as the endpoint may not allow CORS,\n             * continue trying other possible endpoints\n             */\n            continue;\n        }\n        if (!response.ok) {\n            // Continue looking for any 4xx response code.\n            if (response.status >= 400 && response.status < 500) {\n                continue; // Try next URL\n            }\n            throw new Error(`HTTP ${response.status} trying to load ${type === 'oauth' ? 'OAuth' : 'OpenID provider'} metadata from ${endpointUrl}`);\n        }\n        // Parse and validate based on type\n        if (type === 'oauth') {\n            return _shared_auth_js__WEBPACK_IMPORTED_MODULE_2__.OAuthMetadataSchema.parse(await response.json());\n        }\n        else {\n            const metadata = _shared_auth_js__WEBPACK_IMPORTED_MODULE_2__.OpenIdProviderDiscoveryMetadataSchema.parse(await response.json());\n            // MCP spec requires OIDC providers to support S256 PKCE\n            if (!((_a = metadata.code_challenge_methods_supported) === null || _a === void 0 ? void 0 : _a.includes('S256'))) {\n                throw new Error(`Incompatible OIDC provider at ${endpointUrl}: does not support S256 code challenge method required by MCP specification`);\n            }\n            return metadata;\n        }\n    }\n    return undefined;\n}\n/**\n * Begins the authorization flow with the given server, by generating a PKCE challenge and constructing the authorization URL.\n */\nasync function startAuthorization(authorizationServerUrl, { metadata, clientInformation, redirectUrl, scope, state, resource, }) {\n    const responseType = \"code\";\n    const codeChallengeMethod = \"S256\";\n    let authorizationUrl;\n    if (metadata) {\n        authorizationUrl = new URL(metadata.authorization_endpoint);\n        if (!metadata.response_types_supported.includes(responseType)) {\n            throw new Error(`Incompatible auth server: does not support response type ${responseType}`);\n        }\n        if (!metadata.code_challenge_methods_supported ||\n            !metadata.code_challenge_methods_supported.includes(codeChallengeMethod)) {\n            throw new Error(`Incompatible auth server: does not support code challenge method ${codeChallengeMethod}`);\n        }\n    }\n    else {\n        authorizationUrl = new URL(\"/authorize\", authorizationServerUrl);\n    }\n    // Generate PKCE challenge\n    const challenge = await (0,pkce_challenge__WEBPACK_IMPORTED_MODULE_0__[\"default\"])();\n    const codeVerifier = challenge.code_verifier;\n    const codeChallenge = challenge.code_challenge;\n    authorizationUrl.searchParams.set(\"response_type\", responseType);\n    authorizationUrl.searchParams.set(\"client_id\", clientInformation.client_id);\n    authorizationUrl.searchParams.set(\"code_challenge\", codeChallenge);\n    authorizationUrl.searchParams.set(\"code_challenge_method\", codeChallengeMethod);\n    authorizationUrl.searchParams.set(\"redirect_uri\", String(redirectUrl));\n    if (state) {\n        authorizationUrl.searchParams.set(\"state\", state);\n    }\n    if (scope) {\n        authorizationUrl.searchParams.set(\"scope\", scope);\n    }\n    if (scope === null || scope === void 0 ? void 0 : scope.includes(\"offline_access\")) {\n        // if the request includes the OIDC-only \"offline_access\" scope,\n        // we need to set the prompt to \"consent\" to ensure the user is prompted to grant offline access\n        // https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess\n        authorizationUrl.searchParams.append(\"prompt\", \"consent\");\n    }\n    if (resource) {\n        authorizationUrl.searchParams.set(\"resource\", resource.href);\n    }\n    return { authorizationUrl, codeVerifier };\n}\n/**\n * Exchanges an authorization code for an access token with the given server.\n *\n * Supports multiple client authentication methods as specified in OAuth 2.1:\n * - Automatically selects the best authentication method based on server support\n * - Falls back to appropriate defaults when server metadata is unavailable\n *\n * @param authorizationServerUrl - The authorization server's base URL\n * @param options - Configuration object containing client info, auth code, etc.\n * @returns Promise resolving to OAuth tokens\n * @throws {Error} When token exchange fails or authentication is invalid\n */\nasync function exchangeAuthorization(authorizationServerUrl, { metadata, clientInformation, authorizationCode, codeVerifier, redirectUri, resource, addClientAuthentication, fetchFn, }) {\n    var _a;\n    const grantType = \"authorization_code\";\n    const tokenUrl = (metadata === null || metadata === void 0 ? void 0 : metadata.token_endpoint)\n        ? new URL(metadata.token_endpoint)\n        : new URL(\"/token\", authorizationServerUrl);\n    if ((metadata === null || metadata === void 0 ? void 0 : metadata.grant_types_supported) &&\n        !metadata.grant_types_supported.includes(grantType)) {\n        throw new Error(`Incompatible auth server: does not support grant type ${grantType}`);\n    }\n    // Exchange code for tokens\n    const headers = new Headers({\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        \"Accept\": \"application/json\",\n    });\n    const params = new URLSearchParams({\n        grant_type: grantType,\n        code: authorizationCode,\n        code_verifier: codeVerifier,\n        redirect_uri: String(redirectUri),\n    });\n    if (addClientAuthentication) {\n        addClientAuthentication(headers, params, authorizationServerUrl, metadata);\n    }\n    else {\n        // Determine and apply client authentication method\n        const supportedMethods = (_a = metadata === null || metadata === void 0 ? void 0 : metadata.token_endpoint_auth_methods_supported) !== null && _a !== void 0 ? _a : [];\n        const authMethod = selectClientAuthMethod(clientInformation, supportedMethods);\n        applyClientAuthentication(authMethod, clientInformation, headers, params);\n    }\n    if (resource) {\n        params.set(\"resource\", resource.href);\n    }\n    const response = await (fetchFn !== null && fetchFn !== void 0 ? fetchFn : fetch)(tokenUrl, {\n        method: \"POST\",\n        headers,\n        body: params,\n    });\n    if (!response.ok) {\n        throw await parseErrorResponse(response);\n    }\n    return _shared_auth_js__WEBPACK_IMPORTED_MODULE_2__.OAuthTokensSchema.parse(await response.json());\n}\n/**\n * Exchange a refresh token for an updated access token.\n *\n * Supports multiple client authentication methods as specified in OAuth 2.1:\n * - Automatically selects the best authentication method based on server support\n * - Preserves the original refresh token if a new one is not returned\n *\n * @param authorizationServerUrl - The authorization server's base URL\n * @param options - Configuration object containing client info, refresh token, etc.\n * @returns Promise resolving to OAuth tokens (preserves original refresh_token if not replaced)\n * @throws {Error} When token refresh fails or authentication is invalid\n */\nasync function refreshAuthorization(authorizationServerUrl, { metadata, clientInformation, refreshToken, resource, addClientAuthentication, fetchFn, }) {\n    var _a;\n    const grantType = \"refresh_token\";\n    let tokenUrl;\n    if (metadata) {\n        tokenUrl = new URL(metadata.token_endpoint);\n        if (metadata.grant_types_supported &&\n            !metadata.grant_types_supported.includes(grantType)) {\n            throw new Error(`Incompatible auth server: does not support grant type ${grantType}`);\n        }\n    }\n    else {\n        tokenUrl = new URL(\"/token\", authorizationServerUrl);\n    }\n    // Exchange refresh token\n    const headers = new Headers({\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n    });\n    const params = new URLSearchParams({\n        grant_type: grantType,\n        refresh_token: refreshToken,\n    });\n    if (addClientAuthentication) {\n        addClientAuthentication(headers, params, authorizationServerUrl, metadata);\n    }\n    else {\n        // Determine and apply client authentication method\n        const supportedMethods = (_a = metadata === null || metadata === void 0 ? void 0 : metadata.token_endpoint_auth_methods_supported) !== null && _a !== void 0 ? _a : [];\n        const authMethod = selectClientAuthMethod(clientInformation, supportedMethods);\n        applyClientAuthentication(authMethod, clientInformation, headers, params);\n    }\n    if (resource) {\n        params.set(\"resource\", resource.href);\n    }\n    const response = await (fetchFn !== null && fetchFn !== void 0 ? fetchFn : fetch)(tokenUrl, {\n        method: \"POST\",\n        headers,\n        body: params,\n    });\n    if (!response.ok) {\n        throw await parseErrorResponse(response);\n    }\n    return _shared_auth_js__WEBPACK_IMPORTED_MODULE_2__.OAuthTokensSchema.parse({ refresh_token: refreshToken, ...(await response.json()) });\n}\n/**\n * Performs OAuth 2.0 Dynamic Client Registration according to RFC 7591.\n */\nasync function registerClient(authorizationServerUrl, { metadata, clientMetadata, fetchFn, }) {\n    let registrationUrl;\n    if (metadata) {\n        if (!metadata.registration_endpoint) {\n            throw new Error(\"Incompatible auth server: does not support dynamic client registration\");\n        }\n        registrationUrl = new URL(metadata.registration_endpoint);\n    }\n    else {\n        registrationUrl = new URL(\"/register\", authorizationServerUrl);\n    }\n    const response = await (fetchFn !== null && fetchFn !== void 0 ? fetchFn : fetch)(registrationUrl, {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(clientMetadata),\n    });\n    if (!response.ok) {\n        throw await parseErrorResponse(response);\n    }\n    return _shared_auth_js__WEBPACK_IMPORTED_MODULE_2__.OAuthClientInformationFullSchema.parse(await response.json());\n}\n//# sourceMappingURL=auth.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/auth.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@modelcontextprotocol/sdk/dist/esm/client/index.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Client: () => (/* binding */ Client)\n/* harmony export */ });\n/* harmony import */ var _shared_protocol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../shared/protocol.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/protocol.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/types.js\");\n/* harmony import */ var ajv__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ajv */ \"(rsc)/./node_modules/ajv/lib/ajv.js\");\n\n\n\n/**\n * An MCP client on top of a pluggable transport.\n *\n * The client will automatically begin the initialization flow with the server when connect() is called.\n *\n * To use with custom types, extend the base Request/Notification/Result types and pass them as type parameters:\n *\n * ```typescript\n * // Custom schemas\n * const CustomRequestSchema = RequestSchema.extend({...})\n * const CustomNotificationSchema = NotificationSchema.extend({...})\n * const CustomResultSchema = ResultSchema.extend({...})\n *\n * // Type aliases\n * type CustomRequest = z.infer<typeof CustomRequestSchema>\n * type CustomNotification = z.infer<typeof CustomNotificationSchema>\n * type CustomResult = z.infer<typeof CustomResultSchema>\n *\n * // Create typed client\n * const client = new Client<CustomRequest, CustomNotification, CustomResult>({\n *   name: \"CustomClient\",\n *   version: \"1.0.0\"\n * })\n * ```\n */\nclass Client extends _shared_protocol_js__WEBPACK_IMPORTED_MODULE_0__.Protocol {\n    /**\n     * Initializes this client with the given name and version information.\n     */\n    constructor(_clientInfo, options) {\n        var _a;\n        super(options);\n        this._clientInfo = _clientInfo;\n        this._cachedToolOutputValidators = new Map();\n        this._capabilities = (_a = options === null || options === void 0 ? void 0 : options.capabilities) !== null && _a !== void 0 ? _a : {};\n        this._ajv = new ajv__WEBPACK_IMPORTED_MODULE_2__();\n    }\n    /**\n     * Registers new capabilities. This can only be called before connecting to a transport.\n     *\n     * The new capabilities will be merged with any existing capabilities previously given (e.g., at initialization).\n     */\n    registerCapabilities(capabilities) {\n        if (this.transport) {\n            throw new Error(\"Cannot register capabilities after connecting to transport\");\n        }\n        this._capabilities = (0,_shared_protocol_js__WEBPACK_IMPORTED_MODULE_0__.mergeCapabilities)(this._capabilities, capabilities);\n    }\n    assertCapability(capability, method) {\n        var _a;\n        if (!((_a = this._serverCapabilities) === null || _a === void 0 ? void 0 : _a[capability])) {\n            throw new Error(`Server does not support ${capability} (required for ${method})`);\n        }\n    }\n    async connect(transport, options) {\n        await super.connect(transport);\n        // When transport sessionId is already set this means we are trying to reconnect.\n        // In this case we don't need to initialize again.\n        if (transport.sessionId !== undefined) {\n            return;\n        }\n        try {\n            const result = await this.request({\n                method: \"initialize\",\n                params: {\n                    protocolVersion: _types_js__WEBPACK_IMPORTED_MODULE_1__.LATEST_PROTOCOL_VERSION,\n                    capabilities: this._capabilities,\n                    clientInfo: this._clientInfo,\n                },\n            }, _types_js__WEBPACK_IMPORTED_MODULE_1__.InitializeResultSchema, options);\n            if (result === undefined) {\n                throw new Error(`Server sent invalid initialize result: ${result}`);\n            }\n            if (!_types_js__WEBPACK_IMPORTED_MODULE_1__.SUPPORTED_PROTOCOL_VERSIONS.includes(result.protocolVersion)) {\n                throw new Error(`Server's protocol version is not supported: ${result.protocolVersion}`);\n            }\n            this._serverCapabilities = result.capabilities;\n            this._serverVersion = result.serverInfo;\n            // HTTP transports must set the protocol version in each header after initialization.\n            if (transport.setProtocolVersion) {\n                transport.setProtocolVersion(result.protocolVersion);\n            }\n            this._instructions = result.instructions;\n            await this.notification({\n                method: \"notifications/initialized\",\n            });\n        }\n        catch (error) {\n            // Disconnect if initialization fails.\n            void this.close();\n            throw error;\n        }\n    }\n    /**\n     * After initialization has completed, this will be populated with the server's reported capabilities.\n     */\n    getServerCapabilities() {\n        return this._serverCapabilities;\n    }\n    /**\n     * After initialization has completed, this will be populated with information about the server's name and version.\n     */\n    getServerVersion() {\n        return this._serverVersion;\n    }\n    /**\n     * After initialization has completed, this may be populated with information about the server's instructions.\n     */\n    getInstructions() {\n        return this._instructions;\n    }\n    assertCapabilityForMethod(method) {\n        var _a, _b, _c, _d, _e;\n        switch (method) {\n            case \"logging/setLevel\":\n                if (!((_a = this._serverCapabilities) === null || _a === void 0 ? void 0 : _a.logging)) {\n                    throw new Error(`Server does not support logging (required for ${method})`);\n                }\n                break;\n            case \"prompts/get\":\n            case \"prompts/list\":\n                if (!((_b = this._serverCapabilities) === null || _b === void 0 ? void 0 : _b.prompts)) {\n                    throw new Error(`Server does not support prompts (required for ${method})`);\n                }\n                break;\n            case \"resources/list\":\n            case \"resources/templates/list\":\n            case \"resources/read\":\n            case \"resources/subscribe\":\n            case \"resources/unsubscribe\":\n                if (!((_c = this._serverCapabilities) === null || _c === void 0 ? void 0 : _c.resources)) {\n                    throw new Error(`Server does not support resources (required for ${method})`);\n                }\n                if (method === \"resources/subscribe\" &&\n                    !this._serverCapabilities.resources.subscribe) {\n                    throw new Error(`Server does not support resource subscriptions (required for ${method})`);\n                }\n                break;\n            case \"tools/call\":\n            case \"tools/list\":\n                if (!((_d = this._serverCapabilities) === null || _d === void 0 ? void 0 : _d.tools)) {\n                    throw new Error(`Server does not support tools (required for ${method})`);\n                }\n                break;\n            case \"completion/complete\":\n                if (!((_e = this._serverCapabilities) === null || _e === void 0 ? void 0 : _e.completions)) {\n                    throw new Error(`Server does not support completions (required for ${method})`);\n                }\n                break;\n            case \"initialize\":\n                // No specific capability required for initialize\n                break;\n            case \"ping\":\n                // No specific capability required for ping\n                break;\n        }\n    }\n    assertNotificationCapability(method) {\n        var _a;\n        switch (method) {\n            case \"notifications/roots/list_changed\":\n                if (!((_a = this._capabilities.roots) === null || _a === void 0 ? void 0 : _a.listChanged)) {\n                    throw new Error(`Client does not support roots list changed notifications (required for ${method})`);\n                }\n                break;\n            case \"notifications/initialized\":\n                // No specific capability required for initialized\n                break;\n            case \"notifications/cancelled\":\n                // Cancellation notifications are always allowed\n                break;\n            case \"notifications/progress\":\n                // Progress notifications are always allowed\n                break;\n        }\n    }\n    assertRequestHandlerCapability(method) {\n        switch (method) {\n            case \"sampling/createMessage\":\n                if (!this._capabilities.sampling) {\n                    throw new Error(`Client does not support sampling capability (required for ${method})`);\n                }\n                break;\n            case \"elicitation/create\":\n                if (!this._capabilities.elicitation) {\n                    throw new Error(`Client does not support elicitation capability (required for ${method})`);\n                }\n                break;\n            case \"roots/list\":\n                if (!this._capabilities.roots) {\n                    throw new Error(`Client does not support roots capability (required for ${method})`);\n                }\n                break;\n            case \"ping\":\n                // No specific capability required for ping\n                break;\n        }\n    }\n    async ping(options) {\n        return this.request({ method: \"ping\" }, _types_js__WEBPACK_IMPORTED_MODULE_1__.EmptyResultSchema, options);\n    }\n    async complete(params, options) {\n        return this.request({ method: \"completion/complete\", params }, _types_js__WEBPACK_IMPORTED_MODULE_1__.CompleteResultSchema, options);\n    }\n    async setLoggingLevel(level, options) {\n        return this.request({ method: \"logging/setLevel\", params: { level } }, _types_js__WEBPACK_IMPORTED_MODULE_1__.EmptyResultSchema, options);\n    }\n    async getPrompt(params, options) {\n        return this.request({ method: \"prompts/get\", params }, _types_js__WEBPACK_IMPORTED_MODULE_1__.GetPromptResultSchema, options);\n    }\n    async listPrompts(params, options) {\n        return this.request({ method: \"prompts/list\", params }, _types_js__WEBPACK_IMPORTED_MODULE_1__.ListPromptsResultSchema, options);\n    }\n    async listResources(params, options) {\n        return this.request({ method: \"resources/list\", params }, _types_js__WEBPACK_IMPORTED_MODULE_1__.ListResourcesResultSchema, options);\n    }\n    async listResourceTemplates(params, options) {\n        return this.request({ method: \"resources/templates/list\", params }, _types_js__WEBPACK_IMPORTED_MODULE_1__.ListResourceTemplatesResultSchema, options);\n    }\n    async readResource(params, options) {\n        return this.request({ method: \"resources/read\", params }, _types_js__WEBPACK_IMPORTED_MODULE_1__.ReadResourceResultSchema, options);\n    }\n    async subscribeResource(params, options) {\n        return this.request({ method: \"resources/subscribe\", params }, _types_js__WEBPACK_IMPORTED_MODULE_1__.EmptyResultSchema, options);\n    }\n    async unsubscribeResource(params, options) {\n        return this.request({ method: \"resources/unsubscribe\", params }, _types_js__WEBPACK_IMPORTED_MODULE_1__.EmptyResultSchema, options);\n    }\n    async callTool(params, resultSchema = _types_js__WEBPACK_IMPORTED_MODULE_1__.CallToolResultSchema, options) {\n        const result = await this.request({ method: \"tools/call\", params }, resultSchema, options);\n        // Check if the tool has an outputSchema\n        const validator = this.getToolOutputValidator(params.name);\n        if (validator) {\n            // If tool has outputSchema, it MUST return structuredContent (unless it's an error)\n            if (!result.structuredContent && !result.isError) {\n                throw new _types_js__WEBPACK_IMPORTED_MODULE_1__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.InvalidRequest, `Tool ${params.name} has an output schema but did not return structured content`);\n            }\n            // Only validate structured content if present (not when there's an error)\n            if (result.structuredContent) {\n                try {\n                    // Validate the structured content (which is already an object) against the schema\n                    const isValid = validator(result.structuredContent);\n                    if (!isValid) {\n                        throw new _types_js__WEBPACK_IMPORTED_MODULE_1__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.InvalidParams, `Structured content does not match the tool's output schema: ${this._ajv.errorsText(validator.errors)}`);\n                    }\n                }\n                catch (error) {\n                    if (error instanceof _types_js__WEBPACK_IMPORTED_MODULE_1__.McpError) {\n                        throw error;\n                    }\n                    throw new _types_js__WEBPACK_IMPORTED_MODULE_1__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_1__.ErrorCode.InvalidParams, `Failed to validate structured content: ${error instanceof Error ? error.message : String(error)}`);\n                }\n            }\n        }\n        return result;\n    }\n    cacheToolOutputSchemas(tools) {\n        this._cachedToolOutputValidators.clear();\n        for (const tool of tools) {\n            // If the tool has an outputSchema, create and cache the Ajv validator\n            if (tool.outputSchema) {\n                try {\n                    const validator = this._ajv.compile(tool.outputSchema);\n                    this._cachedToolOutputValidators.set(tool.name, validator);\n                }\n                catch (_a) {\n                    // Ignore schema compilation errors\n                }\n            }\n        }\n    }\n    getToolOutputValidator(toolName) {\n        return this._cachedToolOutputValidators.get(toolName);\n    }\n    async listTools(params, options) {\n        const result = await this.request({ method: \"tools/list\", params }, _types_js__WEBPACK_IMPORTED_MODULE_1__.ListToolsResultSchema, options);\n        // Cache the tools and their output schemas for future validation\n        this.cacheToolOutputSchemas(result.tools);\n        return result;\n    }\n    async sendRootsListChanged() {\n        return this.notification({ method: \"notifications/roots/list_changed\" });\n    }\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/sse.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@modelcontextprotocol/sdk/dist/esm/client/sse.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SSEClientTransport: () => (/* binding */ SSEClientTransport),\n/* harmony export */   SseError: () => (/* binding */ SseError)\n/* harmony export */ });\n/* harmony import */ var eventsource__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! eventsource */ \"(rsc)/./node_modules/eventsource/dist/index.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/types.js\");\n/* harmony import */ var _auth_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./auth.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/auth.js\");\n\n\n\nclass SseError extends Error {\n    constructor(code, message, event) {\n        super(`SSE error: ${message}`);\n        this.code = code;\n        this.event = event;\n    }\n}\n/**\n * Client transport for SSE: this will connect to a server using Server-Sent Events for receiving\n * messages and make separate POST requests for sending messages.\n */\nclass SSEClientTransport {\n    constructor(url, opts) {\n        this._url = url;\n        this._resourceMetadataUrl = undefined;\n        this._eventSourceInit = opts === null || opts === void 0 ? void 0 : opts.eventSourceInit;\n        this._requestInit = opts === null || opts === void 0 ? void 0 : opts.requestInit;\n        this._authProvider = opts === null || opts === void 0 ? void 0 : opts.authProvider;\n        this._fetch = opts === null || opts === void 0 ? void 0 : opts.fetch;\n    }\n    async _authThenStart() {\n        var _a;\n        if (!this._authProvider) {\n            throw new _auth_js__WEBPACK_IMPORTED_MODULE_1__.UnauthorizedError(\"No auth provider\");\n        }\n        let result;\n        try {\n            result = await (0,_auth_js__WEBPACK_IMPORTED_MODULE_1__.auth)(this._authProvider, { serverUrl: this._url, resourceMetadataUrl: this._resourceMetadataUrl, fetchFn: this._fetch });\n        }\n        catch (error) {\n            (_a = this.onerror) === null || _a === void 0 ? void 0 : _a.call(this, error);\n            throw error;\n        }\n        if (result !== \"AUTHORIZED\") {\n            throw new _auth_js__WEBPACK_IMPORTED_MODULE_1__.UnauthorizedError();\n        }\n        return await this._startOrAuth();\n    }\n    async _commonHeaders() {\n        var _a;\n        const headers = {};\n        if (this._authProvider) {\n            const tokens = await this._authProvider.tokens();\n            if (tokens) {\n                headers[\"Authorization\"] = `Bearer ${tokens.access_token}`;\n            }\n        }\n        if (this._protocolVersion) {\n            headers[\"mcp-protocol-version\"] = this._protocolVersion;\n        }\n        return new Headers({ ...headers, ...(_a = this._requestInit) === null || _a === void 0 ? void 0 : _a.headers });\n    }\n    _startOrAuth() {\n        var _a, _b, _c;\n        const fetchImpl = ((_c = (_b = (_a = this === null || this === void 0 ? void 0 : this._eventSourceInit) === null || _a === void 0 ? void 0 : _a.fetch) !== null && _b !== void 0 ? _b : this._fetch) !== null && _c !== void 0 ? _c : fetch);\n        return new Promise((resolve, reject) => {\n            this._eventSource = new eventsource__WEBPACK_IMPORTED_MODULE_2__.EventSource(this._url.href, {\n                ...this._eventSourceInit,\n                fetch: async (url, init) => {\n                    const headers = await this._commonHeaders();\n                    headers.set(\"Accept\", \"text/event-stream\");\n                    const response = await fetchImpl(url, {\n                        ...init,\n                        headers,\n                    });\n                    if (response.status === 401 && response.headers.has('www-authenticate')) {\n                        this._resourceMetadataUrl = (0,_auth_js__WEBPACK_IMPORTED_MODULE_1__.extractResourceMetadataUrl)(response);\n                    }\n                    return response;\n                },\n            });\n            this._abortController = new AbortController();\n            this._eventSource.onerror = (event) => {\n                var _a;\n                if (event.code === 401 && this._authProvider) {\n                    this._authThenStart().then(resolve, reject);\n                    return;\n                }\n                const error = new SseError(event.code, event.message, event);\n                reject(error);\n                (_a = this.onerror) === null || _a === void 0 ? void 0 : _a.call(this, error);\n            };\n            this._eventSource.onopen = () => {\n                // The connection is open, but we need to wait for the endpoint to be received.\n            };\n            this._eventSource.addEventListener(\"endpoint\", (event) => {\n                var _a;\n                const messageEvent = event;\n                try {\n                    this._endpoint = new URL(messageEvent.data, this._url);\n                    if (this._endpoint.origin !== this._url.origin) {\n                        throw new Error(`Endpoint origin does not match connection origin: ${this._endpoint.origin}`);\n                    }\n                }\n                catch (error) {\n                    reject(error);\n                    (_a = this.onerror) === null || _a === void 0 ? void 0 : _a.call(this, error);\n                    void this.close();\n                    return;\n                }\n                resolve();\n            });\n            this._eventSource.onmessage = (event) => {\n                var _a, _b;\n                const messageEvent = event;\n                let message;\n                try {\n                    message = _types_js__WEBPACK_IMPORTED_MODULE_0__.JSONRPCMessageSchema.parse(JSON.parse(messageEvent.data));\n                }\n                catch (error) {\n                    (_a = this.onerror) === null || _a === void 0 ? void 0 : _a.call(this, error);\n                    return;\n                }\n                (_b = this.onmessage) === null || _b === void 0 ? void 0 : _b.call(this, message);\n            };\n        });\n    }\n    async start() {\n        if (this._eventSource) {\n            throw new Error(\"SSEClientTransport already started! If using Client class, note that connect() calls start() automatically.\");\n        }\n        return await this._startOrAuth();\n    }\n    /**\n     * Call this method after the user has finished authorizing via their user agent and is redirected back to the MCP client application. This will exchange the authorization code for an access token, enabling the next connection attempt to successfully auth.\n     */\n    async finishAuth(authorizationCode) {\n        if (!this._authProvider) {\n            throw new _auth_js__WEBPACK_IMPORTED_MODULE_1__.UnauthorizedError(\"No auth provider\");\n        }\n        const result = await (0,_auth_js__WEBPACK_IMPORTED_MODULE_1__.auth)(this._authProvider, { serverUrl: this._url, authorizationCode, resourceMetadataUrl: this._resourceMetadataUrl, fetchFn: this._fetch });\n        if (result !== \"AUTHORIZED\") {\n            throw new _auth_js__WEBPACK_IMPORTED_MODULE_1__.UnauthorizedError(\"Failed to authorize\");\n        }\n    }\n    async close() {\n        var _a, _b, _c;\n        (_a = this._abortController) === null || _a === void 0 ? void 0 : _a.abort();\n        (_b = this._eventSource) === null || _b === void 0 ? void 0 : _b.close();\n        (_c = this.onclose) === null || _c === void 0 ? void 0 : _c.call(this);\n    }\n    async send(message) {\n        var _a, _b, _c;\n        if (!this._endpoint) {\n            throw new Error(\"Not connected\");\n        }\n        try {\n            const headers = await this._commonHeaders();\n            headers.set(\"content-type\", \"application/json\");\n            const init = {\n                ...this._requestInit,\n                method: \"POST\",\n                headers,\n                body: JSON.stringify(message),\n                signal: (_a = this._abortController) === null || _a === void 0 ? void 0 : _a.signal,\n            };\n            const response = await ((_b = this._fetch) !== null && _b !== void 0 ? _b : fetch)(this._endpoint, init);\n            if (!response.ok) {\n                if (response.status === 401 && this._authProvider) {\n                    this._resourceMetadataUrl = (0,_auth_js__WEBPACK_IMPORTED_MODULE_1__.extractResourceMetadataUrl)(response);\n                    const result = await (0,_auth_js__WEBPACK_IMPORTED_MODULE_1__.auth)(this._authProvider, { serverUrl: this._url, resourceMetadataUrl: this._resourceMetadataUrl, fetchFn: this._fetch });\n                    if (result !== \"AUTHORIZED\") {\n                        throw new _auth_js__WEBPACK_IMPORTED_MODULE_1__.UnauthorizedError();\n                    }\n                    // Purposely _not_ awaited, so we don't call onerror twice\n                    return this.send(message);\n                }\n                const text = await response.text().catch(() => null);\n                throw new Error(`Error POSTing to endpoint (HTTP ${response.status}): ${text}`);\n            }\n        }\n        catch (error) {\n            (_c = this.onerror) === null || _c === void 0 ? void 0 : _c.call(this, error);\n            throw error;\n        }\n    }\n    setProtocolVersion(version) {\n        this._protocolVersion = version;\n    }\n}\n//# sourceMappingURL=sse.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/sse.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/stdio.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@modelcontextprotocol/sdk/dist/esm/client/stdio.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_INHERITED_ENV_VARS: () => (/* binding */ DEFAULT_INHERITED_ENV_VARS),\n/* harmony export */   StdioClientTransport: () => (/* binding */ StdioClientTransport),\n/* harmony export */   getDefaultEnvironment: () => (/* binding */ getDefaultEnvironment)\n/* harmony export */ });\n/* harmony import */ var cross_spawn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-spawn */ \"(rsc)/./node_modules/cross-spawn/index.js\");\n/* harmony import */ var node_process__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:process */ \"node:process\");\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var _shared_stdio_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shared/stdio.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/stdio.js\");\n\n\n\n\n/**\n * Environment variables to inherit by default, if an environment is not explicitly given.\n */\nconst DEFAULT_INHERITED_ENV_VARS = node_process__WEBPACK_IMPORTED_MODULE_1__.platform === \"win32\"\n    ? [\n        \"APPDATA\",\n        \"HOMEDRIVE\",\n        \"HOMEPATH\",\n        \"LOCALAPPDATA\",\n        \"PATH\",\n        \"PROCESSOR_ARCHITECTURE\",\n        \"SYSTEMDRIVE\",\n        \"SYSTEMROOT\",\n        \"TEMP\",\n        \"USERNAME\",\n        \"USERPROFILE\",\n        \"PROGRAMFILES\",\n    ]\n    : /* list inspired by the default env inheritance of sudo */\n        [\"HOME\", \"LOGNAME\", \"PATH\", \"SHELL\", \"TERM\", \"USER\"];\n/**\n * Returns a default environment object including only environment variables deemed safe to inherit.\n */\nfunction getDefaultEnvironment() {\n    const env = {};\n    for (const key of DEFAULT_INHERITED_ENV_VARS) {\n        const value = node_process__WEBPACK_IMPORTED_MODULE_1__.env[key];\n        if (value === undefined) {\n            continue;\n        }\n        if (value.startsWith(\"()\")) {\n            // Skip functions, which are a security risk.\n            continue;\n        }\n        env[key] = value;\n    }\n    return env;\n}\n/**\n * Client transport for stdio: this will connect to a server by spawning a process and communicating with it over stdin/stdout.\n *\n * This transport is only available in Node.js environments.\n */\nclass StdioClientTransport {\n    constructor(server) {\n        this._abortController = new AbortController();\n        this._readBuffer = new _shared_stdio_js__WEBPACK_IMPORTED_MODULE_3__.ReadBuffer();\n        this._stderrStream = null;\n        this._serverParams = server;\n        if (server.stderr === \"pipe\" || server.stderr === \"overlapped\") {\n            this._stderrStream = new node_stream__WEBPACK_IMPORTED_MODULE_2__.PassThrough();\n        }\n    }\n    /**\n     * Starts the server process and prepares to communicate with it.\n     */\n    async start() {\n        if (this._process) {\n            throw new Error(\"StdioClientTransport already started! If using Client class, note that connect() calls start() automatically.\");\n        }\n        return new Promise((resolve, reject) => {\n            var _a, _b, _c, _d, _e;\n            this._process = cross_spawn__WEBPACK_IMPORTED_MODULE_0__(this._serverParams.command, (_a = this._serverParams.args) !== null && _a !== void 0 ? _a : [], {\n                // merge default env with server env because mcp server needs some env vars\n                env: {\n                    ...getDefaultEnvironment(),\n                    ...this._serverParams.env,\n                },\n                stdio: [\"pipe\", \"pipe\", (_b = this._serverParams.stderr) !== null && _b !== void 0 ? _b : \"inherit\"],\n                shell: false,\n                signal: this._abortController.signal,\n                windowsHide: node_process__WEBPACK_IMPORTED_MODULE_1__.platform === \"win32\" && isElectron(),\n                cwd: this._serverParams.cwd,\n            });\n            this._process.on(\"error\", (error) => {\n                var _a, _b;\n                if (error.name === \"AbortError\") {\n                    // Expected when close() is called.\n                    (_a = this.onclose) === null || _a === void 0 ? void 0 : _a.call(this);\n                    return;\n                }\n                reject(error);\n                (_b = this.onerror) === null || _b === void 0 ? void 0 : _b.call(this, error);\n            });\n            this._process.on(\"spawn\", () => {\n                resolve();\n            });\n            this._process.on(\"close\", (_code) => {\n                var _a;\n                this._process = undefined;\n                (_a = this.onclose) === null || _a === void 0 ? void 0 : _a.call(this);\n            });\n            (_c = this._process.stdin) === null || _c === void 0 ? void 0 : _c.on(\"error\", (error) => {\n                var _a;\n                (_a = this.onerror) === null || _a === void 0 ? void 0 : _a.call(this, error);\n            });\n            (_d = this._process.stdout) === null || _d === void 0 ? void 0 : _d.on(\"data\", (chunk) => {\n                this._readBuffer.append(chunk);\n                this.processReadBuffer();\n            });\n            (_e = this._process.stdout) === null || _e === void 0 ? void 0 : _e.on(\"error\", (error) => {\n                var _a;\n                (_a = this.onerror) === null || _a === void 0 ? void 0 : _a.call(this, error);\n            });\n            if (this._stderrStream && this._process.stderr) {\n                this._process.stderr.pipe(this._stderrStream);\n            }\n        });\n    }\n    /**\n     * The stderr stream of the child process, if `StdioServerParameters.stderr` was set to \"pipe\" or \"overlapped\".\n     *\n     * If stderr piping was requested, a PassThrough stream is returned _immediately_, allowing callers to\n     * attach listeners before the start method is invoked. This prevents loss of any early\n     * error output emitted by the child process.\n     */\n    get stderr() {\n        var _a, _b;\n        if (this._stderrStream) {\n            return this._stderrStream;\n        }\n        return (_b = (_a = this._process) === null || _a === void 0 ? void 0 : _a.stderr) !== null && _b !== void 0 ? _b : null;\n    }\n    /**\n     * The child process pid spawned by this transport.\n     *\n     * This is only available after the transport has been started.\n     */\n    get pid() {\n        var _a, _b;\n        return (_b = (_a = this._process) === null || _a === void 0 ? void 0 : _a.pid) !== null && _b !== void 0 ? _b : null;\n    }\n    processReadBuffer() {\n        var _a, _b;\n        while (true) {\n            try {\n                const message = this._readBuffer.readMessage();\n                if (message === null) {\n                    break;\n                }\n                (_a = this.onmessage) === null || _a === void 0 ? void 0 : _a.call(this, message);\n            }\n            catch (error) {\n                (_b = this.onerror) === null || _b === void 0 ? void 0 : _b.call(this, error);\n            }\n        }\n    }\n    async close() {\n        this._abortController.abort();\n        this._process = undefined;\n        this._readBuffer.clear();\n    }\n    send(message) {\n        return new Promise((resolve) => {\n            var _a;\n            if (!((_a = this._process) === null || _a === void 0 ? void 0 : _a.stdin)) {\n                throw new Error(\"Not connected\");\n            }\n            const json = (0,_shared_stdio_js__WEBPACK_IMPORTED_MODULE_3__.serializeMessage)(message);\n            if (this._process.stdin.write(json)) {\n                resolve();\n            }\n            else {\n                this._process.stdin.once(\"drain\", resolve);\n            }\n        });\n    }\n}\nfunction isElectron() {\n    return \"type\" in node_process__WEBPACK_IMPORTED_MODULE_1__;\n}\n//# sourceMappingURL=stdio.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/stdio.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/streamableHttp.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@modelcontextprotocol/sdk/dist/esm/client/streamableHttp.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StreamableHTTPClientTransport: () => (/* binding */ StreamableHTTPClientTransport),\n/* harmony export */   StreamableHTTPError: () => (/* binding */ StreamableHTTPError)\n/* harmony export */ });\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/types.js\");\n/* harmony import */ var _auth_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./auth.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/auth.js\");\n/* harmony import */ var eventsource_parser_stream__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! eventsource-parser/stream */ \"(rsc)/./node_modules/eventsource-parser/dist/stream.js\");\n\n\n\n// Default reconnection options for StreamableHTTP connections\nconst DEFAULT_STREAMABLE_HTTP_RECONNECTION_OPTIONS = {\n    initialReconnectionDelay: 1000,\n    maxReconnectionDelay: 30000,\n    reconnectionDelayGrowFactor: 1.5,\n    maxRetries: 2,\n};\nclass StreamableHTTPError extends Error {\n    constructor(code, message) {\n        super(`Streamable HTTP error: ${message}`);\n        this.code = code;\n    }\n}\n/**\n * Client transport for Streamable HTTP: this implements the MCP Streamable HTTP transport specification.\n * It will connect to a server using HTTP POST for sending messages and HTTP GET with Server-Sent Events\n * for receiving messages.\n */\nclass StreamableHTTPClientTransport {\n    constructor(url, opts) {\n        var _a;\n        this._url = url;\n        this._resourceMetadataUrl = undefined;\n        this._requestInit = opts === null || opts === void 0 ? void 0 : opts.requestInit;\n        this._authProvider = opts === null || opts === void 0 ? void 0 : opts.authProvider;\n        this._fetch = opts === null || opts === void 0 ? void 0 : opts.fetch;\n        this._sessionId = opts === null || opts === void 0 ? void 0 : opts.sessionId;\n        this._reconnectionOptions = (_a = opts === null || opts === void 0 ? void 0 : opts.reconnectionOptions) !== null && _a !== void 0 ? _a : DEFAULT_STREAMABLE_HTTP_RECONNECTION_OPTIONS;\n    }\n    async _authThenStart() {\n        var _a;\n        if (!this._authProvider) {\n            throw new _auth_js__WEBPACK_IMPORTED_MODULE_1__.UnauthorizedError(\"No auth provider\");\n        }\n        let result;\n        try {\n            result = await (0,_auth_js__WEBPACK_IMPORTED_MODULE_1__.auth)(this._authProvider, { serverUrl: this._url, resourceMetadataUrl: this._resourceMetadataUrl, fetchFn: this._fetch });\n        }\n        catch (error) {\n            (_a = this.onerror) === null || _a === void 0 ? void 0 : _a.call(this, error);\n            throw error;\n        }\n        if (result !== \"AUTHORIZED\") {\n            throw new _auth_js__WEBPACK_IMPORTED_MODULE_1__.UnauthorizedError();\n        }\n        return await this._startOrAuthSse({ resumptionToken: undefined });\n    }\n    async _commonHeaders() {\n        var _a;\n        const headers = {};\n        if (this._authProvider) {\n            const tokens = await this._authProvider.tokens();\n            if (tokens) {\n                headers[\"Authorization\"] = `Bearer ${tokens.access_token}`;\n            }\n        }\n        if (this._sessionId) {\n            headers[\"mcp-session-id\"] = this._sessionId;\n        }\n        if (this._protocolVersion) {\n            headers[\"mcp-protocol-version\"] = this._protocolVersion;\n        }\n        const extraHeaders = this._normalizeHeaders((_a = this._requestInit) === null || _a === void 0 ? void 0 : _a.headers);\n        return new Headers({\n            ...headers,\n            ...extraHeaders,\n        });\n    }\n    async _startOrAuthSse(options) {\n        var _a, _b, _c;\n        const { resumptionToken } = options;\n        try {\n            // Try to open an initial SSE stream with GET to listen for server messages\n            // This is optional according to the spec - server may not support it\n            const headers = await this._commonHeaders();\n            headers.set(\"Accept\", \"text/event-stream\");\n            // Include Last-Event-ID header for resumable streams if provided\n            if (resumptionToken) {\n                headers.set(\"last-event-id\", resumptionToken);\n            }\n            const response = await ((_a = this._fetch) !== null && _a !== void 0 ? _a : fetch)(this._url, {\n                method: \"GET\",\n                headers,\n                signal: (_b = this._abortController) === null || _b === void 0 ? void 0 : _b.signal,\n            });\n            if (!response.ok) {\n                if (response.status === 401 && this._authProvider) {\n                    // Need to authenticate\n                    return await this._authThenStart();\n                }\n                // 405 indicates that the server does not offer an SSE stream at GET endpoint\n                // This is an expected case that should not trigger an error\n                if (response.status === 405) {\n                    return;\n                }\n                throw new StreamableHTTPError(response.status, `Failed to open SSE stream: ${response.statusText}`);\n            }\n            this._handleSseStream(response.body, options, true);\n        }\n        catch (error) {\n            (_c = this.onerror) === null || _c === void 0 ? void 0 : _c.call(this, error);\n            throw error;\n        }\n    }\n    /**\n     * Calculates the next reconnection delay using  backoff algorithm\n     *\n     * @param attempt Current reconnection attempt count for the specific stream\n     * @returns Time to wait in milliseconds before next reconnection attempt\n     */\n    _getNextReconnectionDelay(attempt) {\n        // Access default values directly, ensuring they're never undefined\n        const initialDelay = this._reconnectionOptions.initialReconnectionDelay;\n        const growFactor = this._reconnectionOptions.reconnectionDelayGrowFactor;\n        const maxDelay = this._reconnectionOptions.maxReconnectionDelay;\n        // Cap at maximum delay\n        return Math.min(initialDelay * Math.pow(growFactor, attempt), maxDelay);\n    }\n    _normalizeHeaders(headers) {\n        if (!headers)\n            return {};\n        if (headers instanceof Headers) {\n            return Object.fromEntries(headers.entries());\n        }\n        if (Array.isArray(headers)) {\n            return Object.fromEntries(headers);\n        }\n        return { ...headers };\n    }\n    /**\n     * Schedule a reconnection attempt with exponential backoff\n     *\n     * @param lastEventId The ID of the last received event for resumability\n     * @param attemptCount Current reconnection attempt count for this specific stream\n     */\n    _scheduleReconnection(options, attemptCount = 0) {\n        var _a;\n        // Use provided options or default options\n        const maxRetries = this._reconnectionOptions.maxRetries;\n        // Check if we've exceeded maximum retry attempts\n        if (maxRetries > 0 && attemptCount >= maxRetries) {\n            (_a = this.onerror) === null || _a === void 0 ? void 0 : _a.call(this, new Error(`Maximum reconnection attempts (${maxRetries}) exceeded.`));\n            return;\n        }\n        // Calculate next delay based on current attempt count\n        const delay = this._getNextReconnectionDelay(attemptCount);\n        // Schedule the reconnection\n        setTimeout(() => {\n            // Use the last event ID to resume where we left off\n            this._startOrAuthSse(options).catch(error => {\n                var _a;\n                (_a = this.onerror) === null || _a === void 0 ? void 0 : _a.call(this, new Error(`Failed to reconnect SSE stream: ${error instanceof Error ? error.message : String(error)}`));\n                // Schedule another attempt if this one failed, incrementing the attempt counter\n                this._scheduleReconnection(options, attemptCount + 1);\n            });\n        }, delay);\n    }\n    _handleSseStream(stream, options, isReconnectable) {\n        if (!stream) {\n            return;\n        }\n        const { onresumptiontoken, replayMessageId } = options;\n        let lastEventId;\n        const processStream = async () => {\n            var _a, _b, _c, _d;\n            // this is the closest we can get to trying to catch network errors\n            // if something happens reader will throw\n            try {\n                // Create a pipeline: binary stream -> text decoder -> SSE parser\n                const reader = stream\n                    .pipeThrough(new TextDecoderStream())\n                    .pipeThrough(new eventsource_parser_stream__WEBPACK_IMPORTED_MODULE_2__.EventSourceParserStream())\n                    .getReader();\n                while (true) {\n                    const { value: event, done } = await reader.read();\n                    if (done) {\n                        break;\n                    }\n                    // Update last event ID if provided\n                    if (event.id) {\n                        lastEventId = event.id;\n                        onresumptiontoken === null || onresumptiontoken === void 0 ? void 0 : onresumptiontoken(event.id);\n                    }\n                    if (!event.event || event.event === \"message\") {\n                        try {\n                            const message = _types_js__WEBPACK_IMPORTED_MODULE_0__.JSONRPCMessageSchema.parse(JSON.parse(event.data));\n                            if (replayMessageId !== undefined && (0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isJSONRPCResponse)(message)) {\n                                message.id = replayMessageId;\n                            }\n                            (_a = this.onmessage) === null || _a === void 0 ? void 0 : _a.call(this, message);\n                        }\n                        catch (error) {\n                            (_b = this.onerror) === null || _b === void 0 ? void 0 : _b.call(this, error);\n                        }\n                    }\n                }\n            }\n            catch (error) {\n                // Handle stream errors - likely a network disconnect\n                (_c = this.onerror) === null || _c === void 0 ? void 0 : _c.call(this, new Error(`SSE stream disconnected: ${error}`));\n                // Attempt to reconnect if the stream disconnects unexpectedly and we aren't closing\n                if (isReconnectable &&\n                    this._abortController &&\n                    !this._abortController.signal.aborted) {\n                    // Use the exponential backoff reconnection strategy\n                    try {\n                        this._scheduleReconnection({\n                            resumptionToken: lastEventId,\n                            onresumptiontoken,\n                            replayMessageId\n                        }, 0);\n                    }\n                    catch (error) {\n                        (_d = this.onerror) === null || _d === void 0 ? void 0 : _d.call(this, new Error(`Failed to reconnect: ${error instanceof Error ? error.message : String(error)}`));\n                    }\n                }\n            }\n        };\n        processStream();\n    }\n    async start() {\n        if (this._abortController) {\n            throw new Error(\"StreamableHTTPClientTransport already started! If using Client class, note that connect() calls start() automatically.\");\n        }\n        this._abortController = new AbortController();\n    }\n    /**\n     * Call this method after the user has finished authorizing via their user agent and is redirected back to the MCP client application. This will exchange the authorization code for an access token, enabling the next connection attempt to successfully auth.\n     */\n    async finishAuth(authorizationCode) {\n        if (!this._authProvider) {\n            throw new _auth_js__WEBPACK_IMPORTED_MODULE_1__.UnauthorizedError(\"No auth provider\");\n        }\n        const result = await (0,_auth_js__WEBPACK_IMPORTED_MODULE_1__.auth)(this._authProvider, { serverUrl: this._url, authorizationCode, resourceMetadataUrl: this._resourceMetadataUrl, fetchFn: this._fetch });\n        if (result !== \"AUTHORIZED\") {\n            throw new _auth_js__WEBPACK_IMPORTED_MODULE_1__.UnauthorizedError(\"Failed to authorize\");\n        }\n    }\n    async close() {\n        var _a, _b;\n        // Abort any pending requests\n        (_a = this._abortController) === null || _a === void 0 ? void 0 : _a.abort();\n        (_b = this.onclose) === null || _b === void 0 ? void 0 : _b.call(this);\n    }\n    async send(message, options) {\n        var _a, _b, _c, _d;\n        try {\n            const { resumptionToken, onresumptiontoken } = options || {};\n            if (resumptionToken) {\n                // If we have at last event ID, we need to reconnect the SSE stream\n                this._startOrAuthSse({ resumptionToken, replayMessageId: (0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isJSONRPCRequest)(message) ? message.id : undefined }).catch(err => { var _a; return (_a = this.onerror) === null || _a === void 0 ? void 0 : _a.call(this, err); });\n                return;\n            }\n            const headers = await this._commonHeaders();\n            headers.set(\"content-type\", \"application/json\");\n            headers.set(\"accept\", \"application/json, text/event-stream\");\n            const init = {\n                ...this._requestInit,\n                method: \"POST\",\n                headers,\n                body: JSON.stringify(message),\n                signal: (_a = this._abortController) === null || _a === void 0 ? void 0 : _a.signal,\n            };\n            const response = await ((_b = this._fetch) !== null && _b !== void 0 ? _b : fetch)(this._url, init);\n            // Handle session ID received during initialization\n            const sessionId = response.headers.get(\"mcp-session-id\");\n            if (sessionId) {\n                this._sessionId = sessionId;\n            }\n            if (!response.ok) {\n                if (response.status === 401 && this._authProvider) {\n                    this._resourceMetadataUrl = (0,_auth_js__WEBPACK_IMPORTED_MODULE_1__.extractResourceMetadataUrl)(response);\n                    const result = await (0,_auth_js__WEBPACK_IMPORTED_MODULE_1__.auth)(this._authProvider, { serverUrl: this._url, resourceMetadataUrl: this._resourceMetadataUrl, fetchFn: this._fetch });\n                    if (result !== \"AUTHORIZED\") {\n                        throw new _auth_js__WEBPACK_IMPORTED_MODULE_1__.UnauthorizedError();\n                    }\n                    // Purposely _not_ awaited, so we don't call onerror twice\n                    return this.send(message);\n                }\n                const text = await response.text().catch(() => null);\n                throw new Error(`Error POSTing to endpoint (HTTP ${response.status}): ${text}`);\n            }\n            // If the response is 202 Accepted, there's no body to process\n            if (response.status === 202) {\n                // if the accepted notification is initialized, we start the SSE stream\n                // if it's supported by the server\n                if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isInitializedNotification)(message)) {\n                    // Start without a lastEventId since this is a fresh connection\n                    this._startOrAuthSse({ resumptionToken: undefined }).catch(err => { var _a; return (_a = this.onerror) === null || _a === void 0 ? void 0 : _a.call(this, err); });\n                }\n                return;\n            }\n            // Get original message(s) for detecting request IDs\n            const messages = Array.isArray(message) ? message : [message];\n            const hasRequests = messages.filter(msg => \"method\" in msg && \"id\" in msg && msg.id !== undefined).length > 0;\n            // Check the response type\n            const contentType = response.headers.get(\"content-type\");\n            if (hasRequests) {\n                if (contentType === null || contentType === void 0 ? void 0 : contentType.includes(\"text/event-stream\")) {\n                    // Handle SSE stream responses for requests\n                    // We use the same handler as standalone streams, which now supports\n                    // reconnection with the last event ID\n                    this._handleSseStream(response.body, { onresumptiontoken }, false);\n                }\n                else if (contentType === null || contentType === void 0 ? void 0 : contentType.includes(\"application/json\")) {\n                    // For non-streaming servers, we might get direct JSON responses\n                    const data = await response.json();\n                    const responseMessages = Array.isArray(data)\n                        ? data.map(msg => _types_js__WEBPACK_IMPORTED_MODULE_0__.JSONRPCMessageSchema.parse(msg))\n                        : [_types_js__WEBPACK_IMPORTED_MODULE_0__.JSONRPCMessageSchema.parse(data)];\n                    for (const msg of responseMessages) {\n                        (_c = this.onmessage) === null || _c === void 0 ? void 0 : _c.call(this, msg);\n                    }\n                }\n                else {\n                    throw new StreamableHTTPError(-1, `Unexpected content type: ${contentType}`);\n                }\n            }\n        }\n        catch (error) {\n            (_d = this.onerror) === null || _d === void 0 ? void 0 : _d.call(this, error);\n            throw error;\n        }\n    }\n    get sessionId() {\n        return this._sessionId;\n    }\n    /**\n     * Terminates the current session by sending a DELETE request to the server.\n     *\n     * Clients that no longer need a particular session\n     * (e.g., because the user is leaving the client application) SHOULD send an\n     * HTTP DELETE to the MCP endpoint with the Mcp-Session-Id header to explicitly\n     * terminate the session.\n     *\n     * The server MAY respond with HTTP 405 Method Not Allowed, indicating that\n     * the server does not allow clients to terminate sessions.\n     */\n    async terminateSession() {\n        var _a, _b, _c;\n        if (!this._sessionId) {\n            return; // No session to terminate\n        }\n        try {\n            const headers = await this._commonHeaders();\n            const init = {\n                ...this._requestInit,\n                method: \"DELETE\",\n                headers,\n                signal: (_a = this._abortController) === null || _a === void 0 ? void 0 : _a.signal,\n            };\n            const response = await ((_b = this._fetch) !== null && _b !== void 0 ? _b : fetch)(this._url, init);\n            // We specifically handle 405 as a valid response according to the spec,\n            // meaning the server does not support explicit session termination\n            if (!response.ok && response.status !== 405) {\n                throw new StreamableHTTPError(response.status, `Failed to terminate session: ${response.statusText}`);\n            }\n            this._sessionId = undefined;\n        }\n        catch (error) {\n            (_c = this.onerror) === null || _c === void 0 ? void 0 : _c.call(this, error);\n            throw error;\n        }\n    }\n    setProtocolVersion(version) {\n        this._protocolVersion = version;\n    }\n    get protocolVersion() {\n        return this._protocolVersion;\n    }\n}\n//# sourceMappingURL=streamableHttp.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1vZGVsY29udGV4dHByb3RvY29sL3Nkay9kaXN0L2VzbS9jbGllbnQvc3RyZWFtYWJsZUh0dHAuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBbUg7QUFDbkM7QUFDWjtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQSx3Q0FBd0MsUUFBUTtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix1REFBaUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDhDQUFJLHVCQUF1Qiw0RkFBNEY7QUFDbEo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHVEQUFpQjtBQUN2QztBQUNBLDRDQUE0Qyw0QkFBNEI7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsb0JBQW9CO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isa0JBQWtCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkZBQTZGLG9CQUFvQjtBQUNqSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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eHRwcm90b2NvbC9zZGsvZGlzdC9lc20vY2xpZW50L3N0cmVhbWFibGVIdHRwLmpzP2M0YzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNJbml0aWFsaXplZE5vdGlmaWNhdGlvbiwgaXNKU09OUlBDUmVxdWVzdCwgaXNKU09OUlBDUmVzcG9uc2UsIEpTT05SUENNZXNzYWdlU2NoZW1hIH0gZnJvbSBcIi4uL3R5cGVzLmpzXCI7XG5pbXBvcnQgeyBhdXRoLCBleHRyYWN0UmVzb3VyY2VNZXRhZGF0YVVybCwgVW5hdXRob3JpemVkRXJyb3IgfSBmcm9tIFwiLi9hdXRoLmpzXCI7XG5pbXBvcnQgeyBFdmVudFNvdXJjZVBhcnNlclN0cmVhbSB9IGZyb20gXCJldmVudHNvdXJjZS1wYXJzZXIvc3RyZWFtXCI7XG4vLyBEZWZhdWx0IHJlY29ubmVjdGlvbiBvcHRpb25zIGZvciBTdHJlYW1hYmxlSFRUUCBjb25uZWN0aW9uc1xuY29uc3QgREVGQVVMVF9TVFJFQU1BQkxFX0hUVFBfUkVDT05ORUNUSU9OX09QVElPTlMgPSB7XG4gICAgaW5pdGlhbFJlY29ubmVjdGlvbkRlbGF5OiAxMDAwLFxuICAgIG1heFJlY29ubmVjdGlvbkRlbGF5OiAzMDAwMCxcbiAgICByZWNvbm5lY3Rpb25EZWxheUdyb3dGYWN0b3I6IDEuNSxcbiAgICBtYXhSZXRyaWVzOiAyLFxufTtcbmV4cG9ydCBjbGFzcyBTdHJlYW1hYmxlSFRUUEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGNvZGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIoYFN0cmVhbWFibGUgSFRUUCBlcnJvcjogJHttZXNzYWdlfWApO1xuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgIH1cbn1cbi8qKlxuICogQ2xpZW50IHRyYW5zcG9ydCBmb3IgU3RyZWFtYWJsZSBIVFRQOiB0aGlzIGltcGxlbWVudHMgdGhlIE1DUCBTdHJlYW1hYmxlIEhUVFAgdHJhbnNwb3J0IHNwZWNpZmljYXRpb24uXG4gKiBJdCB3aWxsIGNvbm5lY3QgdG8gYSBzZXJ2ZXIgdXNpbmcgSFRUUCBQT1NUIGZvciBzZW5kaW5nIG1lc3NhZ2VzIGFuZCBIVFRQIEdFVCB3aXRoIFNlcnZlci1TZW50IEV2ZW50c1xuICogZm9yIHJlY2VpdmluZyBtZXNzYWdlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFN0cmVhbWFibGVIVFRQQ2xpZW50VHJhbnNwb3J0IHtcbiAgICBjb25zdHJ1Y3Rvcih1cmwsIG9wdHMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLl91cmwgPSB1cmw7XG4gICAgICAgIHRoaXMuX3Jlc291cmNlTWV0YWRhdGFVcmwgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3JlcXVlc3RJbml0ID0gb3B0cyA9PT0gbnVsbCB8fCBvcHRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRzLnJlcXVlc3RJbml0O1xuICAgICAgICB0aGlzLl9hdXRoUHJvdmlkZXIgPSBvcHRzID09PSBudWxsIHx8IG9wdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdHMuYXV0aFByb3ZpZGVyO1xuICAgICAgICB0aGlzLl9mZXRjaCA9IG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy5mZXRjaDtcbiAgICAgICAgdGhpcy5fc2Vzc2lvbklkID0gb3B0cyA9PT0gbnVsbCB8fCBvcHRzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRzLnNlc3Npb25JZDtcbiAgICAgICAgdGhpcy5fcmVjb25uZWN0aW9uT3B0aW9ucyA9IChfYSA9IG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy5yZWNvbm5lY3Rpb25PcHRpb25zKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBERUZBVUxUX1NUUkVBTUFCTEVfSFRUUF9SRUNPTk5FQ1RJT05fT1BUSU9OUztcbiAgICB9XG4gICAgYXN5bmMgX2F1dGhUaGVuU3RhcnQoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCF0aGlzLl9hdXRoUHJvdmlkZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmF1dGhvcml6ZWRFcnJvcihcIk5vIGF1dGggcHJvdmlkZXJcIik7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGF3YWl0IGF1dGgodGhpcy5fYXV0aFByb3ZpZGVyLCB7IHNlcnZlclVybDogdGhpcy5fdXJsLCByZXNvdXJjZU1ldGFkYXRhVXJsOiB0aGlzLl9yZXNvdXJjZU1ldGFkYXRhVXJsLCBmZXRjaEZuOiB0aGlzLl9mZXRjaCB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIChfYSA9IHRoaXMub25lcnJvcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGhpcywgZXJyb3IpO1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdCAhPT0gXCJBVVRIT1JJWkVEXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBVbmF1dGhvcml6ZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9zdGFydE9yQXV0aFNzZSh7IHJlc3VtcHRpb25Ub2tlbjogdW5kZWZpbmVkIH0pO1xuICAgIH1cbiAgICBhc3luYyBfY29tbW9uSGVhZGVycygpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCBoZWFkZXJzID0ge307XG4gICAgICAgIGlmICh0aGlzLl9hdXRoUHJvdmlkZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHRva2VucyA9IGF3YWl0IHRoaXMuX2F1dGhQcm92aWRlci50b2tlbnMoKTtcbiAgICAgICAgICAgIGlmICh0b2tlbnMpIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzW1wiQXV0aG9yaXphdGlvblwiXSA9IGBCZWFyZXIgJHt0b2tlbnMuYWNjZXNzX3Rva2VufWA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3Nlc3Npb25JZCkge1xuICAgICAgICAgICAgaGVhZGVyc1tcIm1jcC1zZXNzaW9uLWlkXCJdID0gdGhpcy5fc2Vzc2lvbklkO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wcm90b2NvbFZlcnNpb24pIHtcbiAgICAgICAgICAgIGhlYWRlcnNbXCJtY3AtcHJvdG9jb2wtdmVyc2lvblwiXSA9IHRoaXMuX3Byb3RvY29sVmVyc2lvbjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBleHRyYUhlYWRlcnMgPSB0aGlzLl9ub3JtYWxpemVIZWFkZXJzKChfYSA9IHRoaXMuX3JlcXVlc3RJbml0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaGVhZGVycyk7XG4gICAgICAgIHJldHVybiBuZXcgSGVhZGVycyh7XG4gICAgICAgICAgICAuLi5oZWFkZXJzLFxuICAgICAgICAgICAgLi4uZXh0cmFIZWFkZXJzLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgX3N0YXJ0T3JBdXRoU3NlKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIGNvbnN0IHsgcmVzdW1wdGlvblRva2VuIH0gPSBvcHRpb25zO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gVHJ5IHRvIG9wZW4gYW4gaW5pdGlhbCBTU0Ugc3RyZWFtIHdpdGggR0VUIHRvIGxpc3RlbiBmb3Igc2VydmVyIG1lc3NhZ2VzXG4gICAgICAgICAgICAvLyBUaGlzIGlzIG9wdGlvbmFsIGFjY29yZGluZyB0byB0aGUgc3BlYyAtIHNlcnZlciBtYXkgbm90IHN1cHBvcnQgaXRcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlcnMgPSBhd2FpdCB0aGlzLl9jb21tb25IZWFkZXJzKCk7XG4gICAgICAgICAgICBoZWFkZXJzLnNldChcIkFjY2VwdFwiLCBcInRleHQvZXZlbnQtc3RyZWFtXCIpO1xuICAgICAgICAgICAgLy8gSW5jbHVkZSBMYXN0LUV2ZW50LUlEIGhlYWRlciBmb3IgcmVzdW1hYmxlIHN0cmVhbXMgaWYgcHJvdmlkZWRcbiAgICAgICAgICAgIGlmIChyZXN1bXB0aW9uVG9rZW4pIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzLnNldChcImxhc3QtZXZlbnQtaWRcIiwgcmVzdW1wdGlvblRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKChfYSA9IHRoaXMuX2ZldGNoKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmZXRjaCkodGhpcy5fdXJsLCB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgc2lnbmFsOiAoX2IgPSB0aGlzLl9hYm9ydENvbnRyb2xsZXIpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5zaWduYWwsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDEgJiYgdGhpcy5fYXV0aFByb3ZpZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE5lZWQgdG8gYXV0aGVudGljYXRlXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9hdXRoVGhlblN0YXJ0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIDQwNSBpbmRpY2F0ZXMgdGhhdCB0aGUgc2VydmVyIGRvZXMgbm90IG9mZmVyIGFuIFNTRSBzdHJlYW0gYXQgR0VUIGVuZHBvaW50XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhbiBleHBlY3RlZCBjYXNlIHRoYXQgc2hvdWxkIG5vdCB0cmlnZ2VyIGFuIGVycm9yXG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDA1KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFN0cmVhbWFibGVIVFRQRXJyb3IocmVzcG9uc2Uuc3RhdHVzLCBgRmFpbGVkIHRvIG9wZW4gU1NFIHN0cmVhbTogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5faGFuZGxlU3NlU3RyZWFtKHJlc3BvbnNlLmJvZHksIG9wdGlvbnMsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgKF9jID0gdGhpcy5vbmVycm9yKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBuZXh0IHJlY29ubmVjdGlvbiBkZWxheSB1c2luZyAgYmFja29mZiBhbGdvcml0aG1cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhdHRlbXB0IEN1cnJlbnQgcmVjb25uZWN0aW9uIGF0dGVtcHQgY291bnQgZm9yIHRoZSBzcGVjaWZpYyBzdHJlYW1cbiAgICAgKiBAcmV0dXJucyBUaW1lIHRvIHdhaXQgaW4gbWlsbGlzZWNvbmRzIGJlZm9yZSBuZXh0IHJlY29ubmVjdGlvbiBhdHRlbXB0XG4gICAgICovXG4gICAgX2dldE5leHRSZWNvbm5lY3Rpb25EZWxheShhdHRlbXB0KSB7XG4gICAgICAgIC8vIEFjY2VzcyBkZWZhdWx0IHZhbHVlcyBkaXJlY3RseSwgZW5zdXJpbmcgdGhleSdyZSBuZXZlciB1bmRlZmluZWRcbiAgICAgICAgY29uc3QgaW5pdGlhbERlbGF5ID0gdGhpcy5fcmVjb25uZWN0aW9uT3B0aW9ucy5pbml0aWFsUmVjb25uZWN0aW9uRGVsYXk7XG4gICAgICAgIGNvbnN0IGdyb3dGYWN0b3IgPSB0aGlzLl9yZWNvbm5lY3Rpb25PcHRpb25zLnJlY29ubmVjdGlvbkRlbGF5R3Jvd0ZhY3RvcjtcbiAgICAgICAgY29uc3QgbWF4RGVsYXkgPSB0aGlzLl9yZWNvbm5lY3Rpb25PcHRpb25zLm1heFJlY29ubmVjdGlvbkRlbGF5O1xuICAgICAgICAvLyBDYXAgYXQgbWF4aW11bSBkZWxheVxuICAgICAgICByZXR1cm4gTWF0aC5taW4oaW5pdGlhbERlbGF5ICogTWF0aC5wb3coZ3Jvd0ZhY3RvciwgYXR0ZW1wdCksIG1heERlbGF5KTtcbiAgICB9XG4gICAgX25vcm1hbGl6ZUhlYWRlcnMoaGVhZGVycykge1xuICAgICAgICBpZiAoIWhlYWRlcnMpXG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIGlmIChoZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycykge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhoZWFkZXJzLmVudHJpZXMoKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaGVhZGVycykpIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuZnJvbUVudHJpZXMoaGVhZGVycyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgLi4uaGVhZGVycyB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTY2hlZHVsZSBhIHJlY29ubmVjdGlvbiBhdHRlbXB0IHdpdGggZXhwb25lbnRpYWwgYmFja29mZlxuICAgICAqXG4gICAgICogQHBhcmFtIGxhc3RFdmVudElkIFRoZSBJRCBvZiB0aGUgbGFzdCByZWNlaXZlZCBldmVudCBmb3IgcmVzdW1hYmlsaXR5XG4gICAgICogQHBhcmFtIGF0dGVtcHRDb3VudCBDdXJyZW50IHJlY29ubmVjdGlvbiBhdHRlbXB0IGNvdW50IGZvciB0aGlzIHNwZWNpZmljIHN0cmVhbVxuICAgICAqL1xuICAgIF9zY2hlZHVsZVJlY29ubmVjdGlvbihvcHRpb25zLCBhdHRlbXB0Q291bnQgPSAwKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgLy8gVXNlIHByb3ZpZGVkIG9wdGlvbnMgb3IgZGVmYXVsdCBvcHRpb25zXG4gICAgICAgIGNvbnN0IG1heFJldHJpZXMgPSB0aGlzLl9yZWNvbm5lY3Rpb25PcHRpb25zLm1heFJldHJpZXM7XG4gICAgICAgIC8vIENoZWNrIGlmIHdlJ3ZlIGV4Y2VlZGVkIG1heGltdW0gcmV0cnkgYXR0ZW1wdHNcbiAgICAgICAgaWYgKG1heFJldHJpZXMgPiAwICYmIGF0dGVtcHRDb3VudCA+PSBtYXhSZXRyaWVzKSB7XG4gICAgICAgICAgICAoX2EgPSB0aGlzLm9uZXJyb3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMsIG5ldyBFcnJvcihgTWF4aW11bSByZWNvbm5lY3Rpb24gYXR0ZW1wdHMgKCR7bWF4UmV0cmllc30pIGV4Y2VlZGVkLmApKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBDYWxjdWxhdGUgbmV4dCBkZWxheSBiYXNlZCBvbiBjdXJyZW50IGF0dGVtcHQgY291bnRcbiAgICAgICAgY29uc3QgZGVsYXkgPSB0aGlzLl9nZXROZXh0UmVjb25uZWN0aW9uRGVsYXkoYXR0ZW1wdENvdW50KTtcbiAgICAgICAgLy8gU2NoZWR1bGUgdGhlIHJlY29ubmVjdGlvblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIC8vIFVzZSB0aGUgbGFzdCBldmVudCBJRCB0byByZXN1bWUgd2hlcmUgd2UgbGVmdCBvZmZcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0T3JBdXRoU3NlKG9wdGlvbnMpLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgKF9hID0gdGhpcy5vbmVycm9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0aGlzLCBuZXcgRXJyb3IoYEZhaWxlZCB0byByZWNvbm5lY3QgU1NFIHN0cmVhbTogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IFN0cmluZyhlcnJvcil9YCkpO1xuICAgICAgICAgICAgICAgIC8vIFNjaGVkdWxlIGFub3RoZXIgYXR0ZW1wdCBpZiB0aGlzIG9uZSBmYWlsZWQsIGluY3JlbWVudGluZyB0aGUgYXR0ZW1wdCBjb3VudGVyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2NoZWR1bGVSZWNvbm5lY3Rpb24ob3B0aW9ucywgYXR0ZW1wdENvdW50ICsgMSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZGVsYXkpO1xuICAgIH1cbiAgICBfaGFuZGxlU3NlU3RyZWFtKHN0cmVhbSwgb3B0aW9ucywgaXNSZWNvbm5lY3RhYmxlKSB7XG4gICAgICAgIGlmICghc3RyZWFtKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBvbnJlc3VtcHRpb250b2tlbiwgcmVwbGF5TWVzc2FnZUlkIH0gPSBvcHRpb25zO1xuICAgICAgICBsZXQgbGFzdEV2ZW50SWQ7XG4gICAgICAgIGNvbnN0IHByb2Nlc3NTdHJlYW0gPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIHRoZSBjbG9zZXN0IHdlIGNhbiBnZXQgdG8gdHJ5aW5nIHRvIGNhdGNoIG5ldHdvcmsgZXJyb3JzXG4gICAgICAgICAgICAvLyBpZiBzb21ldGhpbmcgaGFwcGVucyByZWFkZXIgd2lsbCB0aHJvd1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBwaXBlbGluZTogYmluYXJ5IHN0cmVhbSAtPiB0ZXh0IGRlY29kZXIgLT4gU1NFIHBhcnNlclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlYWRlciA9IHN0cmVhbVxuICAgICAgICAgICAgICAgICAgICAucGlwZVRocm91Z2gobmV3IFRleHREZWNvZGVyU3RyZWFtKCkpXG4gICAgICAgICAgICAgICAgICAgIC5waXBlVGhyb3VnaChuZXcgRXZlbnRTb3VyY2VQYXJzZXJTdHJlYW0oKSlcbiAgICAgICAgICAgICAgICAgICAgLmdldFJlYWRlcigpO1xuICAgICAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgdmFsdWU6IGV2ZW50LCBkb25lIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIGxhc3QgZXZlbnQgSUQgaWYgcHJvdmlkZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LmlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0RXZlbnRJZCA9IGV2ZW50LmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgb25yZXN1bXB0aW9udG9rZW4gPT09IG51bGwgfHwgb25yZXN1bXB0aW9udG9rZW4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9ucmVzdW1wdGlvbnRva2VuKGV2ZW50LmlkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIWV2ZW50LmV2ZW50IHx8IGV2ZW50LmV2ZW50ID09PSBcIm1lc3NhZ2VcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gSlNPTlJQQ01lc3NhZ2VTY2hlbWEucGFyc2UoSlNPTi5wYXJzZShldmVudC5kYXRhKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcGxheU1lc3NhZ2VJZCAhPT0gdW5kZWZpbmVkICYmIGlzSlNPTlJQQ1Jlc3BvbnNlKG1lc3NhZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaWQgPSByZXBsYXlNZXNzYWdlSWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfYSA9IHRoaXMub25tZXNzYWdlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0aGlzLCBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChfYiA9IHRoaXMub25lcnJvcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwodGhpcywgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgLy8gSGFuZGxlIHN0cmVhbSBlcnJvcnMgLSBsaWtlbHkgYSBuZXR3b3JrIGRpc2Nvbm5lY3RcbiAgICAgICAgICAgICAgICAoX2MgPSB0aGlzLm9uZXJyb3IpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5jYWxsKHRoaXMsIG5ldyBFcnJvcihgU1NFIHN0cmVhbSBkaXNjb25uZWN0ZWQ6ICR7ZXJyb3J9YCkpO1xuICAgICAgICAgICAgICAgIC8vIEF0dGVtcHQgdG8gcmVjb25uZWN0IGlmIHRoZSBzdHJlYW0gZGlzY29ubmVjdHMgdW5leHBlY3RlZGx5IGFuZCB3ZSBhcmVuJ3QgY2xvc2luZ1xuICAgICAgICAgICAgICAgIGlmIChpc1JlY29ubmVjdGFibGUgJiZcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWJvcnRDb250cm9sbGVyICYmXG4gICAgICAgICAgICAgICAgICAgICF0aGlzLl9hYm9ydENvbnRyb2xsZXIuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVXNlIHRoZSBleHBvbmVudGlhbCBiYWNrb2ZmIHJlY29ubmVjdGlvbiBzdHJhdGVneVxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2NoZWR1bGVSZWNvbm5lY3Rpb24oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VtcHRpb25Ub2tlbjogbGFzdEV2ZW50SWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25yZXN1bXB0aW9udG9rZW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGF5TWVzc2FnZUlkXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIChfZCA9IHRoaXMub25lcnJvcikgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLmNhbGwodGhpcywgbmV3IEVycm9yKGBGYWlsZWQgdG8gcmVjb25uZWN0OiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogU3RyaW5nKGVycm9yKX1gKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHByb2Nlc3NTdHJlYW0oKTtcbiAgICB9XG4gICAgYXN5bmMgc3RhcnQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9hYm9ydENvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlN0cmVhbWFibGVIVFRQQ2xpZW50VHJhbnNwb3J0IGFscmVhZHkgc3RhcnRlZCEgSWYgdXNpbmcgQ2xpZW50IGNsYXNzLCBub3RlIHRoYXQgY29ubmVjdCgpIGNhbGxzIHN0YXJ0KCkgYXV0b21hdGljYWxseS5cIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsIHRoaXMgbWV0aG9kIGFmdGVyIHRoZSB1c2VyIGhhcyBmaW5pc2hlZCBhdXRob3JpemluZyB2aWEgdGhlaXIgdXNlciBhZ2VudCBhbmQgaXMgcmVkaXJlY3RlZCBiYWNrIHRvIHRoZSBNQ1AgY2xpZW50IGFwcGxpY2F0aW9uLiBUaGlzIHdpbGwgZXhjaGFuZ2UgdGhlIGF1dGhvcml6YXRpb24gY29kZSBmb3IgYW4gYWNjZXNzIHRva2VuLCBlbmFibGluZyB0aGUgbmV4dCBjb25uZWN0aW9uIGF0dGVtcHQgdG8gc3VjY2Vzc2Z1bGx5IGF1dGguXG4gICAgICovXG4gICAgYXN5bmMgZmluaXNoQXV0aChhdXRob3JpemF0aW9uQ29kZSkge1xuICAgICAgICBpZiAoIXRoaXMuX2F1dGhQcm92aWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFVuYXV0aG9yaXplZEVycm9yKFwiTm8gYXV0aCBwcm92aWRlclwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhdXRoKHRoaXMuX2F1dGhQcm92aWRlciwgeyBzZXJ2ZXJVcmw6IHRoaXMuX3VybCwgYXV0aG9yaXphdGlvbkNvZGUsIHJlc291cmNlTWV0YWRhdGFVcmw6IHRoaXMuX3Jlc291cmNlTWV0YWRhdGFVcmwsIGZldGNoRm46IHRoaXMuX2ZldGNoIH0pO1xuICAgICAgICBpZiAocmVzdWx0ICE9PSBcIkFVVEhPUklaRURcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFVuYXV0aG9yaXplZEVycm9yKFwiRmFpbGVkIHRvIGF1dGhvcml6ZVwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBjbG9zZSgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgLy8gQWJvcnQgYW55IHBlbmRpbmcgcmVxdWVzdHNcbiAgICAgICAgKF9hID0gdGhpcy5fYWJvcnRDb250cm9sbGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYWJvcnQoKTtcbiAgICAgICAgKF9iID0gdGhpcy5vbmNsb3NlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbCh0aGlzKTtcbiAgICB9XG4gICAgYXN5bmMgc2VuZChtZXNzYWdlLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHsgcmVzdW1wdGlvblRva2VuLCBvbnJlc3VtcHRpb250b2tlbiB9ID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgICAgIGlmIChyZXN1bXB0aW9uVG9rZW4pIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGF0IGxhc3QgZXZlbnQgSUQsIHdlIG5lZWQgdG8gcmVjb25uZWN0IHRoZSBTU0Ugc3RyZWFtXG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhcnRPckF1dGhTc2UoeyByZXN1bXB0aW9uVG9rZW4sIHJlcGxheU1lc3NhZ2VJZDogaXNKU09OUlBDUmVxdWVzdChtZXNzYWdlKSA/IG1lc3NhZ2UuaWQgOiB1bmRlZmluZWQgfSkuY2F0Y2goZXJyID0+IHsgdmFyIF9hOyByZXR1cm4gKF9hID0gdGhpcy5vbmVycm9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0aGlzLCBlcnIpOyB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBoZWFkZXJzID0gYXdhaXQgdGhpcy5fY29tbW9uSGVhZGVycygpO1xuICAgICAgICAgICAgaGVhZGVycy5zZXQoXCJjb250ZW50LXR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICAgICAgICAgICAgaGVhZGVycy5zZXQoXCJhY2NlcHRcIiwgXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2V2ZW50LXN0cmVhbVwiKTtcbiAgICAgICAgICAgIGNvbnN0IGluaXQgPSB7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5fcmVxdWVzdEluaXQsXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpLFxuICAgICAgICAgICAgICAgIHNpZ25hbDogKF9hID0gdGhpcy5fYWJvcnRDb250cm9sbGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2lnbmFsLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgKChfYiA9IHRoaXMuX2ZldGNoKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBmZXRjaCkodGhpcy5fdXJsLCBpbml0KTtcbiAgICAgICAgICAgIC8vIEhhbmRsZSBzZXNzaW9uIElEIHJlY2VpdmVkIGR1cmluZyBpbml0aWFsaXphdGlvblxuICAgICAgICAgICAgY29uc3Qgc2Vzc2lvbklkID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoXCJtY3Atc2Vzc2lvbi1pZFwiKTtcbiAgICAgICAgICAgIGlmIChzZXNzaW9uSWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXNzaW9uSWQgPSBzZXNzaW9uSWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAxICYmIHRoaXMuX2F1dGhQcm92aWRlcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXNvdXJjZU1ldGFkYXRhVXJsID0gZXh0cmFjdFJlc291cmNlTWV0YWRhdGFVcmwocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhdXRoKHRoaXMuX2F1dGhQcm92aWRlciwgeyBzZXJ2ZXJVcmw6IHRoaXMuX3VybCwgcmVzb3VyY2VNZXRhZGF0YVVybDogdGhpcy5fcmVzb3VyY2VNZXRhZGF0YVVybCwgZmV0Y2hGbjogdGhpcy5fZmV0Y2ggfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgIT09IFwiQVVUSE9SSVpFRFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5hdXRob3JpemVkRXJyb3IoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBQdXJwb3NlbHkgX25vdF8gYXdhaXRlZCwgc28gd2UgZG9uJ3QgY2FsbCBvbmVycm9yIHR3aWNlXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbmQobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCkuY2F0Y2goKCkgPT4gbnVsbCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFcnJvciBQT1NUaW5nIHRvIGVuZHBvaW50IChIVFRQICR7cmVzcG9uc2Uuc3RhdHVzfSk6ICR7dGV4dH1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIHRoZSByZXNwb25zZSBpcyAyMDIgQWNjZXB0ZWQsIHRoZXJlJ3Mgbm8gYm9keSB0byBwcm9jZXNzXG4gICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDIpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgYWNjZXB0ZWQgbm90aWZpY2F0aW9uIGlzIGluaXRpYWxpemVkLCB3ZSBzdGFydCB0aGUgU1NFIHN0cmVhbVxuICAgICAgICAgICAgICAgIC8vIGlmIGl0J3Mgc3VwcG9ydGVkIGJ5IHRoZSBzZXJ2ZXJcbiAgICAgICAgICAgICAgICBpZiAoaXNJbml0aWFsaXplZE5vdGlmaWNhdGlvbihtZXNzYWdlKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTdGFydCB3aXRob3V0IGEgbGFzdEV2ZW50SWQgc2luY2UgdGhpcyBpcyBhIGZyZXNoIGNvbm5lY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RhcnRPckF1dGhTc2UoeyByZXN1bXB0aW9uVG9rZW46IHVuZGVmaW5lZCB9KS5jYXRjaChlcnIgPT4geyB2YXIgX2E7IHJldHVybiAoX2EgPSB0aGlzLm9uZXJyb3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMsIGVycik7IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBHZXQgb3JpZ2luYWwgbWVzc2FnZShzKSBmb3IgZGV0ZWN0aW5nIHJlcXVlc3QgSURzXG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlcyA9IEFycmF5LmlzQXJyYXkobWVzc2FnZSkgPyBtZXNzYWdlIDogW21lc3NhZ2VdO1xuICAgICAgICAgICAgY29uc3QgaGFzUmVxdWVzdHMgPSBtZXNzYWdlcy5maWx0ZXIobXNnID0+IFwibWV0aG9kXCIgaW4gbXNnICYmIFwiaWRcIiBpbiBtc2cgJiYgbXNnLmlkICE9PSB1bmRlZmluZWQpLmxlbmd0aCA+IDA7XG4gICAgICAgICAgICAvLyBDaGVjayB0aGUgcmVzcG9uc2UgdHlwZVxuICAgICAgICAgICAgY29uc3QgY29udGVudFR5cGUgPSByZXNwb25zZS5oZWFkZXJzLmdldChcImNvbnRlbnQtdHlwZVwiKTtcbiAgICAgICAgICAgIGlmIChoYXNSZXF1ZXN0cykge1xuICAgICAgICAgICAgICAgIGlmIChjb250ZW50VHlwZSA9PT0gbnVsbCB8fCBjb250ZW50VHlwZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29udGVudFR5cGUuaW5jbHVkZXMoXCJ0ZXh0L2V2ZW50LXN0cmVhbVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgU1NFIHN0cmVhbSByZXNwb25zZXMgZm9yIHJlcXVlc3RzXG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIHVzZSB0aGUgc2FtZSBoYW5kbGVyIGFzIHN0YW5kYWxvbmUgc3RyZWFtcywgd2hpY2ggbm93IHN1cHBvcnRzXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlY29ubmVjdGlvbiB3aXRoIHRoZSBsYXN0IGV2ZW50IElEXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZVNzZVN0cmVhbShyZXNwb25zZS5ib2R5LCB7IG9ucmVzdW1wdGlvbnRva2VuIH0sIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY29udGVudFR5cGUgPT09IG51bGwgfHwgY29udGVudFR5cGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbnRlbnRUeXBlLmluY2x1ZGVzKFwiYXBwbGljYXRpb24vanNvblwiKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBGb3Igbm9uLXN0cmVhbWluZyBzZXJ2ZXJzLCB3ZSBtaWdodCBnZXQgZGlyZWN0IEpTT04gcmVzcG9uc2VzXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlTWVzc2FnZXMgPSBBcnJheS5pc0FycmF5KGRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGRhdGEubWFwKG1zZyA9PiBKU09OUlBDTWVzc2FnZVNjaGVtYS5wYXJzZShtc2cpKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBbSlNPTlJQQ01lc3NhZ2VTY2hlbWEucGFyc2UoZGF0YSldO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG1zZyBvZiByZXNwb25zZU1lc3NhZ2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoX2MgPSB0aGlzLm9ubWVzc2FnZSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmNhbGwodGhpcywgbXNnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFN0cmVhbWFibGVIVFRQRXJyb3IoLTEsIGBVbmV4cGVjdGVkIGNvbnRlbnQgdHlwZTogJHtjb250ZW50VHlwZX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAoX2QgPSB0aGlzLm9uZXJyb3IpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5jYWxsKHRoaXMsIGVycm9yKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBzZXNzaW9uSWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXNzaW9uSWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRlcm1pbmF0ZXMgdGhlIGN1cnJlbnQgc2Vzc2lvbiBieSBzZW5kaW5nIGEgREVMRVRFIHJlcXVlc3QgdG8gdGhlIHNlcnZlci5cbiAgICAgKlxuICAgICAqIENsaWVudHMgdGhhdCBubyBsb25nZXIgbmVlZCBhIHBhcnRpY3VsYXIgc2Vzc2lvblxuICAgICAqIChlLmcuLCBiZWNhdXNlIHRoZSB1c2VyIGlzIGxlYXZpbmcgdGhlIGNsaWVudCBhcHBsaWNhdGlvbikgU0hPVUxEIHNlbmQgYW5cbiAgICAgKiBIVFRQIERFTEVURSB0byB0aGUgTUNQIGVuZHBvaW50IHdpdGggdGhlIE1jcC1TZXNzaW9uLUlkIGhlYWRlciB0byBleHBsaWNpdGx5XG4gICAgICogdGVybWluYXRlIHRoZSBzZXNzaW9uLlxuICAgICAqXG4gICAgICogVGhlIHNlcnZlciBNQVkgcmVzcG9uZCB3aXRoIEhUVFAgNDA1IE1ldGhvZCBOb3QgQWxsb3dlZCwgaW5kaWNhdGluZyB0aGF0XG4gICAgICogdGhlIHNlcnZlciBkb2VzIG5vdCBhbGxvdyBjbGllbnRzIHRvIHRlcm1pbmF0ZSBzZXNzaW9ucy5cbiAgICAgKi9cbiAgICBhc3luYyB0ZXJtaW5hdGVTZXNzaW9uKCkge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgaWYgKCF0aGlzLl9zZXNzaW9uSWQpIHtcbiAgICAgICAgICAgIHJldHVybjsgLy8gTm8gc2Vzc2lvbiB0byB0ZXJtaW5hdGVcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgaGVhZGVycyA9IGF3YWl0IHRoaXMuX2NvbW1vbkhlYWRlcnMoKTtcbiAgICAgICAgICAgIGNvbnN0IGluaXQgPSB7XG4gICAgICAgICAgICAgICAgLi4udGhpcy5fcmVxdWVzdEluaXQsXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgICAgICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgICAgICAgICAgc2lnbmFsOiAoX2EgPSB0aGlzLl9hYm9ydENvbnRyb2xsZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zaWduYWwsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoKF9iID0gdGhpcy5fZmV0Y2gpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGZldGNoKSh0aGlzLl91cmwsIGluaXQpO1xuICAgICAgICAgICAgLy8gV2Ugc3BlY2lmaWNhbGx5IGhhbmRsZSA0MDUgYXMgYSB2YWxpZCByZXNwb25zZSBhY2NvcmRpbmcgdG8gdGhlIHNwZWMsXG4gICAgICAgICAgICAvLyBtZWFuaW5nIHRoZSBzZXJ2ZXIgZG9lcyBub3Qgc3VwcG9ydCBleHBsaWNpdCBzZXNzaW9uIHRlcm1pbmF0aW9uXG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rICYmIHJlc3BvbnNlLnN0YXR1cyAhPT0gNDA1KSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFN0cmVhbWFibGVIVFRQRXJyb3IocmVzcG9uc2Uuc3RhdHVzLCBgRmFpbGVkIHRvIHRlcm1pbmF0ZSBzZXNzaW9uOiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9zZXNzaW9uSWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAoX2MgPSB0aGlzLm9uZXJyb3IpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5jYWxsKHRoaXMsIGVycm9yKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldFByb3RvY29sVmVyc2lvbih2ZXJzaW9uKSB7XG4gICAgICAgIHRoaXMuX3Byb3RvY29sVmVyc2lvbiA9IHZlcnNpb247XG4gICAgfVxuICAgIGdldCBwcm90b2NvbFZlcnNpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm90b2NvbFZlcnNpb247XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyZWFtYWJsZUh0dHAuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/streamableHttp.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/websocket.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@modelcontextprotocol/sdk/dist/esm/client/websocket.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebSocketClientTransport: () => (/* binding */ WebSocketClientTransport)\n/* harmony export */ });\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/types.js\");\n\nconst SUBPROTOCOL = \"mcp\";\n/**\n * Client transport for WebSocket: this will connect to a server over the WebSocket protocol.\n */\nclass WebSocketClientTransport {\n    constructor(url) {\n        this._url = url;\n    }\n    start() {\n        if (this._socket) {\n            throw new Error(\"WebSocketClientTransport already started! If using Client class, note that connect() calls start() automatically.\");\n        }\n        return new Promise((resolve, reject) => {\n            this._socket = new WebSocket(this._url, SUBPROTOCOL);\n            this._socket.onerror = (event) => {\n                var _a;\n                const error = \"error\" in event\n                    ? event.error\n                    : new Error(`WebSocket error: ${JSON.stringify(event)}`);\n                reject(error);\n                (_a = this.onerror) === null || _a === void 0 ? void 0 : _a.call(this, error);\n            };\n            this._socket.onopen = () => {\n                resolve();\n            };\n            this._socket.onclose = () => {\n                var _a;\n                (_a = this.onclose) === null || _a === void 0 ? void 0 : _a.call(this);\n            };\n            this._socket.onmessage = (event) => {\n                var _a, _b;\n                let message;\n                try {\n                    message = _types_js__WEBPACK_IMPORTED_MODULE_0__.JSONRPCMessageSchema.parse(JSON.parse(event.data));\n                }\n                catch (error) {\n                    (_a = this.onerror) === null || _a === void 0 ? void 0 : _a.call(this, error);\n                    return;\n                }\n                (_b = this.onmessage) === null || _b === void 0 ? void 0 : _b.call(this, message);\n            };\n        });\n    }\n    async close() {\n        var _a;\n        (_a = this._socket) === null || _a === void 0 ? void 0 : _a.close();\n    }\n    send(message) {\n        return new Promise((resolve, reject) => {\n            var _a;\n            if (!this._socket) {\n                reject(new Error(\"Not connected\"));\n                return;\n            }\n            (_a = this._socket) === null || _a === void 0 ? void 0 : _a.send(JSON.stringify(message));\n            resolve();\n        });\n    }\n}\n//# sourceMappingURL=websocket.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1vZGVsY29udGV4dHByb3RvY29sL3Nkay9kaXN0L2VzbS9jbGllbnQvd2Vic29ja2V0LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW1EO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxzQkFBc0I7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QiwyREFBb0I7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aXZlLXZpYmUtYWktbmV4dC8uL25vZGVfbW9kdWxlcy9AbW9kZWxjb250ZXh0cHJvdG9jb2wvc2RrL2Rpc3QvZXNtL2NsaWVudC93ZWJzb2NrZXQuanM/YzMzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBKU09OUlBDTWVzc2FnZVNjaGVtYSB9IGZyb20gXCIuLi90eXBlcy5qc1wiO1xuY29uc3QgU1VCUFJPVE9DT0wgPSBcIm1jcFwiO1xuLyoqXG4gKiBDbGllbnQgdHJhbnNwb3J0IGZvciBXZWJTb2NrZXQ6IHRoaXMgd2lsbCBjb25uZWN0IHRvIGEgc2VydmVyIG92ZXIgdGhlIFdlYlNvY2tldCBwcm90b2NvbC5cbiAqL1xuZXhwb3J0IGNsYXNzIFdlYlNvY2tldENsaWVudFRyYW5zcG9ydCB7XG4gICAgY29uc3RydWN0b3IodXJsKSB7XG4gICAgICAgIHRoaXMuX3VybCA9IHVybDtcbiAgICB9XG4gICAgc3RhcnQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9zb2NrZXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIldlYlNvY2tldENsaWVudFRyYW5zcG9ydCBhbHJlYWR5IHN0YXJ0ZWQhIElmIHVzaW5nIENsaWVudCBjbGFzcywgbm90ZSB0aGF0IGNvbm5lY3QoKSBjYWxscyBzdGFydCgpIGF1dG9tYXRpY2FsbHkuXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9zb2NrZXQgPSBuZXcgV2ViU29ja2V0KHRoaXMuX3VybCwgU1VCUFJPVE9DT0wpO1xuICAgICAgICAgICAgdGhpcy5fc29ja2V0Lm9uZXJyb3IgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBcImVycm9yXCIgaW4gZXZlbnRcbiAgICAgICAgICAgICAgICAgICAgPyBldmVudC5lcnJvclxuICAgICAgICAgICAgICAgICAgICA6IG5ldyBFcnJvcihgV2ViU29ja2V0IGVycm9yOiAke0pTT04uc3RyaW5naWZ5KGV2ZW50KX1gKTtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIChfYSA9IHRoaXMub25lcnJvcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGhpcywgZXJyb3IpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuX3NvY2tldC5vbm9wZW4gPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuX3NvY2tldC5vbmNsb3NlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICAoX2EgPSB0aGlzLm9uY2xvc2UpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuX3NvY2tldC5vbm1lc3NhZ2UgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgICAgIGxldCBtZXNzYWdlO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBKU09OUlBDTWVzc2FnZVNjaGVtYS5wYXJzZShKU09OLnBhcnNlKGV2ZW50LmRhdGEpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIChfYSA9IHRoaXMub25lcnJvcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGhpcywgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIChfYiA9IHRoaXMub25tZXNzYWdlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbCh0aGlzLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBjbG9zZSgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSB0aGlzLl9zb2NrZXQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jbG9zZSgpO1xuICAgIH1cbiAgICBzZW5kKG1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGlmICghdGhpcy5fc29ja2V0KSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIk5vdCBjb25uZWN0ZWRcIikpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIChfYSA9IHRoaXMuX3NvY2tldCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNlbmQoSlNPTi5zdHJpbmdpZnkobWVzc2FnZSkpO1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD13ZWJzb2NrZXQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/client/websocket.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/server/auth/errors.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@modelcontextprotocol/sdk/dist/esm/server/auth/errors.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessDeniedError: () => (/* binding */ AccessDeniedError),\n/* harmony export */   CustomOAuthError: () => (/* binding */ CustomOAuthError),\n/* harmony export */   InsufficientScopeError: () => (/* binding */ InsufficientScopeError),\n/* harmony export */   InvalidClientError: () => (/* binding */ InvalidClientError),\n/* harmony export */   InvalidClientMetadataError: () => (/* binding */ InvalidClientMetadataError),\n/* harmony export */   InvalidGrantError: () => (/* binding */ InvalidGrantError),\n/* harmony export */   InvalidRequestError: () => (/* binding */ InvalidRequestError),\n/* harmony export */   InvalidScopeError: () => (/* binding */ InvalidScopeError),\n/* harmony export */   InvalidTokenError: () => (/* binding */ InvalidTokenError),\n/* harmony export */   MethodNotAllowedError: () => (/* binding */ MethodNotAllowedError),\n/* harmony export */   OAUTH_ERRORS: () => (/* binding */ OAUTH_ERRORS),\n/* harmony export */   OAuthError: () => (/* binding */ OAuthError),\n/* harmony export */   ServerError: () => (/* binding */ ServerError),\n/* harmony export */   TemporarilyUnavailableError: () => (/* binding */ TemporarilyUnavailableError),\n/* harmony export */   TooManyRequestsError: () => (/* binding */ TooManyRequestsError),\n/* harmony export */   UnauthorizedClientError: () => (/* binding */ UnauthorizedClientError),\n/* harmony export */   UnsupportedGrantTypeError: () => (/* binding */ UnsupportedGrantTypeError),\n/* harmony export */   UnsupportedResponseTypeError: () => (/* binding */ UnsupportedResponseTypeError),\n/* harmony export */   UnsupportedTokenTypeError: () => (/* binding */ UnsupportedTokenTypeError)\n/* harmony export */ });\n/**\n * Base class for all OAuth errors\n */\nclass OAuthError extends Error {\n    constructor(message, errorUri) {\n        super(message);\n        this.errorUri = errorUri;\n        this.name = this.constructor.name;\n    }\n    /**\n     * Converts the error to a standard OAuth error response object\n     */\n    toResponseObject() {\n        const response = {\n            error: this.errorCode,\n            error_description: this.message\n        };\n        if (this.errorUri) {\n            response.error_uri = this.errorUri;\n        }\n        return response;\n    }\n    get errorCode() {\n        return this.constructor.errorCode;\n    }\n}\n/**\n * Invalid request error - The request is missing a required parameter,\n * includes an invalid parameter value, includes a parameter more than once,\n * or is otherwise malformed.\n */\nclass InvalidRequestError extends OAuthError {\n}\nInvalidRequestError.errorCode = \"invalid_request\";\n/**\n * Invalid client error - Client authentication failed (e.g., unknown client, no client\n * authentication included, or unsupported authentication method).\n */\nclass InvalidClientError extends OAuthError {\n}\nInvalidClientError.errorCode = \"invalid_client\";\n/**\n * Invalid grant error - The provided authorization grant or refresh token is\n * invalid, expired, revoked, does not match the redirection URI used in the\n * authorization request, or was issued to another client.\n */\nclass InvalidGrantError extends OAuthError {\n}\nInvalidGrantError.errorCode = \"invalid_grant\";\n/**\n * Unauthorized client error - The authenticated client is not authorized to use\n * this authorization grant type.\n */\nclass UnauthorizedClientError extends OAuthError {\n}\nUnauthorizedClientError.errorCode = \"unauthorized_client\";\n/**\n * Unsupported grant type error - The authorization grant type is not supported\n * by the authorization server.\n */\nclass UnsupportedGrantTypeError extends OAuthError {\n}\nUnsupportedGrantTypeError.errorCode = \"unsupported_grant_type\";\n/**\n * Invalid scope error - The requested scope is invalid, unknown, malformed, or\n * exceeds the scope granted by the resource owner.\n */\nclass InvalidScopeError extends OAuthError {\n}\nInvalidScopeError.errorCode = \"invalid_scope\";\n/**\n * Access denied error - The resource owner or authorization server denied the request.\n */\nclass AccessDeniedError extends OAuthError {\n}\nAccessDeniedError.errorCode = \"access_denied\";\n/**\n * Server error - The authorization server encountered an unexpected condition\n * that prevented it from fulfilling the request.\n */\nclass ServerError extends OAuthError {\n}\nServerError.errorCode = \"server_error\";\n/**\n * Temporarily unavailable error - The authorization server is currently unable to\n * handle the request due to a temporary overloading or maintenance of the server.\n */\nclass TemporarilyUnavailableError extends OAuthError {\n}\nTemporarilyUnavailableError.errorCode = \"temporarily_unavailable\";\n/**\n * Unsupported response type error - The authorization server does not support\n * obtaining an authorization code using this method.\n */\nclass UnsupportedResponseTypeError extends OAuthError {\n}\nUnsupportedResponseTypeError.errorCode = \"unsupported_response_type\";\n/**\n * Unsupported token type error - The authorization server does not support\n * the requested token type.\n */\nclass UnsupportedTokenTypeError extends OAuthError {\n}\nUnsupportedTokenTypeError.errorCode = \"unsupported_token_type\";\n/**\n * Invalid token error - The access token provided is expired, revoked, malformed,\n * or invalid for other reasons.\n */\nclass InvalidTokenError extends OAuthError {\n}\nInvalidTokenError.errorCode = \"invalid_token\";\n/**\n * Method not allowed error - The HTTP method used is not allowed for this endpoint.\n * (Custom, non-standard error)\n */\nclass MethodNotAllowedError extends OAuthError {\n}\nMethodNotAllowedError.errorCode = \"method_not_allowed\";\n/**\n * Too many requests error - Rate limit exceeded.\n * (Custom, non-standard error based on RFC 6585)\n */\nclass TooManyRequestsError extends OAuthError {\n}\nTooManyRequestsError.errorCode = \"too_many_requests\";\n/**\n * Invalid client metadata error - The client metadata is invalid.\n * (Custom error for dynamic client registration - RFC 7591)\n */\nclass InvalidClientMetadataError extends OAuthError {\n}\nInvalidClientMetadataError.errorCode = \"invalid_client_metadata\";\n/**\n * Insufficient scope error - The request requires higher privileges than provided by the access token.\n */\nclass InsufficientScopeError extends OAuthError {\n}\nInsufficientScopeError.errorCode = \"insufficient_scope\";\n/**\n * A utility class for defining one-off error codes\n */\nclass CustomOAuthError extends OAuthError {\n    constructor(customErrorCode, message, errorUri) {\n        super(message, errorUri);\n        this.customErrorCode = customErrorCode;\n    }\n    get errorCode() {\n        return this.customErrorCode;\n    }\n}\n/**\n * A full list of all OAuthErrors, enabling parsing from error responses\n */\nconst OAUTH_ERRORS = {\n    [InvalidRequestError.errorCode]: InvalidRequestError,\n    [InvalidClientError.errorCode]: InvalidClientError,\n    [InvalidGrantError.errorCode]: InvalidGrantError,\n    [UnauthorizedClientError.errorCode]: UnauthorizedClientError,\n    [UnsupportedGrantTypeError.errorCode]: UnsupportedGrantTypeError,\n    [InvalidScopeError.errorCode]: InvalidScopeError,\n    [AccessDeniedError.errorCode]: AccessDeniedError,\n    [ServerError.errorCode]: ServerError,\n    [TemporarilyUnavailableError.errorCode]: TemporarilyUnavailableError,\n    [UnsupportedResponseTypeError.errorCode]: UnsupportedResponseTypeError,\n    [UnsupportedTokenTypeError.errorCode]: UnsupportedTokenTypeError,\n    [InvalidTokenError.errorCode]: InvalidTokenError,\n    [MethodNotAllowedError.errorCode]: MethodNotAllowedError,\n    [TooManyRequestsError.errorCode]: TooManyRequestsError,\n    [InvalidClientMetadataError.errorCode]: InvalidClientMetadataError,\n    [InsufficientScopeError.errorCode]: InsufficientScopeError,\n};\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1vZGVsY29udGV4dHByb3RvY29sL3Nkay9kaXN0L2VzbS9zZXJ2ZXIvYXV0aC9lcnJvcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdml2ZS12aWJlLWFpLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vZGVsY29udGV4dHByb3RvY29sL3Nkay9kaXN0L2VzbS9zZXJ2ZXIvYXV0aC9lcnJvcnMuanM/NDgwMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEJhc2UgY2xhc3MgZm9yIGFsbCBPQXV0aCBlcnJvcnNcbiAqL1xuZXhwb3J0IGNsYXNzIE9BdXRoRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgZXJyb3JVcmkpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMuZXJyb3JVcmkgPSBlcnJvclVyaTtcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZXJyb3IgdG8gYSBzdGFuZGFyZCBPQXV0aCBlcnJvciByZXNwb25zZSBvYmplY3RcbiAgICAgKi9cbiAgICB0b1Jlc3BvbnNlT2JqZWN0KCkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgICAgIGVycm9yOiB0aGlzLmVycm9yQ29kZSxcbiAgICAgICAgICAgIGVycm9yX2Rlc2NyaXB0aW9uOiB0aGlzLm1lc3NhZ2VcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHRoaXMuZXJyb3JVcmkpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlLmVycm9yX3VyaSA9IHRoaXMuZXJyb3JVcmk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cbiAgICBnZXQgZXJyb3JDb2RlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5lcnJvckNvZGU7XG4gICAgfVxufVxuLyoqXG4gKiBJbnZhbGlkIHJlcXVlc3QgZXJyb3IgLSBUaGUgcmVxdWVzdCBpcyBtaXNzaW5nIGEgcmVxdWlyZWQgcGFyYW1ldGVyLFxuICogaW5jbHVkZXMgYW4gaW52YWxpZCBwYXJhbWV0ZXIgdmFsdWUsIGluY2x1ZGVzIGEgcGFyYW1ldGVyIG1vcmUgdGhhbiBvbmNlLFxuICogb3IgaXMgb3RoZXJ3aXNlIG1hbGZvcm1lZC5cbiAqL1xuZXhwb3J0IGNsYXNzIEludmFsaWRSZXF1ZXN0RXJyb3IgZXh0ZW5kcyBPQXV0aEVycm9yIHtcbn1cbkludmFsaWRSZXF1ZXN0RXJyb3IuZXJyb3JDb2RlID0gXCJpbnZhbGlkX3JlcXVlc3RcIjtcbi8qKlxuICogSW52YWxpZCBjbGllbnQgZXJyb3IgLSBDbGllbnQgYXV0aGVudGljYXRpb24gZmFpbGVkIChlLmcuLCB1bmtub3duIGNsaWVudCwgbm8gY2xpZW50XG4gKiBhdXRoZW50aWNhdGlvbiBpbmNsdWRlZCwgb3IgdW5zdXBwb3J0ZWQgYXV0aGVudGljYXRpb24gbWV0aG9kKS5cbiAqL1xuZXhwb3J0IGNsYXNzIEludmFsaWRDbGllbnRFcnJvciBleHRlbmRzIE9BdXRoRXJyb3Ige1xufVxuSW52YWxpZENsaWVudEVycm9yLmVycm9yQ29kZSA9IFwiaW52YWxpZF9jbGllbnRcIjtcbi8qKlxuICogSW52YWxpZCBncmFudCBlcnJvciAtIFRoZSBwcm92aWRlZCBhdXRob3JpemF0aW9uIGdyYW50IG9yIHJlZnJlc2ggdG9rZW4gaXNcbiAqIGludmFsaWQsIGV4cGlyZWQsIHJldm9rZWQsIGRvZXMgbm90IG1hdGNoIHRoZSByZWRpcmVjdGlvbiBVUkkgdXNlZCBpbiB0aGVcbiAqIGF1dGhvcml6YXRpb24gcmVxdWVzdCwgb3Igd2FzIGlzc3VlZCB0byBhbm90aGVyIGNsaWVudC5cbiAqL1xuZXhwb3J0IGNsYXNzIEludmFsaWRHcmFudEVycm9yIGV4dGVuZHMgT0F1dGhFcnJvciB7XG59XG5JbnZhbGlkR3JhbnRFcnJvci5lcnJvckNvZGUgPSBcImludmFsaWRfZ3JhbnRcIjtcbi8qKlxuICogVW5hdXRob3JpemVkIGNsaWVudCBlcnJvciAtIFRoZSBhdXRoZW50aWNhdGVkIGNsaWVudCBpcyBub3QgYXV0aG9yaXplZCB0byB1c2VcbiAqIHRoaXMgYXV0aG9yaXphdGlvbiBncmFudCB0eXBlLlxuICovXG5leHBvcnQgY2xhc3MgVW5hdXRob3JpemVkQ2xpZW50RXJyb3IgZXh0ZW5kcyBPQXV0aEVycm9yIHtcbn1cblVuYXV0aG9yaXplZENsaWVudEVycm9yLmVycm9yQ29kZSA9IFwidW5hdXRob3JpemVkX2NsaWVudFwiO1xuLyoqXG4gKiBVbnN1cHBvcnRlZCBncmFudCB0eXBlIGVycm9yIC0gVGhlIGF1dGhvcml6YXRpb24gZ3JhbnQgdHlwZSBpcyBub3Qgc3VwcG9ydGVkXG4gKiBieSB0aGUgYXV0aG9yaXphdGlvbiBzZXJ2ZXIuXG4gKi9cbmV4cG9ydCBjbGFzcyBVbnN1cHBvcnRlZEdyYW50VHlwZUVycm9yIGV4dGVuZHMgT0F1dGhFcnJvciB7XG59XG5VbnN1cHBvcnRlZEdyYW50VHlwZUVycm9yLmVycm9yQ29kZSA9IFwidW5zdXBwb3J0ZWRfZ3JhbnRfdHlwZVwiO1xuLyoqXG4gKiBJbnZhbGlkIHNjb3BlIGVycm9yIC0gVGhlIHJlcXVlc3RlZCBzY29wZSBpcyBpbnZhbGlkLCB1bmtub3duLCBtYWxmb3JtZWQsIG9yXG4gKiBleGNlZWRzIHRoZSBzY29wZSBncmFudGVkIGJ5IHRoZSByZXNvdXJjZSBvd25lci5cbiAqL1xuZXhwb3J0IGNsYXNzIEludmFsaWRTY29wZUVycm9yIGV4dGVuZHMgT0F1dGhFcnJvciB7XG59XG5JbnZhbGlkU2NvcGVFcnJvci5lcnJvckNvZGUgPSBcImludmFsaWRfc2NvcGVcIjtcbi8qKlxuICogQWNjZXNzIGRlbmllZCBlcnJvciAtIFRoZSByZXNvdXJjZSBvd25lciBvciBhdXRob3JpemF0aW9uIHNlcnZlciBkZW5pZWQgdGhlIHJlcXVlc3QuXG4gKi9cbmV4cG9ydCBjbGFzcyBBY2Nlc3NEZW5pZWRFcnJvciBleHRlbmRzIE9BdXRoRXJyb3Ige1xufVxuQWNjZXNzRGVuaWVkRXJyb3IuZXJyb3JDb2RlID0gXCJhY2Nlc3NfZGVuaWVkXCI7XG4vKipcbiAqIFNlcnZlciBlcnJvciAtIFRoZSBhdXRob3JpemF0aW9uIHNlcnZlciBlbmNvdW50ZXJlZCBhbiB1bmV4cGVjdGVkIGNvbmRpdGlvblxuICogdGhhdCBwcmV2ZW50ZWQgaXQgZnJvbSBmdWxmaWxsaW5nIHRoZSByZXF1ZXN0LlxuICovXG5leHBvcnQgY2xhc3MgU2VydmVyRXJyb3IgZXh0ZW5kcyBPQXV0aEVycm9yIHtcbn1cblNlcnZlckVycm9yLmVycm9yQ29kZSA9IFwic2VydmVyX2Vycm9yXCI7XG4vKipcbiAqIFRlbXBvcmFyaWx5IHVuYXZhaWxhYmxlIGVycm9yIC0gVGhlIGF1dGhvcml6YXRpb24gc2VydmVyIGlzIGN1cnJlbnRseSB1bmFibGUgdG9cbiAqIGhhbmRsZSB0aGUgcmVxdWVzdCBkdWUgdG8gYSB0ZW1wb3Jhcnkgb3ZlcmxvYWRpbmcgb3IgbWFpbnRlbmFuY2Ugb2YgdGhlIHNlcnZlci5cbiAqL1xuZXhwb3J0IGNsYXNzIFRlbXBvcmFyaWx5VW5hdmFpbGFibGVFcnJvciBleHRlbmRzIE9BdXRoRXJyb3Ige1xufVxuVGVtcG9yYXJpbHlVbmF2YWlsYWJsZUVycm9yLmVycm9yQ29kZSA9IFwidGVtcG9yYXJpbHlfdW5hdmFpbGFibGVcIjtcbi8qKlxuICogVW5zdXBwb3J0ZWQgcmVzcG9uc2UgdHlwZSBlcnJvciAtIFRoZSBhdXRob3JpemF0aW9uIHNlcnZlciBkb2VzIG5vdCBzdXBwb3J0XG4gKiBvYnRhaW5pbmcgYW4gYXV0aG9yaXphdGlvbiBjb2RlIHVzaW5nIHRoaXMgbWV0aG9kLlxuICovXG5leHBvcnQgY2xhc3MgVW5zdXBwb3J0ZWRSZXNwb25zZVR5cGVFcnJvciBleHRlbmRzIE9BdXRoRXJyb3Ige1xufVxuVW5zdXBwb3J0ZWRSZXNwb25zZVR5cGVFcnJvci5lcnJvckNvZGUgPSBcInVuc3VwcG9ydGVkX3Jlc3BvbnNlX3R5cGVcIjtcbi8qKlxuICogVW5zdXBwb3J0ZWQgdG9rZW4gdHlwZSBlcnJvciAtIFRoZSBhdXRob3JpemF0aW9uIHNlcnZlciBkb2VzIG5vdCBzdXBwb3J0XG4gKiB0aGUgcmVxdWVzdGVkIHRva2VuIHR5cGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBVbnN1cHBvcnRlZFRva2VuVHlwZUVycm9yIGV4dGVuZHMgT0F1dGhFcnJvciB7XG59XG5VbnN1cHBvcnRlZFRva2VuVHlwZUVycm9yLmVycm9yQ29kZSA9IFwidW5zdXBwb3J0ZWRfdG9rZW5fdHlwZVwiO1xuLyoqXG4gKiBJbnZhbGlkIHRva2VuIGVycm9yIC0gVGhlIGFjY2VzcyB0b2tlbiBwcm92aWRlZCBpcyBleHBpcmVkLCByZXZva2VkLCBtYWxmb3JtZWQsXG4gKiBvciBpbnZhbGlkIGZvciBvdGhlciByZWFzb25zLlxuICovXG5leHBvcnQgY2xhc3MgSW52YWxpZFRva2VuRXJyb3IgZXh0ZW5kcyBPQXV0aEVycm9yIHtcbn1cbkludmFsaWRUb2tlbkVycm9yLmVycm9yQ29kZSA9IFwiaW52YWxpZF90b2tlblwiO1xuLyoqXG4gKiBNZXRob2Qgbm90IGFsbG93ZWQgZXJyb3IgLSBUaGUgSFRUUCBtZXRob2QgdXNlZCBpcyBub3QgYWxsb3dlZCBmb3IgdGhpcyBlbmRwb2ludC5cbiAqIChDdXN0b20sIG5vbi1zdGFuZGFyZCBlcnJvcilcbiAqL1xuZXhwb3J0IGNsYXNzIE1ldGhvZE5vdEFsbG93ZWRFcnJvciBleHRlbmRzIE9BdXRoRXJyb3Ige1xufVxuTWV0aG9kTm90QWxsb3dlZEVycm9yLmVycm9yQ29kZSA9IFwibWV0aG9kX25vdF9hbGxvd2VkXCI7XG4vKipcbiAqIFRvbyBtYW55IHJlcXVlc3RzIGVycm9yIC0gUmF0ZSBsaW1pdCBleGNlZWRlZC5cbiAqIChDdXN0b20sIG5vbi1zdGFuZGFyZCBlcnJvciBiYXNlZCBvbiBSRkMgNjU4NSlcbiAqL1xuZXhwb3J0IGNsYXNzIFRvb01hbnlSZXF1ZXN0c0Vycm9yIGV4dGVuZHMgT0F1dGhFcnJvciB7XG59XG5Ub29NYW55UmVxdWVzdHNFcnJvci5lcnJvckNvZGUgPSBcInRvb19tYW55X3JlcXVlc3RzXCI7XG4vKipcbiAqIEludmFsaWQgY2xpZW50IG1ldGFkYXRhIGVycm9yIC0gVGhlIGNsaWVudCBtZXRhZGF0YSBpcyBpbnZhbGlkLlxuICogKEN1c3RvbSBlcnJvciBmb3IgZHluYW1pYyBjbGllbnQgcmVnaXN0cmF0aW9uIC0gUkZDIDc1OTEpXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnZhbGlkQ2xpZW50TWV0YWRhdGFFcnJvciBleHRlbmRzIE9BdXRoRXJyb3Ige1xufVxuSW52YWxpZENsaWVudE1ldGFkYXRhRXJyb3IuZXJyb3JDb2RlID0gXCJpbnZhbGlkX2NsaWVudF9tZXRhZGF0YVwiO1xuLyoqXG4gKiBJbnN1ZmZpY2llbnQgc2NvcGUgZXJyb3IgLSBUaGUgcmVxdWVzdCByZXF1aXJlcyBoaWdoZXIgcHJpdmlsZWdlcyB0aGFuIHByb3ZpZGVkIGJ5IHRoZSBhY2Nlc3MgdG9rZW4uXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnN1ZmZpY2llbnRTY29wZUVycm9yIGV4dGVuZHMgT0F1dGhFcnJvciB7XG59XG5JbnN1ZmZpY2llbnRTY29wZUVycm9yLmVycm9yQ29kZSA9IFwiaW5zdWZmaWNpZW50X3Njb3BlXCI7XG4vKipcbiAqIEEgdXRpbGl0eSBjbGFzcyBmb3IgZGVmaW5pbmcgb25lLW9mZiBlcnJvciBjb2Rlc1xuICovXG5leHBvcnQgY2xhc3MgQ3VzdG9tT0F1dGhFcnJvciBleHRlbmRzIE9BdXRoRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGN1c3RvbUVycm9yQ29kZSwgbWVzc2FnZSwgZXJyb3JVcmkpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgZXJyb3JVcmkpO1xuICAgICAgICB0aGlzLmN1c3RvbUVycm9yQ29kZSA9IGN1c3RvbUVycm9yQ29kZTtcbiAgICB9XG4gICAgZ2V0IGVycm9yQ29kZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VzdG9tRXJyb3JDb2RlO1xuICAgIH1cbn1cbi8qKlxuICogQSBmdWxsIGxpc3Qgb2YgYWxsIE9BdXRoRXJyb3JzLCBlbmFibGluZyBwYXJzaW5nIGZyb20gZXJyb3IgcmVzcG9uc2VzXG4gKi9cbmV4cG9ydCBjb25zdCBPQVVUSF9FUlJPUlMgPSB7XG4gICAgW0ludmFsaWRSZXF1ZXN0RXJyb3IuZXJyb3JDb2RlXTogSW52YWxpZFJlcXVlc3RFcnJvcixcbiAgICBbSW52YWxpZENsaWVudEVycm9yLmVycm9yQ29kZV06IEludmFsaWRDbGllbnRFcnJvcixcbiAgICBbSW52YWxpZEdyYW50RXJyb3IuZXJyb3JDb2RlXTogSW52YWxpZEdyYW50RXJyb3IsXG4gICAgW1VuYXV0aG9yaXplZENsaWVudEVycm9yLmVycm9yQ29kZV06IFVuYXV0aG9yaXplZENsaWVudEVycm9yLFxuICAgIFtVbnN1cHBvcnRlZEdyYW50VHlwZUVycm9yLmVycm9yQ29kZV06IFVuc3VwcG9ydGVkR3JhbnRUeXBlRXJyb3IsXG4gICAgW0ludmFsaWRTY29wZUVycm9yLmVycm9yQ29kZV06IEludmFsaWRTY29wZUVycm9yLFxuICAgIFtBY2Nlc3NEZW5pZWRFcnJvci5lcnJvckNvZGVdOiBBY2Nlc3NEZW5pZWRFcnJvcixcbiAgICBbU2VydmVyRXJyb3IuZXJyb3JDb2RlXTogU2VydmVyRXJyb3IsXG4gICAgW1RlbXBvcmFyaWx5VW5hdmFpbGFibGVFcnJvci5lcnJvckNvZGVdOiBUZW1wb3JhcmlseVVuYXZhaWxhYmxlRXJyb3IsXG4gICAgW1Vuc3VwcG9ydGVkUmVzcG9uc2VUeXBlRXJyb3IuZXJyb3JDb2RlXTogVW5zdXBwb3J0ZWRSZXNwb25zZVR5cGVFcnJvcixcbiAgICBbVW5zdXBwb3J0ZWRUb2tlblR5cGVFcnJvci5lcnJvckNvZGVdOiBVbnN1cHBvcnRlZFRva2VuVHlwZUVycm9yLFxuICAgIFtJbnZhbGlkVG9rZW5FcnJvci5lcnJvckNvZGVdOiBJbnZhbGlkVG9rZW5FcnJvcixcbiAgICBbTWV0aG9kTm90QWxsb3dlZEVycm9yLmVycm9yQ29kZV06IE1ldGhvZE5vdEFsbG93ZWRFcnJvcixcbiAgICBbVG9vTWFueVJlcXVlc3RzRXJyb3IuZXJyb3JDb2RlXTogVG9vTWFueVJlcXVlc3RzRXJyb3IsXG4gICAgW0ludmFsaWRDbGllbnRNZXRhZGF0YUVycm9yLmVycm9yQ29kZV06IEludmFsaWRDbGllbnRNZXRhZGF0YUVycm9yLFxuICAgIFtJbnN1ZmZpY2llbnRTY29wZUVycm9yLmVycm9yQ29kZV06IEluc3VmZmljaWVudFNjb3BlRXJyb3IsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/server/auth/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/auth-utils.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/auth-utils.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkResourceAllowed: () => (/* binding */ checkResourceAllowed),\n/* harmony export */   resourceUrlFromServerUrl: () => (/* binding */ resourceUrlFromServerUrl)\n/* harmony export */ });\n/**\n * Utilities for handling OAuth resource URIs.\n */\n/**\n * Converts a server URL to a resource URL by removing the fragment.\n * RFC 8707 section 2 states that resource URIs \"MUST NOT include a fragment component\".\n * Keeps everything else unchanged (scheme, domain, port, path, query).\n */\nfunction resourceUrlFromServerUrl(url) {\n    const resourceURL = typeof url === \"string\" ? new URL(url) : new URL(url.href);\n    resourceURL.hash = ''; // Remove fragment\n    return resourceURL;\n}\n/**\n * Checks if a requested resource URL matches a configured resource URL.\n * A requested resource matches if it has the same scheme, domain, port,\n * and its path starts with the configured resource's path.\n *\n * @param requestedResource The resource URL being requested\n * @param configuredResource The resource URL that has been configured\n * @returns true if the requested resource matches the configured resource, false otherwise\n */\nfunction checkResourceAllowed({ requestedResource, configuredResource }) {\n    const requested = typeof requestedResource === \"string\" ? new URL(requestedResource) : new URL(requestedResource.href);\n    const configured = typeof configuredResource === \"string\" ? new URL(configuredResource) : new URL(configuredResource.href);\n    // Compare the origin (scheme, domain, and port)\n    if (requested.origin !== configured.origin) {\n        return false;\n    }\n    // Handle cases like requested=/foo and configured=/foo/\n    if (requested.pathname.length < configured.pathname.length) {\n        return false;\n    }\n    // Check if the requested path starts with the configured path\n    // Ensure both paths end with / for proper comparison\n    // This ensures that if we have paths like \"/api\" and \"/api/users\",\n    // we properly detect that \"/api/users\" is a subpath of \"/api\"\n    // By adding a trailing slash if missing, we avoid false positives\n    // where paths like \"/api123\" would incorrectly match \"/api\"\n    const requestedPath = requested.pathname.endsWith('/') ? requested.pathname : requested.pathname + '/';\n    const configuredPath = configured.pathname.endsWith('/') ? configured.pathname : configured.pathname + '/';\n    return requestedPath.startsWith(configuredPath);\n}\n//# sourceMappingURL=auth-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1vZGVsY29udGV4dHByb3RvY29sL3Nkay9kaXN0L2VzbS9zaGFyZWQvYXV0aC11dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxnQ0FBZ0MsdUNBQXVDO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpdmUtdmliZS1haS1uZXh0Ly4vbm9kZV9tb2R1bGVzL0Btb2RlbGNvbnRleHRwcm90b2NvbC9zZGsvZGlzdC9lc20vc2hhcmVkL2F1dGgtdXRpbHMuanM/NTBhYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFV0aWxpdGllcyBmb3IgaGFuZGxpbmcgT0F1dGggcmVzb3VyY2UgVVJJcy5cbiAqL1xuLyoqXG4gKiBDb252ZXJ0cyBhIHNlcnZlciBVUkwgdG8gYSByZXNvdXJjZSBVUkwgYnkgcmVtb3ZpbmcgdGhlIGZyYWdtZW50LlxuICogUkZDIDg3MDcgc2VjdGlvbiAyIHN0YXRlcyB0aGF0IHJlc291cmNlIFVSSXMgXCJNVVNUIE5PVCBpbmNsdWRlIGEgZnJhZ21lbnQgY29tcG9uZW50XCIuXG4gKiBLZWVwcyBldmVyeXRoaW5nIGVsc2UgdW5jaGFuZ2VkIChzY2hlbWUsIGRvbWFpbiwgcG9ydCwgcGF0aCwgcXVlcnkpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzb3VyY2VVcmxGcm9tU2VydmVyVXJsKHVybCkge1xuICAgIGNvbnN0IHJlc291cmNlVVJMID0gdHlwZW9mIHVybCA9PT0gXCJzdHJpbmdcIiA/IG5ldyBVUkwodXJsKSA6IG5ldyBVUkwodXJsLmhyZWYpO1xuICAgIHJlc291cmNlVVJMLmhhc2ggPSAnJzsgLy8gUmVtb3ZlIGZyYWdtZW50XG4gICAgcmV0dXJuIHJlc291cmNlVVJMO1xufVxuLyoqXG4gKiBDaGVja3MgaWYgYSByZXF1ZXN0ZWQgcmVzb3VyY2UgVVJMIG1hdGNoZXMgYSBjb25maWd1cmVkIHJlc291cmNlIFVSTC5cbiAqIEEgcmVxdWVzdGVkIHJlc291cmNlIG1hdGNoZXMgaWYgaXQgaGFzIHRoZSBzYW1lIHNjaGVtZSwgZG9tYWluLCBwb3J0LFxuICogYW5kIGl0cyBwYXRoIHN0YXJ0cyB3aXRoIHRoZSBjb25maWd1cmVkIHJlc291cmNlJ3MgcGF0aC5cbiAqXG4gKiBAcGFyYW0gcmVxdWVzdGVkUmVzb3VyY2UgVGhlIHJlc291cmNlIFVSTCBiZWluZyByZXF1ZXN0ZWRcbiAqIEBwYXJhbSBjb25maWd1cmVkUmVzb3VyY2UgVGhlIHJlc291cmNlIFVSTCB0aGF0IGhhcyBiZWVuIGNvbmZpZ3VyZWRcbiAqIEByZXR1cm5zIHRydWUgaWYgdGhlIHJlcXVlc3RlZCByZXNvdXJjZSBtYXRjaGVzIHRoZSBjb25maWd1cmVkIHJlc291cmNlLCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrUmVzb3VyY2VBbGxvd2VkKHsgcmVxdWVzdGVkUmVzb3VyY2UsIGNvbmZpZ3VyZWRSZXNvdXJjZSB9KSB7XG4gICAgY29uc3QgcmVxdWVzdGVkID0gdHlwZW9mIHJlcXVlc3RlZFJlc291cmNlID09PSBcInN0cmluZ1wiID8gbmV3IFVSTChyZXF1ZXN0ZWRSZXNvdXJjZSkgOiBuZXcgVVJMKHJlcXVlc3RlZFJlc291cmNlLmhyZWYpO1xuICAgIGNvbnN0IGNvbmZpZ3VyZWQgPSB0eXBlb2YgY29uZmlndXJlZFJlc291cmNlID09PSBcInN0cmluZ1wiID8gbmV3IFVSTChjb25maWd1cmVkUmVzb3VyY2UpIDogbmV3IFVSTChjb25maWd1cmVkUmVzb3VyY2UuaHJlZik7XG4gICAgLy8gQ29tcGFyZSB0aGUgb3JpZ2luIChzY2hlbWUsIGRvbWFpbiwgYW5kIHBvcnQpXG4gICAgaWYgKHJlcXVlc3RlZC5vcmlnaW4gIT09IGNvbmZpZ3VyZWQub3JpZ2luKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gSGFuZGxlIGNhc2VzIGxpa2UgcmVxdWVzdGVkPS9mb28gYW5kIGNvbmZpZ3VyZWQ9L2Zvby9cbiAgICBpZiAocmVxdWVzdGVkLnBhdGhuYW1lLmxlbmd0aCA8IGNvbmZpZ3VyZWQucGF0aG5hbWUubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gQ2hlY2sgaWYgdGhlIHJlcXVlc3RlZCBwYXRoIHN0YXJ0cyB3aXRoIHRoZSBjb25maWd1cmVkIHBhdGhcbiAgICAvLyBFbnN1cmUgYm90aCBwYXRocyBlbmQgd2l0aCAvIGZvciBwcm9wZXIgY29tcGFyaXNvblxuICAgIC8vIFRoaXMgZW5zdXJlcyB0aGF0IGlmIHdlIGhhdmUgcGF0aHMgbGlrZSBcIi9hcGlcIiBhbmQgXCIvYXBpL3VzZXJzXCIsXG4gICAgLy8gd2UgcHJvcGVybHkgZGV0ZWN0IHRoYXQgXCIvYXBpL3VzZXJzXCIgaXMgYSBzdWJwYXRoIG9mIFwiL2FwaVwiXG4gICAgLy8gQnkgYWRkaW5nIGEgdHJhaWxpbmcgc2xhc2ggaWYgbWlzc2luZywgd2UgYXZvaWQgZmFsc2UgcG9zaXRpdmVzXG4gICAgLy8gd2hlcmUgcGF0aHMgbGlrZSBcIi9hcGkxMjNcIiB3b3VsZCBpbmNvcnJlY3RseSBtYXRjaCBcIi9hcGlcIlxuICAgIGNvbnN0IHJlcXVlc3RlZFBhdGggPSByZXF1ZXN0ZWQucGF0aG5hbWUuZW5kc1dpdGgoJy8nKSA/IHJlcXVlc3RlZC5wYXRobmFtZSA6IHJlcXVlc3RlZC5wYXRobmFtZSArICcvJztcbiAgICBjb25zdCBjb25maWd1cmVkUGF0aCA9IGNvbmZpZ3VyZWQucGF0aG5hbWUuZW5kc1dpdGgoJy8nKSA/IGNvbmZpZ3VyZWQucGF0aG5hbWUgOiBjb25maWd1cmVkLnBhdGhuYW1lICsgJy8nO1xuICAgIHJldHVybiByZXF1ZXN0ZWRQYXRoLnN0YXJ0c1dpdGgoY29uZmlndXJlZFBhdGgpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0aC11dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/auth-utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/auth.js":
/*!************************************************************************!*\
  !*** ./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/auth.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OAuthClientInformationFullSchema: () => (/* binding */ OAuthClientInformationFullSchema),\n/* harmony export */   OAuthClientInformationSchema: () => (/* binding */ OAuthClientInformationSchema),\n/* harmony export */   OAuthClientMetadataSchema: () => (/* binding */ OAuthClientMetadataSchema),\n/* harmony export */   OAuthClientRegistrationErrorSchema: () => (/* binding */ OAuthClientRegistrationErrorSchema),\n/* harmony export */   OAuthErrorResponseSchema: () => (/* binding */ OAuthErrorResponseSchema),\n/* harmony export */   OAuthMetadataSchema: () => (/* binding */ OAuthMetadataSchema),\n/* harmony export */   OAuthProtectedResourceMetadataSchema: () => (/* binding */ OAuthProtectedResourceMetadataSchema),\n/* harmony export */   OAuthTokenRevocationRequestSchema: () => (/* binding */ OAuthTokenRevocationRequestSchema),\n/* harmony export */   OAuthTokensSchema: () => (/* binding */ OAuthTokensSchema),\n/* harmony export */   OpenIdProviderDiscoveryMetadataSchema: () => (/* binding */ OpenIdProviderDiscoveryMetadataSchema),\n/* harmony export */   OpenIdProviderMetadataSchema: () => (/* binding */ OpenIdProviderMetadataSchema),\n/* harmony export */   SafeUrlSchema: () => (/* binding */ SafeUrlSchema)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/ZodError.js\");\n\n/**\n * Reusable URL validation that disallows javascript: scheme\n */\nconst SafeUrlSchema = zod__WEBPACK_IMPORTED_MODULE_0__.string().url()\n    .superRefine((val, ctx) => {\n    if (!URL.canParse(val)) {\n        ctx.addIssue({\n            code: zod__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.custom,\n            message: \"URL must be parseable\",\n            fatal: true,\n        });\n        return zod__WEBPACK_IMPORTED_MODULE_0__.NEVER;\n    }\n}).refine((url) => {\n    const u = new URL(url);\n    return u.protocol !== 'javascript:' && u.protocol !== 'data:' && u.protocol !== 'vbscript:';\n}, { message: \"URL cannot use javascript:, data:, or vbscript: scheme\" });\n/**\n * RFC 9728 OAuth Protected Resource Metadata\n */\nconst OAuthProtectedResourceMetadataSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    resource: zod__WEBPACK_IMPORTED_MODULE_0__.string().url(),\n    authorization_servers: zod__WEBPACK_IMPORTED_MODULE_0__.array(SafeUrlSchema).optional(),\n    jwks_uri: zod__WEBPACK_IMPORTED_MODULE_0__.string().url().optional(),\n    scopes_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    bearer_methods_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    resource_signing_alg_values_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    resource_name: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    resource_documentation: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    resource_policy_uri: zod__WEBPACK_IMPORTED_MODULE_0__.string().url().optional(),\n    resource_tos_uri: zod__WEBPACK_IMPORTED_MODULE_0__.string().url().optional(),\n    tls_client_certificate_bound_access_tokens: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    authorization_details_types_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    dpop_signing_alg_values_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    dpop_bound_access_tokens_required: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n})\n    .passthrough();\n/**\n * RFC 8414 OAuth 2.0 Authorization Server Metadata\n */\nconst OAuthMetadataSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    issuer: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    authorization_endpoint: SafeUrlSchema,\n    token_endpoint: SafeUrlSchema,\n    registration_endpoint: SafeUrlSchema.optional(),\n    scopes_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    response_types_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    response_modes_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    grant_types_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    token_endpoint_auth_methods_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    token_endpoint_auth_signing_alg_values_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string())\n        .optional(),\n    service_documentation: SafeUrlSchema.optional(),\n    revocation_endpoint: SafeUrlSchema.optional(),\n    revocation_endpoint_auth_methods_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    revocation_endpoint_auth_signing_alg_values_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string())\n        .optional(),\n    introspection_endpoint: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    introspection_endpoint_auth_methods_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string())\n        .optional(),\n    introspection_endpoint_auth_signing_alg_values_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string())\n        .optional(),\n    code_challenge_methods_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n})\n    .passthrough();\n/**\n * OpenID Connect Discovery 1.0 Provider Metadata\n * see: https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata\n */\nconst OpenIdProviderMetadataSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    issuer: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    authorization_endpoint: SafeUrlSchema,\n    token_endpoint: SafeUrlSchema,\n    userinfo_endpoint: SafeUrlSchema.optional(),\n    jwks_uri: SafeUrlSchema,\n    registration_endpoint: SafeUrlSchema.optional(),\n    scopes_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    response_types_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    response_modes_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    grant_types_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    acr_values_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    subject_types_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    id_token_signing_alg_values_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    id_token_encryption_alg_values_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    id_token_encryption_enc_values_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    userinfo_signing_alg_values_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    userinfo_encryption_alg_values_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    userinfo_encryption_enc_values_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    request_object_signing_alg_values_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    request_object_encryption_alg_values_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string())\n        .optional(),\n    request_object_encryption_enc_values_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string())\n        .optional(),\n    token_endpoint_auth_methods_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    token_endpoint_auth_signing_alg_values_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string())\n        .optional(),\n    display_values_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    claim_types_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    claims_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    service_documentation: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    claims_locales_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    ui_locales_supported: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    claims_parameter_supported: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    request_parameter_supported: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    request_uri_parameter_supported: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    require_request_uri_registration: zod__WEBPACK_IMPORTED_MODULE_0__.boolean().optional(),\n    op_policy_uri: SafeUrlSchema.optional(),\n    op_tos_uri: SafeUrlSchema.optional(),\n})\n    .passthrough();\n/**\n * OpenID Connect Discovery metadata that may include OAuth 2.0 fields\n * This schema represents the real-world scenario where OIDC providers\n * return a mix of OpenID Connect and OAuth 2.0 metadata fields\n */\nconst OpenIdProviderDiscoveryMetadataSchema = OpenIdProviderMetadataSchema.merge(OAuthMetadataSchema.pick({\n    code_challenge_methods_supported: true,\n}));\n/**\n * OAuth 2.1 token response\n */\nconst OAuthTokensSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    access_token: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    id_token: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(), // Optional for OAuth 2.1, but necessary in OpenID Connect\n    token_type: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    expires_in: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    scope: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    refresh_token: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n})\n    .strip();\n/**\n * OAuth 2.1 error response\n */\nconst OAuthErrorResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    error: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    error_description: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    error_uri: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n});\n/**\n * RFC 7591 OAuth 2.0 Dynamic Client Registration metadata\n */\nconst OAuthClientMetadataSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    redirect_uris: zod__WEBPACK_IMPORTED_MODULE_0__.array(SafeUrlSchema),\n    token_endpoint_auth_method: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    grant_types: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    response_types: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    client_name: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    client_uri: SafeUrlSchema.optional(),\n    logo_uri: SafeUrlSchema.optional(),\n    scope: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    contacts: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).optional(),\n    tos_uri: SafeUrlSchema.optional(),\n    policy_uri: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    jwks_uri: SafeUrlSchema.optional(),\n    jwks: zod__WEBPACK_IMPORTED_MODULE_0__.any().optional(),\n    software_id: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    software_version: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    software_statement: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n}).strip();\n/**\n * RFC 7591 OAuth 2.0 Dynamic Client Registration client information\n */\nconst OAuthClientInformationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    client_id: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    client_secret: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    client_id_issued_at: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n    client_secret_expires_at: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional(),\n}).strip();\n/**\n * RFC 7591 OAuth 2.0 Dynamic Client Registration full response (client information plus metadata)\n */\nconst OAuthClientInformationFullSchema = OAuthClientMetadataSchema.merge(OAuthClientInformationSchema);\n/**\n * RFC 7591 OAuth 2.0 Dynamic Client Registration error response\n */\nconst OAuthClientRegistrationErrorSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    error: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    error_description: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n}).strip();\n/**\n * RFC 7009 OAuth 2.0 Token Revocation request\n */\nconst OAuthTokenRevocationRequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    token: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    token_type_hint: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n}).strip();\n//# sourceMappingURL=auth.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/auth.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/protocol.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/protocol.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_REQUEST_TIMEOUT_MSEC: () => (/* binding */ DEFAULT_REQUEST_TIMEOUT_MSEC),\n/* harmony export */   Protocol: () => (/* binding */ Protocol),\n/* harmony export */   mergeCapabilities: () => (/* binding */ mergeCapabilities)\n/* harmony export */ });\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/types.js\");\n\n/**\n * The default request timeout, in miliseconds.\n */\nconst DEFAULT_REQUEST_TIMEOUT_MSEC = 60000;\n/**\n * Implements MCP protocol framing on top of a pluggable transport, including\n * features like request/response linking, notifications, and progress.\n */\nclass Protocol {\n    constructor(_options) {\n        this._options = _options;\n        this._requestMessageId = 0;\n        this._requestHandlers = new Map();\n        this._requestHandlerAbortControllers = new Map();\n        this._notificationHandlers = new Map();\n        this._responseHandlers = new Map();\n        this._progressHandlers = new Map();\n        this._timeoutInfo = new Map();\n        this._pendingDebouncedNotifications = new Set();\n        this.setNotificationHandler(_types_js__WEBPACK_IMPORTED_MODULE_0__.CancelledNotificationSchema, (notification) => {\n            const controller = this._requestHandlerAbortControllers.get(notification.params.requestId);\n            controller === null || controller === void 0 ? void 0 : controller.abort(notification.params.reason);\n        });\n        this.setNotificationHandler(_types_js__WEBPACK_IMPORTED_MODULE_0__.ProgressNotificationSchema, (notification) => {\n            this._onprogress(notification);\n        });\n        this.setRequestHandler(_types_js__WEBPACK_IMPORTED_MODULE_0__.PingRequestSchema, \n        // Automatic pong by default.\n        (_request) => ({}));\n    }\n    _setupTimeout(messageId, timeout, maxTotalTimeout, onTimeout, resetTimeoutOnProgress = false) {\n        this._timeoutInfo.set(messageId, {\n            timeoutId: setTimeout(onTimeout, timeout),\n            startTime: Date.now(),\n            timeout,\n            maxTotalTimeout,\n            resetTimeoutOnProgress,\n            onTimeout\n        });\n    }\n    _resetTimeout(messageId) {\n        const info = this._timeoutInfo.get(messageId);\n        if (!info)\n            return false;\n        const totalElapsed = Date.now() - info.startTime;\n        if (info.maxTotalTimeout && totalElapsed >= info.maxTotalTimeout) {\n            this._timeoutInfo.delete(messageId);\n            throw new _types_js__WEBPACK_IMPORTED_MODULE_0__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.RequestTimeout, \"Maximum total timeout exceeded\", { maxTotalTimeout: info.maxTotalTimeout, totalElapsed });\n        }\n        clearTimeout(info.timeoutId);\n        info.timeoutId = setTimeout(info.onTimeout, info.timeout);\n        return true;\n    }\n    _cleanupTimeout(messageId) {\n        const info = this._timeoutInfo.get(messageId);\n        if (info) {\n            clearTimeout(info.timeoutId);\n            this._timeoutInfo.delete(messageId);\n        }\n    }\n    /**\n     * Attaches to the given transport, starts it, and starts listening for messages.\n     *\n     * The Protocol object assumes ownership of the Transport, replacing any callbacks that have already been set, and expects that it is the only user of the Transport instance going forward.\n     */\n    async connect(transport) {\n        var _a, _b, _c;\n        this._transport = transport;\n        const _onclose = (_a = this.transport) === null || _a === void 0 ? void 0 : _a.onclose;\n        this._transport.onclose = () => {\n            _onclose === null || _onclose === void 0 ? void 0 : _onclose();\n            this._onclose();\n        };\n        const _onerror = (_b = this.transport) === null || _b === void 0 ? void 0 : _b.onerror;\n        this._transport.onerror = (error) => {\n            _onerror === null || _onerror === void 0 ? void 0 : _onerror(error);\n            this._onerror(error);\n        };\n        const _onmessage = (_c = this._transport) === null || _c === void 0 ? void 0 : _c.onmessage;\n        this._transport.onmessage = (message, extra) => {\n            _onmessage === null || _onmessage === void 0 ? void 0 : _onmessage(message, extra);\n            if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isJSONRPCResponse)(message) || (0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isJSONRPCError)(message)) {\n                this._onresponse(message);\n            }\n            else if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isJSONRPCRequest)(message)) {\n                this._onrequest(message, extra);\n            }\n            else if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isJSONRPCNotification)(message)) {\n                this._onnotification(message);\n            }\n            else {\n                this._onerror(new Error(`Unknown message type: ${JSON.stringify(message)}`));\n            }\n        };\n        await this._transport.start();\n    }\n    _onclose() {\n        var _a;\n        const responseHandlers = this._responseHandlers;\n        this._responseHandlers = new Map();\n        this._progressHandlers.clear();\n        this._pendingDebouncedNotifications.clear();\n        this._transport = undefined;\n        (_a = this.onclose) === null || _a === void 0 ? void 0 : _a.call(this);\n        const error = new _types_js__WEBPACK_IMPORTED_MODULE_0__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.ConnectionClosed, \"Connection closed\");\n        for (const handler of responseHandlers.values()) {\n            handler(error);\n        }\n    }\n    _onerror(error) {\n        var _a;\n        (_a = this.onerror) === null || _a === void 0 ? void 0 : _a.call(this, error);\n    }\n    _onnotification(notification) {\n        var _a;\n        const handler = (_a = this._notificationHandlers.get(notification.method)) !== null && _a !== void 0 ? _a : this.fallbackNotificationHandler;\n        // Ignore notifications not being subscribed to.\n        if (handler === undefined) {\n            return;\n        }\n        // Starting with Promise.resolve() puts any synchronous errors into the monad as well.\n        Promise.resolve()\n            .then(() => handler(notification))\n            .catch((error) => this._onerror(new Error(`Uncaught error in notification handler: ${error}`)));\n    }\n    _onrequest(request, extra) {\n        var _a, _b;\n        const handler = (_a = this._requestHandlers.get(request.method)) !== null && _a !== void 0 ? _a : this.fallbackRequestHandler;\n        // Capture the current transport at request time to ensure responses go to the correct client\n        const capturedTransport = this._transport;\n        if (handler === undefined) {\n            capturedTransport === null || capturedTransport === void 0 ? void 0 : capturedTransport.send({\n                jsonrpc: \"2.0\",\n                id: request.id,\n                error: {\n                    code: _types_js__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.MethodNotFound,\n                    message: \"Method not found\",\n                },\n            }).catch((error) => this._onerror(new Error(`Failed to send an error response: ${error}`)));\n            return;\n        }\n        const abortController = new AbortController();\n        this._requestHandlerAbortControllers.set(request.id, abortController);\n        const fullExtra = {\n            signal: abortController.signal,\n            sessionId: capturedTransport === null || capturedTransport === void 0 ? void 0 : capturedTransport.sessionId,\n            _meta: (_b = request.params) === null || _b === void 0 ? void 0 : _b._meta,\n            sendNotification: (notification) => this.notification(notification, { relatedRequestId: request.id }),\n            sendRequest: (r, resultSchema, options) => this.request(r, resultSchema, { ...options, relatedRequestId: request.id }),\n            authInfo: extra === null || extra === void 0 ? void 0 : extra.authInfo,\n            requestId: request.id,\n            requestInfo: extra === null || extra === void 0 ? void 0 : extra.requestInfo\n        };\n        // Starting with Promise.resolve() puts any synchronous errors into the monad as well.\n        Promise.resolve()\n            .then(() => handler(request, fullExtra))\n            .then((result) => {\n            if (abortController.signal.aborted) {\n                return;\n            }\n            return capturedTransport === null || capturedTransport === void 0 ? void 0 : capturedTransport.send({\n                result,\n                jsonrpc: \"2.0\",\n                id: request.id,\n            });\n        }, (error) => {\n            var _a;\n            if (abortController.signal.aborted) {\n                return;\n            }\n            return capturedTransport === null || capturedTransport === void 0 ? void 0 : capturedTransport.send({\n                jsonrpc: \"2.0\",\n                id: request.id,\n                error: {\n                    code: Number.isSafeInteger(error[\"code\"])\n                        ? error[\"code\"]\n                        : _types_js__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.InternalError,\n                    message: (_a = error.message) !== null && _a !== void 0 ? _a : \"Internal error\",\n                },\n            });\n        })\n            .catch((error) => this._onerror(new Error(`Failed to send response: ${error}`)))\n            .finally(() => {\n            this._requestHandlerAbortControllers.delete(request.id);\n        });\n    }\n    _onprogress(notification) {\n        const { progressToken, ...params } = notification.params;\n        const messageId = Number(progressToken);\n        const handler = this._progressHandlers.get(messageId);\n        if (!handler) {\n            this._onerror(new Error(`Received a progress notification for an unknown token: ${JSON.stringify(notification)}`));\n            return;\n        }\n        const responseHandler = this._responseHandlers.get(messageId);\n        const timeoutInfo = this._timeoutInfo.get(messageId);\n        if (timeoutInfo && responseHandler && timeoutInfo.resetTimeoutOnProgress) {\n            try {\n                this._resetTimeout(messageId);\n            }\n            catch (error) {\n                responseHandler(error);\n                return;\n            }\n        }\n        handler(params);\n    }\n    _onresponse(response) {\n        const messageId = Number(response.id);\n        const handler = this._responseHandlers.get(messageId);\n        if (handler === undefined) {\n            this._onerror(new Error(`Received a response for an unknown message ID: ${JSON.stringify(response)}`));\n            return;\n        }\n        this._responseHandlers.delete(messageId);\n        this._progressHandlers.delete(messageId);\n        this._cleanupTimeout(messageId);\n        if ((0,_types_js__WEBPACK_IMPORTED_MODULE_0__.isJSONRPCResponse)(response)) {\n            handler(response);\n        }\n        else {\n            const error = new _types_js__WEBPACK_IMPORTED_MODULE_0__.McpError(response.error.code, response.error.message, response.error.data);\n            handler(error);\n        }\n    }\n    get transport() {\n        return this._transport;\n    }\n    /**\n     * Closes the connection.\n     */\n    async close() {\n        var _a;\n        await ((_a = this._transport) === null || _a === void 0 ? void 0 : _a.close());\n    }\n    /**\n     * Sends a request and wait for a response.\n     *\n     * Do not use this method to emit notifications! Use notification() instead.\n     */\n    request(request, resultSchema, options) {\n        const { relatedRequestId, resumptionToken, onresumptiontoken } = options !== null && options !== void 0 ? options : {};\n        return new Promise((resolve, reject) => {\n            var _a, _b, _c, _d, _e, _f;\n            if (!this._transport) {\n                reject(new Error(\"Not connected\"));\n                return;\n            }\n            if (((_a = this._options) === null || _a === void 0 ? void 0 : _a.enforceStrictCapabilities) === true) {\n                this.assertCapabilityForMethod(request.method);\n            }\n            (_b = options === null || options === void 0 ? void 0 : options.signal) === null || _b === void 0 ? void 0 : _b.throwIfAborted();\n            const messageId = this._requestMessageId++;\n            const jsonrpcRequest = {\n                ...request,\n                jsonrpc: \"2.0\",\n                id: messageId,\n            };\n            if (options === null || options === void 0 ? void 0 : options.onprogress) {\n                this._progressHandlers.set(messageId, options.onprogress);\n                jsonrpcRequest.params = {\n                    ...request.params,\n                    _meta: {\n                        ...(((_c = request.params) === null || _c === void 0 ? void 0 : _c._meta) || {}),\n                        progressToken: messageId\n                    },\n                };\n            }\n            const cancel = (reason) => {\n                var _a;\n                this._responseHandlers.delete(messageId);\n                this._progressHandlers.delete(messageId);\n                this._cleanupTimeout(messageId);\n                (_a = this._transport) === null || _a === void 0 ? void 0 : _a.send({\n                    jsonrpc: \"2.0\",\n                    method: \"notifications/cancelled\",\n                    params: {\n                        requestId: messageId,\n                        reason: String(reason),\n                    },\n                }, { relatedRequestId, resumptionToken, onresumptiontoken }).catch((error) => this._onerror(new Error(`Failed to send cancellation: ${error}`)));\n                reject(reason);\n            };\n            this._responseHandlers.set(messageId, (response) => {\n                var _a;\n                if ((_a = options === null || options === void 0 ? void 0 : options.signal) === null || _a === void 0 ? void 0 : _a.aborted) {\n                    return;\n                }\n                if (response instanceof Error) {\n                    return reject(response);\n                }\n                try {\n                    const result = resultSchema.parse(response.result);\n                    resolve(result);\n                }\n                catch (error) {\n                    reject(error);\n                }\n            });\n            (_d = options === null || options === void 0 ? void 0 : options.signal) === null || _d === void 0 ? void 0 : _d.addEventListener(\"abort\", () => {\n                var _a;\n                cancel((_a = options === null || options === void 0 ? void 0 : options.signal) === null || _a === void 0 ? void 0 : _a.reason);\n            });\n            const timeout = (_e = options === null || options === void 0 ? void 0 : options.timeout) !== null && _e !== void 0 ? _e : DEFAULT_REQUEST_TIMEOUT_MSEC;\n            const timeoutHandler = () => cancel(new _types_js__WEBPACK_IMPORTED_MODULE_0__.McpError(_types_js__WEBPACK_IMPORTED_MODULE_0__.ErrorCode.RequestTimeout, \"Request timed out\", { timeout }));\n            this._setupTimeout(messageId, timeout, options === null || options === void 0 ? void 0 : options.maxTotalTimeout, timeoutHandler, (_f = options === null || options === void 0 ? void 0 : options.resetTimeoutOnProgress) !== null && _f !== void 0 ? _f : false);\n            this._transport.send(jsonrpcRequest, { relatedRequestId, resumptionToken, onresumptiontoken }).catch((error) => {\n                this._cleanupTimeout(messageId);\n                reject(error);\n            });\n        });\n    }\n    /**\n     * Emits a notification, which is a one-way message that does not expect a response.\n     */\n    async notification(notification, options) {\n        var _a, _b;\n        if (!this._transport) {\n            throw new Error(\"Not connected\");\n        }\n        this.assertNotificationCapability(notification.method);\n        const debouncedMethods = (_b = (_a = this._options) === null || _a === void 0 ? void 0 : _a.debouncedNotificationMethods) !== null && _b !== void 0 ? _b : [];\n        // A notification can only be debounced if it's in the list AND it's \"simple\"\n        // (i.e., has no parameters and no related request ID that could be lost).\n        const canDebounce = debouncedMethods.includes(notification.method)\n            && !notification.params\n            && !(options === null || options === void 0 ? void 0 : options.relatedRequestId);\n        if (canDebounce) {\n            // If a notification of this type is already scheduled, do nothing.\n            if (this._pendingDebouncedNotifications.has(notification.method)) {\n                return;\n            }\n            // Mark this notification type as pending.\n            this._pendingDebouncedNotifications.add(notification.method);\n            // Schedule the actual send to happen in the next microtask.\n            // This allows all synchronous calls in the current event loop tick to be coalesced.\n            Promise.resolve().then(() => {\n                var _a;\n                // Un-mark the notification so the next one can be scheduled.\n                this._pendingDebouncedNotifications.delete(notification.method);\n                // SAFETY CHECK: If the connection was closed while this was pending, abort.\n                if (!this._transport) {\n                    return;\n                }\n                const jsonrpcNotification = {\n                    ...notification,\n                    jsonrpc: \"2.0\",\n                };\n                // Send the notification, but don't await it here to avoid blocking.\n                // Handle potential errors with a .catch().\n                (_a = this._transport) === null || _a === void 0 ? void 0 : _a.send(jsonrpcNotification, options).catch(error => this._onerror(error));\n            });\n            // Return immediately.\n            return;\n        }\n        const jsonrpcNotification = {\n            ...notification,\n            jsonrpc: \"2.0\",\n        };\n        await this._transport.send(jsonrpcNotification, options);\n    }\n    /**\n     * Registers a handler to invoke when this protocol object receives a request with the given method.\n     *\n     * Note that this will replace any previous request handler for the same method.\n     */\n    setRequestHandler(requestSchema, handler) {\n        const method = requestSchema.shape.method.value;\n        this.assertRequestHandlerCapability(method);\n        this._requestHandlers.set(method, (request, extra) => {\n            return Promise.resolve(handler(requestSchema.parse(request), extra));\n        });\n    }\n    /**\n     * Removes the request handler for the given method.\n     */\n    removeRequestHandler(method) {\n        this._requestHandlers.delete(method);\n    }\n    /**\n     * Asserts that a request handler has not already been set for the given method, in preparation for a new one being automatically installed.\n     */\n    assertCanSetRequestHandler(method) {\n        if (this._requestHandlers.has(method)) {\n            throw new Error(`A request handler for ${method} already exists, which would be overridden`);\n        }\n    }\n    /**\n     * Registers a handler to invoke when this protocol object receives a notification with the given method.\n     *\n     * Note that this will replace any previous notification handler for the same method.\n     */\n    setNotificationHandler(notificationSchema, handler) {\n        this._notificationHandlers.set(notificationSchema.shape.method.value, (notification) => Promise.resolve(handler(notificationSchema.parse(notification))));\n    }\n    /**\n     * Removes the notification handler for the given method.\n     */\n    removeNotificationHandler(method) {\n        this._notificationHandlers.delete(method);\n    }\n}\nfunction mergeCapabilities(base, additional) {\n    return Object.entries(additional).reduce((acc, [key, value]) => {\n        if (value && typeof value === \"object\") {\n            acc[key] = acc[key] ? { ...acc[key], ...value } : value;\n        }\n        else {\n            acc[key] = value;\n        }\n        return acc;\n    }, { ...base });\n}\n//# sourceMappingURL=protocol.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/protocol.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/stdio.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/stdio.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReadBuffer: () => (/* binding */ ReadBuffer),\n/* harmony export */   deserializeMessage: () => (/* binding */ deserializeMessage),\n/* harmony export */   serializeMessage: () => (/* binding */ serializeMessage)\n/* harmony export */ });\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../types.js */ \"(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/types.js\");\n\n/**\n * Buffers a continuous stdio stream into discrete JSON-RPC messages.\n */\nclass ReadBuffer {\n    append(chunk) {\n        this._buffer = this._buffer ? Buffer.concat([this._buffer, chunk]) : chunk;\n    }\n    readMessage() {\n        if (!this._buffer) {\n            return null;\n        }\n        const index = this._buffer.indexOf(\"\\n\");\n        if (index === -1) {\n            return null;\n        }\n        const line = this._buffer.toString(\"utf8\", 0, index).replace(/\\r$/, '');\n        this._buffer = this._buffer.subarray(index + 1);\n        return deserializeMessage(line);\n    }\n    clear() {\n        this._buffer = undefined;\n    }\n}\nfunction deserializeMessage(line) {\n    return _types_js__WEBPACK_IMPORTED_MODULE_0__.JSONRPCMessageSchema.parse(JSON.parse(line));\n}\nfunction serializeMessage(message) {\n    return JSON.stringify(message) + \"\\n\";\n}\n//# sourceMappingURL=stdio.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1vZGVsY29udGV4dHByb3RvY29sL3Nkay9kaXN0L2VzbS9zaGFyZWQvc3RkaW8uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFtRDtBQUNuRDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxXQUFXLDJEQUFvQjtBQUMvQjtBQUNPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdml2ZS12aWJlLWFpLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vZGVsY29udGV4dHByb3RvY29sL3Nkay9kaXN0L2VzbS9zaGFyZWQvc3RkaW8uanM/NzNiZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBKU09OUlBDTWVzc2FnZVNjaGVtYSB9IGZyb20gXCIuLi90eXBlcy5qc1wiO1xuLyoqXG4gKiBCdWZmZXJzIGEgY29udGludW91cyBzdGRpbyBzdHJlYW0gaW50byBkaXNjcmV0ZSBKU09OLVJQQyBtZXNzYWdlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFJlYWRCdWZmZXIge1xuICAgIGFwcGVuZChjaHVuaykge1xuICAgICAgICB0aGlzLl9idWZmZXIgPSB0aGlzLl9idWZmZXIgPyBCdWZmZXIuY29uY2F0KFt0aGlzLl9idWZmZXIsIGNodW5rXSkgOiBjaHVuaztcbiAgICB9XG4gICAgcmVhZE1lc3NhZ2UoKSB7XG4gICAgICAgIGlmICghdGhpcy5fYnVmZmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuX2J1ZmZlci5pbmRleE9mKFwiXFxuXCIpO1xuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsaW5lID0gdGhpcy5fYnVmZmVyLnRvU3RyaW5nKFwidXRmOFwiLCAwLCBpbmRleCkucmVwbGFjZSgvXFxyJC8sICcnKTtcbiAgICAgICAgdGhpcy5fYnVmZmVyID0gdGhpcy5fYnVmZmVyLnN1YmFycmF5KGluZGV4ICsgMSk7XG4gICAgICAgIHJldHVybiBkZXNlcmlhbGl6ZU1lc3NhZ2UobGluZSk7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLl9idWZmZXIgPSB1bmRlZmluZWQ7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGRlc2VyaWFsaXplTWVzc2FnZShsaW5lKSB7XG4gICAgcmV0dXJuIEpTT05SUENNZXNzYWdlU2NoZW1hLnBhcnNlKEpTT04ucGFyc2UobGluZSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZU1lc3NhZ2UobWVzc2FnZSkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShtZXNzYWdlKSArIFwiXFxuXCI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGRpby5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/stdio.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/transport.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/transport.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=transport.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1vZGVsY29udGV4dHByb3RvY29sL3Nkay9kaXN0L2VzbS9zaGFyZWQvdHJhbnNwb3J0LmpzIiwibWFwcGluZ3MiOiI7QUFBVTtBQUNWIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdml2ZS12aWJlLWFpLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vZGVsY29udGV4dHByb3RvY29sL3Nkay9kaXN0L2VzbS9zaGFyZWQvdHJhbnNwb3J0LmpzP2NmYTIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHt9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHJhbnNwb3J0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/shared/transport.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/types.js":
/*!******************************************************************!*\
  !*** ./node_modules/@modelcontextprotocol/sdk/dist/esm/types.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioContentSchema: () => (/* binding */ AudioContentSchema),\n/* harmony export */   BaseMetadataSchema: () => (/* binding */ BaseMetadataSchema),\n/* harmony export */   BlobResourceContentsSchema: () => (/* binding */ BlobResourceContentsSchema),\n/* harmony export */   BooleanSchemaSchema: () => (/* binding */ BooleanSchemaSchema),\n/* harmony export */   CallToolRequestSchema: () => (/* binding */ CallToolRequestSchema),\n/* harmony export */   CallToolResultSchema: () => (/* binding */ CallToolResultSchema),\n/* harmony export */   CancelledNotificationSchema: () => (/* binding */ CancelledNotificationSchema),\n/* harmony export */   ClientCapabilitiesSchema: () => (/* binding */ ClientCapabilitiesSchema),\n/* harmony export */   ClientNotificationSchema: () => (/* binding */ ClientNotificationSchema),\n/* harmony export */   ClientRequestSchema: () => (/* binding */ ClientRequestSchema),\n/* harmony export */   ClientResultSchema: () => (/* binding */ ClientResultSchema),\n/* harmony export */   CompatibilityCallToolResultSchema: () => (/* binding */ CompatibilityCallToolResultSchema),\n/* harmony export */   CompleteRequestSchema: () => (/* binding */ CompleteRequestSchema),\n/* harmony export */   CompleteResultSchema: () => (/* binding */ CompleteResultSchema),\n/* harmony export */   ContentBlockSchema: () => (/* binding */ ContentBlockSchema),\n/* harmony export */   CreateMessageRequestSchema: () => (/* binding */ CreateMessageRequestSchema),\n/* harmony export */   CreateMessageResultSchema: () => (/* binding */ CreateMessageResultSchema),\n/* harmony export */   CursorSchema: () => (/* binding */ CursorSchema),\n/* harmony export */   DEFAULT_NEGOTIATED_PROTOCOL_VERSION: () => (/* binding */ DEFAULT_NEGOTIATED_PROTOCOL_VERSION),\n/* harmony export */   ElicitRequestSchema: () => (/* binding */ ElicitRequestSchema),\n/* harmony export */   ElicitResultSchema: () => (/* binding */ ElicitResultSchema),\n/* harmony export */   EmbeddedResourceSchema: () => (/* binding */ EmbeddedResourceSchema),\n/* harmony export */   EmptyResultSchema: () => (/* binding */ EmptyResultSchema),\n/* harmony export */   EnumSchemaSchema: () => (/* binding */ EnumSchemaSchema),\n/* harmony export */   ErrorCode: () => (/* binding */ ErrorCode),\n/* harmony export */   GetPromptRequestSchema: () => (/* binding */ GetPromptRequestSchema),\n/* harmony export */   GetPromptResultSchema: () => (/* binding */ GetPromptResultSchema),\n/* harmony export */   ImageContentSchema: () => (/* binding */ ImageContentSchema),\n/* harmony export */   ImplementationSchema: () => (/* binding */ ImplementationSchema),\n/* harmony export */   InitializeRequestSchema: () => (/* binding */ InitializeRequestSchema),\n/* harmony export */   InitializeResultSchema: () => (/* binding */ InitializeResultSchema),\n/* harmony export */   InitializedNotificationSchema: () => (/* binding */ InitializedNotificationSchema),\n/* harmony export */   JSONRPCErrorSchema: () => (/* binding */ JSONRPCErrorSchema),\n/* harmony export */   JSONRPCMessageSchema: () => (/* binding */ JSONRPCMessageSchema),\n/* harmony export */   JSONRPCNotificationSchema: () => (/* binding */ JSONRPCNotificationSchema),\n/* harmony export */   JSONRPCRequestSchema: () => (/* binding */ JSONRPCRequestSchema),\n/* harmony export */   JSONRPCResponseSchema: () => (/* binding */ JSONRPCResponseSchema),\n/* harmony export */   JSONRPC_VERSION: () => (/* binding */ JSONRPC_VERSION),\n/* harmony export */   LATEST_PROTOCOL_VERSION: () => (/* binding */ LATEST_PROTOCOL_VERSION),\n/* harmony export */   ListPromptsRequestSchema: () => (/* binding */ ListPromptsRequestSchema),\n/* harmony export */   ListPromptsResultSchema: () => (/* binding */ ListPromptsResultSchema),\n/* harmony export */   ListResourceTemplatesRequestSchema: () => (/* binding */ ListResourceTemplatesRequestSchema),\n/* harmony export */   ListResourceTemplatesResultSchema: () => (/* binding */ ListResourceTemplatesResultSchema),\n/* harmony export */   ListResourcesRequestSchema: () => (/* binding */ ListResourcesRequestSchema),\n/* harmony export */   ListResourcesResultSchema: () => (/* binding */ ListResourcesResultSchema),\n/* harmony export */   ListRootsRequestSchema: () => (/* binding */ ListRootsRequestSchema),\n/* harmony export */   ListRootsResultSchema: () => (/* binding */ ListRootsResultSchema),\n/* harmony export */   ListToolsRequestSchema: () => (/* binding */ ListToolsRequestSchema),\n/* harmony export */   ListToolsResultSchema: () => (/* binding */ ListToolsResultSchema),\n/* harmony export */   LoggingLevelSchema: () => (/* binding */ LoggingLevelSchema),\n/* harmony export */   LoggingMessageNotificationSchema: () => (/* binding */ LoggingMessageNotificationSchema),\n/* harmony export */   McpError: () => (/* binding */ McpError),\n/* harmony export */   ModelHintSchema: () => (/* binding */ ModelHintSchema),\n/* harmony export */   ModelPreferencesSchema: () => (/* binding */ ModelPreferencesSchema),\n/* harmony export */   NotificationSchema: () => (/* binding */ NotificationSchema),\n/* harmony export */   NumberSchemaSchema: () => (/* binding */ NumberSchemaSchema),\n/* harmony export */   PaginatedRequestSchema: () => (/* binding */ PaginatedRequestSchema),\n/* harmony export */   PaginatedResultSchema: () => (/* binding */ PaginatedResultSchema),\n/* harmony export */   PingRequestSchema: () => (/* binding */ PingRequestSchema),\n/* harmony export */   PrimitiveSchemaDefinitionSchema: () => (/* binding */ PrimitiveSchemaDefinitionSchema),\n/* harmony export */   ProgressNotificationSchema: () => (/* binding */ ProgressNotificationSchema),\n/* harmony export */   ProgressSchema: () => (/* binding */ ProgressSchema),\n/* harmony export */   ProgressTokenSchema: () => (/* binding */ ProgressTokenSchema),\n/* harmony export */   PromptArgumentSchema: () => (/* binding */ PromptArgumentSchema),\n/* harmony export */   PromptListChangedNotificationSchema: () => (/* binding */ PromptListChangedNotificationSchema),\n/* harmony export */   PromptMessageSchema: () => (/* binding */ PromptMessageSchema),\n/* harmony export */   PromptReferenceSchema: () => (/* binding */ PromptReferenceSchema),\n/* harmony export */   PromptSchema: () => (/* binding */ PromptSchema),\n/* harmony export */   ReadResourceRequestSchema: () => (/* binding */ ReadResourceRequestSchema),\n/* harmony export */   ReadResourceResultSchema: () => (/* binding */ ReadResourceResultSchema),\n/* harmony export */   RequestIdSchema: () => (/* binding */ RequestIdSchema),\n/* harmony export */   RequestSchema: () => (/* binding */ RequestSchema),\n/* harmony export */   ResourceContentsSchema: () => (/* binding */ ResourceContentsSchema),\n/* harmony export */   ResourceLinkSchema: () => (/* binding */ ResourceLinkSchema),\n/* harmony export */   ResourceListChangedNotificationSchema: () => (/* binding */ ResourceListChangedNotificationSchema),\n/* harmony export */   ResourceReferenceSchema: () => (/* binding */ ResourceReferenceSchema),\n/* harmony export */   ResourceSchema: () => (/* binding */ ResourceSchema),\n/* harmony export */   ResourceTemplateReferenceSchema: () => (/* binding */ ResourceTemplateReferenceSchema),\n/* harmony export */   ResourceTemplateSchema: () => (/* binding */ ResourceTemplateSchema),\n/* harmony export */   ResourceUpdatedNotificationSchema: () => (/* binding */ ResourceUpdatedNotificationSchema),\n/* harmony export */   ResultSchema: () => (/* binding */ ResultSchema),\n/* harmony export */   RootSchema: () => (/* binding */ RootSchema),\n/* harmony export */   RootsListChangedNotificationSchema: () => (/* binding */ RootsListChangedNotificationSchema),\n/* harmony export */   SUPPORTED_PROTOCOL_VERSIONS: () => (/* binding */ SUPPORTED_PROTOCOL_VERSIONS),\n/* harmony export */   SamplingMessageSchema: () => (/* binding */ SamplingMessageSchema),\n/* harmony export */   ServerCapabilitiesSchema: () => (/* binding */ ServerCapabilitiesSchema),\n/* harmony export */   ServerNotificationSchema: () => (/* binding */ ServerNotificationSchema),\n/* harmony export */   ServerRequestSchema: () => (/* binding */ ServerRequestSchema),\n/* harmony export */   ServerResultSchema: () => (/* binding */ ServerResultSchema),\n/* harmony export */   SetLevelRequestSchema: () => (/* binding */ SetLevelRequestSchema),\n/* harmony export */   StringSchemaSchema: () => (/* binding */ StringSchemaSchema),\n/* harmony export */   SubscribeRequestSchema: () => (/* binding */ SubscribeRequestSchema),\n/* harmony export */   TextContentSchema: () => (/* binding */ TextContentSchema),\n/* harmony export */   TextResourceContentsSchema: () => (/* binding */ TextResourceContentsSchema),\n/* harmony export */   ToolAnnotationsSchema: () => (/* binding */ ToolAnnotationsSchema),\n/* harmony export */   ToolListChangedNotificationSchema: () => (/* binding */ ToolListChangedNotificationSchema),\n/* harmony export */   ToolSchema: () => (/* binding */ ToolSchema),\n/* harmony export */   UnsubscribeRequestSchema: () => (/* binding */ UnsubscribeRequestSchema),\n/* harmony export */   isInitializeRequest: () => (/* binding */ isInitializeRequest),\n/* harmony export */   isInitializedNotification: () => (/* binding */ isInitializedNotification),\n/* harmony export */   isJSONRPCError: () => (/* binding */ isJSONRPCError),\n/* harmony export */   isJSONRPCNotification: () => (/* binding */ isJSONRPCNotification),\n/* harmony export */   isJSONRPCRequest: () => (/* binding */ isJSONRPCRequest),\n/* harmony export */   isJSONRPCResponse: () => (/* binding */ isJSONRPCResponse)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n\nconst LATEST_PROTOCOL_VERSION = \"2025-06-18\";\nconst DEFAULT_NEGOTIATED_PROTOCOL_VERSION = \"2025-03-26\";\nconst SUPPORTED_PROTOCOL_VERSIONS = [\n    LATEST_PROTOCOL_VERSION,\n    \"2025-03-26\",\n    \"2024-11-05\",\n    \"2024-10-07\",\n];\n/* JSON-RPC types */\nconst JSONRPC_VERSION = \"2.0\";\n/**\n * A progress token, used to associate progress notifications with the original request.\n */\nconst ProgressTokenSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([zod__WEBPACK_IMPORTED_MODULE_0__.string(), zod__WEBPACK_IMPORTED_MODULE_0__.number().int()]);\n/**\n * An opaque token used to represent a cursor for pagination.\n */\nconst CursorSchema = zod__WEBPACK_IMPORTED_MODULE_0__.string();\nconst RequestMetaSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * If specified, the caller is requesting out-of-band progress notifications for this request (as represented by notifications/progress). The value of this parameter is an opaque token that will be attached to any subsequent notifications. The receiver is not obligated to provide these notifications.\n     */\n    progressToken: zod__WEBPACK_IMPORTED_MODULE_0__.optional(ProgressTokenSchema),\n})\n    .passthrough();\nconst BaseRequestParamsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.optional(RequestMetaSchema),\n})\n    .passthrough();\nconst RequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    params: zod__WEBPACK_IMPORTED_MODULE_0__.optional(BaseRequestParamsSchema),\n});\nconst BaseNotificationParamsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n})\n    .passthrough();\nconst NotificationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    params: zod__WEBPACK_IMPORTED_MODULE_0__.optional(BaseNotificationParamsSchema),\n});\nconst ResultSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n})\n    .passthrough();\n/**\n * A uniquely identifying ID for a request in JSON-RPC.\n */\nconst RequestIdSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([zod__WEBPACK_IMPORTED_MODULE_0__.string(), zod__WEBPACK_IMPORTED_MODULE_0__.number().int()]);\n/**\n * A request that expects a response.\n */\nconst JSONRPCRequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    jsonrpc: zod__WEBPACK_IMPORTED_MODULE_0__.literal(JSONRPC_VERSION),\n    id: RequestIdSchema,\n})\n    .merge(RequestSchema)\n    .strict();\nconst isJSONRPCRequest = (value) => JSONRPCRequestSchema.safeParse(value).success;\n/**\n * A notification which does not expect a response.\n */\nconst JSONRPCNotificationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    jsonrpc: zod__WEBPACK_IMPORTED_MODULE_0__.literal(JSONRPC_VERSION),\n})\n    .merge(NotificationSchema)\n    .strict();\nconst isJSONRPCNotification = (value) => JSONRPCNotificationSchema.safeParse(value).success;\n/**\n * A successful (non-error) response to a request.\n */\nconst JSONRPCResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    jsonrpc: zod__WEBPACK_IMPORTED_MODULE_0__.literal(JSONRPC_VERSION),\n    id: RequestIdSchema,\n    result: ResultSchema,\n})\n    .strict();\nconst isJSONRPCResponse = (value) => JSONRPCResponseSchema.safeParse(value).success;\n/**\n * Error codes defined by the JSON-RPC specification.\n */\nvar ErrorCode;\n(function (ErrorCode) {\n    // SDK error codes\n    ErrorCode[ErrorCode[\"ConnectionClosed\"] = -32000] = \"ConnectionClosed\";\n    ErrorCode[ErrorCode[\"RequestTimeout\"] = -32001] = \"RequestTimeout\";\n    // Standard JSON-RPC error codes\n    ErrorCode[ErrorCode[\"ParseError\"] = -32700] = \"ParseError\";\n    ErrorCode[ErrorCode[\"InvalidRequest\"] = -32600] = \"InvalidRequest\";\n    ErrorCode[ErrorCode[\"MethodNotFound\"] = -32601] = \"MethodNotFound\";\n    ErrorCode[ErrorCode[\"InvalidParams\"] = -32602] = \"InvalidParams\";\n    ErrorCode[ErrorCode[\"InternalError\"] = -32603] = \"InternalError\";\n})(ErrorCode || (ErrorCode = {}));\n/**\n * A response to a request that indicates an error occurred.\n */\nconst JSONRPCErrorSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    jsonrpc: zod__WEBPACK_IMPORTED_MODULE_0__.literal(JSONRPC_VERSION),\n    id: RequestIdSchema,\n    error: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        /**\n         * The error type that occurred.\n         */\n        code: zod__WEBPACK_IMPORTED_MODULE_0__.number().int(),\n        /**\n         * A short description of the error. The message SHOULD be limited to a concise single sentence.\n         */\n        message: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        /**\n         * Additional information about the error. The value of this member is defined by the sender (e.g. detailed error information, nested errors etc.).\n         */\n        data: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.unknown()),\n    }),\n})\n    .strict();\nconst isJSONRPCError = (value) => JSONRPCErrorSchema.safeParse(value).success;\nconst JSONRPCMessageSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([\n    JSONRPCRequestSchema,\n    JSONRPCNotificationSchema,\n    JSONRPCResponseSchema,\n    JSONRPCErrorSchema,\n]);\n/* Empty result */\n/**\n * A response that indicates success but carries no data.\n */\nconst EmptyResultSchema = ResultSchema.strict();\n/* Cancellation */\n/**\n * This notification can be sent by either side to indicate that it is cancelling a previously-issued request.\n *\n * The request SHOULD still be in-flight, but due to communication latency, it is always possible that this notification MAY arrive after the request has already finished.\n *\n * This notification indicates that the result will be unused, so any associated processing SHOULD cease.\n *\n * A client MUST NOT attempt to cancel its `initialize` request.\n */\nconst CancelledNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"notifications/cancelled\"),\n    params: BaseNotificationParamsSchema.extend({\n        /**\n         * The ID of the request to cancel.\n         *\n         * This MUST correspond to the ID of a request previously issued in the same direction.\n         */\n        requestId: RequestIdSchema,\n        /**\n         * An optional string describing the reason for the cancellation. This MAY be logged or presented to the user.\n         */\n        reason: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n    }),\n});\n/* Base Metadata */\n/**\n * Base metadata interface for common properties across resources, tools, prompts, and implementations.\n */\nconst BaseMetadataSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /** Intended for programmatic or logical use, but used as a display name in past specs or fallback */\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    /**\n    * Intended for UI and end-user contexts — optimized to be human-readable and easily understood,\n    * even by those unfamiliar with domain-specific terminology.\n    *\n    * If not provided, the name should be used for display (except for Tool,\n    * where `annotations.title` should be given precedence over using `name`,\n    * if present).\n    */\n    title: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n})\n    .passthrough();\n/* Initialization */\n/**\n * Describes the name and version of an MCP implementation.\n */\nconst ImplementationSchema = BaseMetadataSchema.extend({\n    version: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n});\n/**\n * Capabilities a client may support. Known capabilities are defined here, in this schema, but this is not a closed set: any client can define its own, additional capabilities.\n */\nconst ClientCapabilitiesSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * Experimental, non-standard capabilities that the client supports.\n     */\n    experimental: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n    /**\n     * Present if the client supports sampling from an LLM.\n     */\n    sampling: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n    /**\n     * Present if the client supports eliciting user input.\n     */\n    elicitation: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n    /**\n     * Present if the client supports listing roots.\n     */\n    roots: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        /**\n         * Whether the client supports issuing notifications for changes to the roots list.\n         */\n        listChanged: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n    })\n        .passthrough()),\n})\n    .passthrough();\n/**\n * This request is sent from the client to the server when it first connects, asking it to begin initialization.\n */\nconst InitializeRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"initialize\"),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The latest version of the Model Context Protocol that the client supports. The client MAY decide to support older versions as well.\n         */\n        protocolVersion: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        capabilities: ClientCapabilitiesSchema,\n        clientInfo: ImplementationSchema,\n    }),\n});\nconst isInitializeRequest = (value) => InitializeRequestSchema.safeParse(value).success;\n/**\n * Capabilities that a server may support. Known capabilities are defined here, in this schema, but this is not a closed set: any server can define its own, additional capabilities.\n */\nconst ServerCapabilitiesSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * Experimental, non-standard capabilities that the server supports.\n     */\n    experimental: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n    /**\n     * Present if the server supports sending log messages to the client.\n     */\n    logging: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n    /**\n     * Present if the server supports sending completions to the client.\n     */\n    completions: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n    /**\n     * Present if the server offers any prompt templates.\n     */\n    prompts: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        /**\n         * Whether this server supports issuing notifications for changes to the prompt list.\n         */\n        listChanged: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n    })\n        .passthrough()),\n    /**\n     * Present if the server offers any resources to read.\n     */\n    resources: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        /**\n         * Whether this server supports clients subscribing to resource updates.\n         */\n        subscribe: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n        /**\n         * Whether this server supports issuing notifications for changes to the resource list.\n         */\n        listChanged: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n    })\n        .passthrough()),\n    /**\n     * Present if the server offers any tools to call.\n     */\n    tools: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        /**\n         * Whether this server supports issuing notifications for changes to the tool list.\n         */\n        listChanged: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n    })\n        .passthrough()),\n})\n    .passthrough();\n/**\n * After receiving an initialize request from the client, the server sends this response.\n */\nconst InitializeResultSchema = ResultSchema.extend({\n    /**\n     * The version of the Model Context Protocol that the server wants to use. This may not match the version that the client requested. If the client cannot support this version, it MUST disconnect.\n     */\n    protocolVersion: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    capabilities: ServerCapabilitiesSchema,\n    serverInfo: ImplementationSchema,\n    /**\n     * Instructions describing how to use the server and its features.\n     *\n     * This can be used by clients to improve the LLM's understanding of available tools, resources, etc. It can be thought of like a \"hint\" to the model. For example, this information MAY be added to the system prompt.\n     */\n    instructions: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n});\n/**\n * This notification is sent from the client to the server after initialization has finished.\n */\nconst InitializedNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"notifications/initialized\"),\n});\nconst isInitializedNotification = (value) => InitializedNotificationSchema.safeParse(value).success;\n/* Ping */\n/**\n * A ping, issued by either the server or the client, to check that the other party is still alive. The receiver must promptly respond, or else may be disconnected.\n */\nconst PingRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"ping\"),\n});\n/* Progress notifications */\nconst ProgressSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * The progress thus far. This should increase every time progress is made, even if the total is unknown.\n     */\n    progress: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    /**\n     * Total number of items to process (or total progress required), if known.\n     */\n    total: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.number()),\n    /**\n     * An optional message describing the current progress.\n     */\n    message: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n})\n    .passthrough();\n/**\n * An out-of-band notification used to inform the receiver of a progress update for a long-running request.\n */\nconst ProgressNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"notifications/progress\"),\n    params: BaseNotificationParamsSchema.merge(ProgressSchema).extend({\n        /**\n         * The progress token which was given in the initial request, used to associate this notification with the request that is proceeding.\n         */\n        progressToken: ProgressTokenSchema,\n    }),\n});\n/* Pagination */\nconst PaginatedRequestSchema = RequestSchema.extend({\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * An opaque token representing the current pagination position.\n         * If provided, the server should return results starting after this cursor.\n         */\n        cursor: zod__WEBPACK_IMPORTED_MODULE_0__.optional(CursorSchema),\n    }).optional(),\n});\nconst PaginatedResultSchema = ResultSchema.extend({\n    /**\n     * An opaque token representing the pagination position after the last returned result.\n     * If present, there may be more results available.\n     */\n    nextCursor: zod__WEBPACK_IMPORTED_MODULE_0__.optional(CursorSchema),\n});\n/* Resources */\n/**\n * The contents of a specific resource or sub-resource.\n */\nconst ResourceContentsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * The URI of this resource.\n     */\n    uri: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    /**\n     * The MIME type of this resource, if known.\n     */\n    mimeType: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n})\n    .passthrough();\nconst TextResourceContentsSchema = ResourceContentsSchema.extend({\n    /**\n     * The text of the item. This must only be set if the item can actually be represented as text (not binary data).\n     */\n    text: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n});\n/**\n * A Zod schema for validating Base64 strings that is more performant and\n * robust for very large inputs than the default regex-based check. It avoids\n * stack overflows by using the native `atob` function for validation.\n */\nconst Base64Schema = zod__WEBPACK_IMPORTED_MODULE_0__.string().refine((val) => {\n    try {\n        // atob throws a DOMException if the string contains characters\n        // that are not part of the Base64 character set.\n        atob(val);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n}, { message: \"Invalid Base64 string\" });\nconst BlobResourceContentsSchema = ResourceContentsSchema.extend({\n    /**\n     * A base64-encoded string representing the binary data of the item.\n     */\n    blob: Base64Schema,\n});\n/**\n * A known resource that the server is capable of reading.\n */\nconst ResourceSchema = BaseMetadataSchema.extend({\n    /**\n     * The URI of this resource.\n     */\n    uri: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    /**\n     * A description of what this resource represents.\n     *\n     * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a \"hint\" to the model.\n     */\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    /**\n     * The MIME type of this resource, if known.\n     */\n    mimeType: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n});\n/**\n * A template description for resources available on the server.\n */\nconst ResourceTemplateSchema = BaseMetadataSchema.extend({\n    /**\n     * A URI template (according to RFC 6570) that can be used to construct resource URIs.\n     */\n    uriTemplate: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    /**\n     * A description of what this template is for.\n     *\n     * This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a \"hint\" to the model.\n     */\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    /**\n     * The MIME type for all resources that match this template. This should only be included if all resources matching this template have the same type.\n     */\n    mimeType: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n});\n/**\n * Sent from the client to request a list of resources the server has.\n */\nconst ListResourcesRequestSchema = PaginatedRequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"resources/list\"),\n});\n/**\n * The server's response to a resources/list request from the client.\n */\nconst ListResourcesResultSchema = PaginatedResultSchema.extend({\n    resources: zod__WEBPACK_IMPORTED_MODULE_0__.array(ResourceSchema),\n});\n/**\n * Sent from the client to request a list of resource templates the server has.\n */\nconst ListResourceTemplatesRequestSchema = PaginatedRequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"resources/templates/list\"),\n});\n/**\n * The server's response to a resources/templates/list request from the client.\n */\nconst ListResourceTemplatesResultSchema = PaginatedResultSchema.extend({\n    resourceTemplates: zod__WEBPACK_IMPORTED_MODULE_0__.array(ResourceTemplateSchema),\n});\n/**\n * Sent from the client to the server, to read a specific resource URI.\n */\nconst ReadResourceRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"resources/read\"),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.\n         */\n        uri: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    }),\n});\n/**\n * The server's response to a resources/read request from the client.\n */\nconst ReadResourceResultSchema = ResultSchema.extend({\n    contents: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.union([TextResourceContentsSchema, BlobResourceContentsSchema])),\n});\n/**\n * An optional notification from the server to the client, informing it that the list of resources it can read from has changed. This may be issued by servers without any previous subscription from the client.\n */\nconst ResourceListChangedNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"notifications/resources/list_changed\"),\n});\n/**\n * Sent from the client to request resources/updated notifications from the server whenever a particular resource changes.\n */\nconst SubscribeRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"resources/subscribe\"),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The URI of the resource to subscribe to. The URI can use any protocol; it is up to the server how to interpret it.\n         */\n        uri: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    }),\n});\n/**\n * Sent from the client to request cancellation of resources/updated notifications from the server. This should follow a previous resources/subscribe request.\n */\nconst UnsubscribeRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"resources/unsubscribe\"),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The URI of the resource to unsubscribe from.\n         */\n        uri: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    }),\n});\n/**\n * A notification from the server to the client, informing it that a resource has changed and may need to be read again. This should only be sent if the client previously sent a resources/subscribe request.\n */\nconst ResourceUpdatedNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"notifications/resources/updated\"),\n    params: BaseNotificationParamsSchema.extend({\n        /**\n         * The URI of the resource that has been updated. This might be a sub-resource of the one that the client actually subscribed to.\n         */\n        uri: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    }),\n});\n/* Prompts */\n/**\n * Describes an argument that a prompt can accept.\n */\nconst PromptArgumentSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * The name of the argument.\n     */\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    /**\n     * A human-readable description of the argument.\n     */\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    /**\n     * Whether this argument must be provided.\n     */\n    required: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n})\n    .passthrough();\n/**\n * A prompt or prompt template that the server offers.\n */\nconst PromptSchema = BaseMetadataSchema.extend({\n    /**\n     * An optional description of what this prompt provides\n     */\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    /**\n     * A list of arguments to use for templating the prompt.\n     */\n    arguments: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.array(PromptArgumentSchema)),\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n});\n/**\n * Sent from the client to request a list of prompts and prompt templates the server has.\n */\nconst ListPromptsRequestSchema = PaginatedRequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"prompts/list\"),\n});\n/**\n * The server's response to a prompts/list request from the client.\n */\nconst ListPromptsResultSchema = PaginatedResultSchema.extend({\n    prompts: zod__WEBPACK_IMPORTED_MODULE_0__.array(PromptSchema),\n});\n/**\n * Used by the client to get a prompt provided by the server.\n */\nconst GetPromptRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"prompts/get\"),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The name of the prompt or prompt template.\n         */\n        name: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        /**\n         * Arguments to use for templating the prompt.\n         */\n        arguments: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.string())),\n    }),\n});\n/**\n * Text provided to or from an LLM.\n */\nconst TextContentSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"text\"),\n    /**\n     * The text content of the message.\n     */\n    text: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n})\n    .passthrough();\n/**\n * An image provided to or from an LLM.\n */\nconst ImageContentSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"image\"),\n    /**\n     * The base64-encoded image data.\n     */\n    data: Base64Schema,\n    /**\n     * The MIME type of the image. Different providers may support different image types.\n     */\n    mimeType: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n})\n    .passthrough();\n/**\n * An Audio provided to or from an LLM.\n */\nconst AudioContentSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"audio\"),\n    /**\n     * The base64-encoded audio data.\n     */\n    data: Base64Schema,\n    /**\n     * The MIME type of the audio. Different providers may support different audio types.\n     */\n    mimeType: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n})\n    .passthrough();\n/**\n * The contents of a resource, embedded into a prompt or tool call result.\n */\nconst EmbeddedResourceSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"resource\"),\n    resource: zod__WEBPACK_IMPORTED_MODULE_0__.union([TextResourceContentsSchema, BlobResourceContentsSchema]),\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n})\n    .passthrough();\n/**\n * A resource that the server is capable of reading, included in a prompt or tool call result.\n *\n * Note: resource links returned by tools are not guaranteed to appear in the results of `resources/list` requests.\n */\nconst ResourceLinkSchema = ResourceSchema.extend({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"resource_link\"),\n});\n/**\n * A content block that can be used in prompts and tool results.\n */\nconst ContentBlockSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([\n    TextContentSchema,\n    ImageContentSchema,\n    AudioContentSchema,\n    ResourceLinkSchema,\n    EmbeddedResourceSchema,\n]);\n/**\n * Describes a message returned as part of a prompt.\n */\nconst PromptMessageSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    role: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"user\", \"assistant\"]),\n    content: ContentBlockSchema,\n})\n    .passthrough();\n/**\n * The server's response to a prompts/get request from the client.\n */\nconst GetPromptResultSchema = ResultSchema.extend({\n    /**\n     * An optional description for the prompt.\n     */\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    messages: zod__WEBPACK_IMPORTED_MODULE_0__.array(PromptMessageSchema),\n});\n/**\n * An optional notification from the server to the client, informing it that the list of prompts it offers has changed. This may be issued by servers without any previous subscription from the client.\n */\nconst PromptListChangedNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"notifications/prompts/list_changed\"),\n});\n/* Tools */\n/**\n * Additional properties describing a Tool to clients.\n *\n * NOTE: all properties in ToolAnnotations are **hints**.\n * They are not guaranteed to provide a faithful description of\n * tool behavior (including descriptive properties like `title`).\n *\n * Clients should never make tool use decisions based on ToolAnnotations\n * received from untrusted servers.\n */\nconst ToolAnnotationsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * A human-readable title for the tool.\n     */\n    title: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    /**\n     * If true, the tool does not modify its environment.\n     *\n     * Default: false\n     */\n    readOnlyHint: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n    /**\n     * If true, the tool may perform destructive updates to its environment.\n     * If false, the tool performs only additive updates.\n     *\n     * (This property is meaningful only when `readOnlyHint == false`)\n     *\n     * Default: true\n     */\n    destructiveHint: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n    /**\n     * If true, calling the tool repeatedly with the same arguments\n     * will have no additional effect on the its environment.\n     *\n     * (This property is meaningful only when `readOnlyHint == false`)\n     *\n     * Default: false\n     */\n    idempotentHint: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n    /**\n     * If true, this tool may interact with an \"open world\" of external\n     * entities. If false, the tool's domain of interaction is closed.\n     * For example, the world of a web search tool is open, whereas that\n     * of a memory tool is not.\n     *\n     * Default: true\n     */\n    openWorldHint: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n})\n    .passthrough();\n/**\n * Definition for a tool the client can call.\n */\nconst ToolSchema = BaseMetadataSchema.extend({\n    /**\n     * A human-readable description of the tool.\n     */\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    /**\n     * A JSON Schema object defining the expected parameters for the tool.\n     */\n    inputSchema: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"object\"),\n        properties: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n        required: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string())),\n    })\n        .passthrough(),\n    /**\n     * An optional JSON Schema object defining the structure of the tool's output returned in\n     * the structuredContent field of a CallToolResult.\n     */\n    outputSchema: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"object\"),\n        properties: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n        required: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string())),\n    })\n        .passthrough()),\n    /**\n     * Optional additional tool information.\n     */\n    annotations: zod__WEBPACK_IMPORTED_MODULE_0__.optional(ToolAnnotationsSchema),\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n});\n/**\n * Sent from the client to request a list of tools the server has.\n */\nconst ListToolsRequestSchema = PaginatedRequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"tools/list\"),\n});\n/**\n * The server's response to a tools/list request from the client.\n */\nconst ListToolsResultSchema = PaginatedResultSchema.extend({\n    tools: zod__WEBPACK_IMPORTED_MODULE_0__.array(ToolSchema),\n});\n/**\n * The server's response to a tool call.\n */\nconst CallToolResultSchema = ResultSchema.extend({\n    /**\n     * A list of content objects that represent the result of the tool call.\n     *\n     * If the Tool does not define an outputSchema, this field MUST be present in the result.\n     * For backwards compatibility, this field is always present, but it may be empty.\n     */\n    content: zod__WEBPACK_IMPORTED_MODULE_0__.array(ContentBlockSchema).default([]),\n    /**\n     * An object containing structured tool output.\n     *\n     * If the Tool defines an outputSchema, this field MUST be present in the result, and contain a JSON object that matches the schema.\n     */\n    structuredContent: zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough().optional(),\n    /**\n     * Whether the tool call ended in an error.\n     *\n     * If not set, this is assumed to be false (the call was successful).\n     *\n     * Any errors that originate from the tool SHOULD be reported inside the result\n     * object, with `isError` set to true, _not_ as an MCP protocol-level error\n     * response. Otherwise, the LLM would not be able to see that an error occurred\n     * and self-correct.\n     *\n     * However, any errors in _finding_ the tool, an error indicating that the\n     * server does not support tool calls, or any other exceptional conditions,\n     * should be reported as an MCP error response.\n     */\n    isError: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n});\n/**\n * CallToolResultSchema extended with backwards compatibility to protocol version 2024-10-07.\n */\nconst CompatibilityCallToolResultSchema = CallToolResultSchema.or(ResultSchema.extend({\n    toolResult: zod__WEBPACK_IMPORTED_MODULE_0__.unknown(),\n}));\n/**\n * Used by the client to invoke a tool provided by the server.\n */\nconst CallToolRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"tools/call\"),\n    params: BaseRequestParamsSchema.extend({\n        name: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        arguments: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.unknown())),\n    }),\n});\n/**\n * An optional notification from the server to the client, informing it that the list of tools it offers has changed. This may be issued by servers without any previous subscription from the client.\n */\nconst ToolListChangedNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"notifications/tools/list_changed\"),\n});\n/* Logging */\n/**\n * The severity of a log message.\n */\nconst LoggingLevelSchema = zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\n    \"debug\",\n    \"info\",\n    \"notice\",\n    \"warning\",\n    \"error\",\n    \"critical\",\n    \"alert\",\n    \"emergency\",\n]);\n/**\n * A request from the client to the server, to enable or adjust logging.\n */\nconst SetLevelRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"logging/setLevel\"),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The level of logging that the client wants to receive from the server. The server should send all logs at this level and higher (i.e., more severe) to the client as notifications/logging/message.\n         */\n        level: LoggingLevelSchema,\n    }),\n});\n/**\n * Notification of a log message passed from server to client. If no logging/setLevel request has been sent from the client, the server MAY decide which messages to send automatically.\n */\nconst LoggingMessageNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"notifications/message\"),\n    params: BaseNotificationParamsSchema.extend({\n        /**\n         * The severity of this log message.\n         */\n        level: LoggingLevelSchema,\n        /**\n         * An optional name of the logger issuing this message.\n         */\n        logger: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n        /**\n         * The data to be logged, such as a string message or an object. Any JSON serializable type is allowed here.\n         */\n        data: zod__WEBPACK_IMPORTED_MODULE_0__.unknown(),\n    }),\n});\n/* Sampling */\n/**\n * Hints to use for model selection.\n */\nconst ModelHintSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * A hint for a model name.\n     */\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string().optional(),\n})\n    .passthrough();\n/**\n * The server's preferences for model selection, requested of the client during sampling.\n */\nconst ModelPreferencesSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * Optional hints to use for model selection.\n     */\n    hints: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.array(ModelHintSchema)),\n    /**\n     * How much to prioritize cost when selecting a model.\n     */\n    costPriority: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0).max(1)),\n    /**\n     * How much to prioritize sampling speed (latency) when selecting a model.\n     */\n    speedPriority: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0).max(1)),\n    /**\n     * How much to prioritize intelligence and capabilities when selecting a model.\n     */\n    intelligencePriority: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.number().min(0).max(1)),\n})\n    .passthrough();\n/**\n * Describes a message issued to or received from an LLM API.\n */\nconst SamplingMessageSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    role: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"user\", \"assistant\"]),\n    content: zod__WEBPACK_IMPORTED_MODULE_0__.union([TextContentSchema, ImageContentSchema, AudioContentSchema]),\n})\n    .passthrough();\n/**\n * A request from the server to sample an LLM via the client. The client has full discretion over which model to select. The client should also inform the user before beginning sampling, to allow them to inspect the request (human in the loop) and decide whether to approve it.\n */\nconst CreateMessageRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"sampling/createMessage\"),\n    params: BaseRequestParamsSchema.extend({\n        messages: zod__WEBPACK_IMPORTED_MODULE_0__.array(SamplingMessageSchema),\n        /**\n         * An optional system prompt the server wants to use for sampling. The client MAY modify or omit this prompt.\n         */\n        systemPrompt: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n        /**\n         * A request to include context from one or more MCP servers (including the caller), to be attached to the prompt. The client MAY ignore this request.\n         */\n        includeContext: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"none\", \"thisServer\", \"allServers\"])),\n        temperature: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.number()),\n        /**\n         * The maximum number of tokens to sample, as requested by the server. The client MAY choose to sample fewer tokens than requested.\n         */\n        maxTokens: zod__WEBPACK_IMPORTED_MODULE_0__.number().int(),\n        stopSequences: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string())),\n        /**\n         * Optional metadata to pass through to the LLM provider. The format of this metadata is provider-specific.\n         */\n        metadata: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n        /**\n         * The server's preferences for which model to select.\n         */\n        modelPreferences: zod__WEBPACK_IMPORTED_MODULE_0__.optional(ModelPreferencesSchema),\n    }),\n});\n/**\n * The client's response to a sampling/create_message request from the server. The client should inform the user before returning the sampled message, to allow them to inspect the response (human in the loop) and decide whether to allow the server to see it.\n */\nconst CreateMessageResultSchema = ResultSchema.extend({\n    /**\n     * The name of the model that generated the message.\n     */\n    model: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    /**\n     * The reason why sampling stopped.\n     */\n    stopReason: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"endTurn\", \"stopSequence\", \"maxTokens\"]).or(zod__WEBPACK_IMPORTED_MODULE_0__.string())),\n    role: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"user\", \"assistant\"]),\n    content: zod__WEBPACK_IMPORTED_MODULE_0__.discriminatedUnion(\"type\", [\n        TextContentSchema,\n        ImageContentSchema,\n        AudioContentSchema\n    ]),\n});\n/* Elicitation */\n/**\n * Primitive schema definition for boolean fields.\n */\nconst BooleanSchemaSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"boolean\"),\n    title: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    default: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n})\n    .passthrough();\n/**\n * Primitive schema definition for string fields.\n */\nconst StringSchemaSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"string\"),\n    title: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    minLength: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.number()),\n    maxLength: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.number()),\n    format: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"email\", \"uri\", \"date\", \"date-time\"])),\n})\n    .passthrough();\n/**\n * Primitive schema definition for number fields.\n */\nconst NumberSchemaSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"number\", \"integer\"]),\n    title: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    minimum: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.number()),\n    maximum: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.number()),\n})\n    .passthrough();\n/**\n * Primitive schema definition for enum fields.\n */\nconst EnumSchemaSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"string\"),\n    title: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    enum: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    enumNames: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string())),\n})\n    .passthrough();\n/**\n * Union of all primitive schema definitions.\n */\nconst PrimitiveSchemaDefinitionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([\n    BooleanSchemaSchema,\n    StringSchemaSchema,\n    NumberSchemaSchema,\n    EnumSchemaSchema,\n]);\n/**\n * A request from the server to elicit user input via the client.\n * The client should present the message and form fields to the user.\n */\nconst ElicitRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"elicitation/create\"),\n    params: BaseRequestParamsSchema.extend({\n        /**\n         * The message to present to the user.\n         */\n        message: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        /**\n         * The schema for the requested user input.\n         */\n        requestedSchema: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"object\"),\n            properties: zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.string(), PrimitiveSchemaDefinitionSchema),\n            required: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string())),\n        })\n            .passthrough(),\n    }),\n});\n/**\n * The client's response to an elicitation/create request from the server.\n */\nconst ElicitResultSchema = ResultSchema.extend({\n    /**\n     * The user's response action.\n     */\n    action: zod__WEBPACK_IMPORTED_MODULE_0__[\"enum\"]([\"accept\", \"decline\", \"cancel\"]),\n    /**\n     * The collected user input content (only present if action is \"accept\").\n     */\n    content: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.string(), zod__WEBPACK_IMPORTED_MODULE_0__.unknown())),\n});\n/* Autocomplete */\n/**\n * A reference to a resource or resource template definition.\n */\nconst ResourceTemplateReferenceSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"ref/resource\"),\n    /**\n     * The URI or URI template of the resource.\n     */\n    uri: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n})\n    .passthrough();\n/**\n * @deprecated Use ResourceTemplateReferenceSchema instead\n */\nconst ResourceReferenceSchema = ResourceTemplateReferenceSchema;\n/**\n * Identifies a prompt.\n */\nconst PromptReferenceSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    type: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"ref/prompt\"),\n    /**\n     * The name of the prompt or prompt template\n     */\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n})\n    .passthrough();\n/**\n * A request from the client to the server, to ask for completion options.\n */\nconst CompleteRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"completion/complete\"),\n    params: BaseRequestParamsSchema.extend({\n        ref: zod__WEBPACK_IMPORTED_MODULE_0__.union([PromptReferenceSchema, ResourceTemplateReferenceSchema]),\n        /**\n         * The argument's information\n         */\n        argument: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            /**\n             * The name of the argument\n             */\n            name: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n            /**\n             * The value of the argument to use for completion matching.\n             */\n            value: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        })\n            .passthrough(),\n        context: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n            /**\n             * Previously-resolved variables in a URI template or prompt.\n             */\n            arguments: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.record(zod__WEBPACK_IMPORTED_MODULE_0__.string(), zod__WEBPACK_IMPORTED_MODULE_0__.string())),\n        })),\n    }),\n});\n/**\n * The server's response to a completion/complete request\n */\nconst CompleteResultSchema = ResultSchema.extend({\n    completion: zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        /**\n         * An array of completion values. Must not exceed 100 items.\n         */\n        values: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.string()).max(100),\n        /**\n         * The total number of completion options available. This can exceed the number of values actually sent in the response.\n         */\n        total: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.number().int()),\n        /**\n         * Indicates whether there are additional completion options beyond those provided in the current response, even if the exact total is unknown.\n         */\n        hasMore: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.boolean()),\n    })\n        .passthrough(),\n});\n/* Roots */\n/**\n * Represents a root directory or file that the server can operate on.\n */\nconst RootSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    /**\n     * The URI identifying the root. This *must* start with file:// for now.\n     */\n    uri: zod__WEBPACK_IMPORTED_MODULE_0__.string().startsWith(\"file://\"),\n    /**\n     * An optional name for the root.\n     */\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.string()),\n    /**\n     * See [MCP specification](https://github.com/modelcontextprotocol/modelcontextprotocol/blob/47339c03c143bb4ec01a26e721a1b8fe66634ebe/docs/specification/draft/basic/index.mdx#general-fields)\n     * for notes on _meta usage.\n     */\n    _meta: zod__WEBPACK_IMPORTED_MODULE_0__.optional(zod__WEBPACK_IMPORTED_MODULE_0__.object({}).passthrough()),\n})\n    .passthrough();\n/**\n * Sent from the server to request a list of root URIs from the client.\n */\nconst ListRootsRequestSchema = RequestSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"roots/list\"),\n});\n/**\n * The client's response to a roots/list request from the server.\n */\nconst ListRootsResultSchema = ResultSchema.extend({\n    roots: zod__WEBPACK_IMPORTED_MODULE_0__.array(RootSchema),\n});\n/**\n * A notification from the client to the server, informing it that the list of roots has changed.\n */\nconst RootsListChangedNotificationSchema = NotificationSchema.extend({\n    method: zod__WEBPACK_IMPORTED_MODULE_0__.literal(\"notifications/roots/list_changed\"),\n});\n/* Client messages */\nconst ClientRequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([\n    PingRequestSchema,\n    InitializeRequestSchema,\n    CompleteRequestSchema,\n    SetLevelRequestSchema,\n    GetPromptRequestSchema,\n    ListPromptsRequestSchema,\n    ListResourcesRequestSchema,\n    ListResourceTemplatesRequestSchema,\n    ReadResourceRequestSchema,\n    SubscribeRequestSchema,\n    UnsubscribeRequestSchema,\n    CallToolRequestSchema,\n    ListToolsRequestSchema,\n]);\nconst ClientNotificationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([\n    CancelledNotificationSchema,\n    ProgressNotificationSchema,\n    InitializedNotificationSchema,\n    RootsListChangedNotificationSchema,\n]);\nconst ClientResultSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([\n    EmptyResultSchema,\n    CreateMessageResultSchema,\n    ElicitResultSchema,\n    ListRootsResultSchema,\n]);\n/* Server messages */\nconst ServerRequestSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([\n    PingRequestSchema,\n    CreateMessageRequestSchema,\n    ElicitRequestSchema,\n    ListRootsRequestSchema,\n]);\nconst ServerNotificationSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([\n    CancelledNotificationSchema,\n    ProgressNotificationSchema,\n    LoggingMessageNotificationSchema,\n    ResourceUpdatedNotificationSchema,\n    ResourceListChangedNotificationSchema,\n    ToolListChangedNotificationSchema,\n    PromptListChangedNotificationSchema,\n]);\nconst ServerResultSchema = zod__WEBPACK_IMPORTED_MODULE_0__.union([\n    EmptyResultSchema,\n    InitializeResultSchema,\n    CompleteResultSchema,\n    GetPromptResultSchema,\n    ListPromptsResultSchema,\n    ListResourcesResultSchema,\n    ListResourceTemplatesResultSchema,\n    ReadResourceResultSchema,\n    CallToolResultSchema,\n    ListToolsResultSchema,\n]);\nclass McpError extends Error {\n    constructor(code, message, data) {\n        super(`MCP error ${code}: ${message}`);\n        this.code = code;\n        this.data = data;\n        this.name = \"McpError\";\n    }\n}\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG1vZGVsY29udGV4dHByb3RvY29sL3Nkay9kaXN0L2VzbS90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBd0I7QUFDakI7QUFDQTtBQUNBO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTyw0QkFBNEIsc0NBQU8sRUFBRSx1Q0FBUSxJQUFJLHVDQUFRO0FBQ2hFO0FBQ0E7QUFDQTtBQUNPLHFCQUFxQix1Q0FBUTtBQUNwQywwQkFBMEIsdUNBQ2Y7QUFDWDtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIseUNBQVU7QUFDN0IsQ0FBQztBQUNEO0FBQ0EsZ0NBQWdDLHVDQUNyQjtBQUNYLFdBQVcseUNBQVU7QUFDckIsQ0FBQztBQUNEO0FBQ08sc0JBQXNCLHVDQUFRO0FBQ3JDLFlBQVksdUNBQVE7QUFDcEIsWUFBWSx5Q0FBVTtBQUN0QixDQUFDO0FBQ0QscUNBQXFDLHVDQUMxQjtBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyx5Q0FBVSxDQUFDLHVDQUFRLEdBQUc7QUFDakMsQ0FBQztBQUNEO0FBQ08sMkJBQTJCLHVDQUFRO0FBQzFDLFlBQVksdUNBQVE7QUFDcEIsWUFBWSx5Q0FBVTtBQUN0QixDQUFDO0FBQ00scUJBQXFCLHVDQUNqQjtBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyx5Q0FBVSxDQUFDLHVDQUFRLEdBQUc7QUFDakMsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ08sd0JBQXdCLHNDQUFPLEVBQUUsdUNBQVEsSUFBSSx1Q0FBUTtBQUM1RDtBQUNBO0FBQ0E7QUFDTyw2QkFBNkIsdUNBQ3pCO0FBQ1gsYUFBYSx3Q0FBUztBQUN0QjtBQUNBLENBQUM7QUFDRDtB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ZS12aWJlLWFpLW5leHQvLi9ub2RlX21vZHVsZXMvQG1vZGVsY29udGV4dHByb3RvY29sL3Nkay9kaXN0L2VzbS90eXBlcy5qcz8zYTEwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHogfSBmcm9tIFwiem9kXCI7XG5leHBvcnQgY29uc3QgTEFURVNUX1BST1RPQ09MX1ZFUlNJT04gPSBcIjIwMjUtMDYtMThcIjtcbmV4cG9ydCBjb25zdCBERUZBVUxUX05FR09USUFURURfUFJPVE9DT0xfVkVSU0lPTiA9IFwiMjAyNS0wMy0yNlwiO1xuZXhwb3J0IGNvbnN0IFNVUFBPUlRFRF9QUk9UT0NPTF9WRVJTSU9OUyA9IFtcbiAgICBMQVRFU1RfUFJPVE9DT0xfVkVSU0lPTixcbiAgICBcIjIwMjUtMDMtMjZcIixcbiAgICBcIjIwMjQtMTEtMDVcIixcbiAgICBcIjIwMjQtMTAtMDdcIixcbl07XG4vKiBKU09OLVJQQyB0eXBlcyAqL1xuZXhwb3J0IGNvbnN0IEpTT05SUENfVkVSU0lPTiA9IFwiMi4wXCI7XG4vKipcbiAqIEEgcHJvZ3Jlc3MgdG9rZW4sIHVzZWQgdG8gYXNzb2NpYXRlIHByb2dyZXNzIG5vdGlmaWNhdGlvbnMgd2l0aCB0aGUgb3JpZ2luYWwgcmVxdWVzdC5cbiAqL1xuZXhwb3J0IGNvbnN0IFByb2dyZXNzVG9rZW5TY2hlbWEgPSB6LnVuaW9uKFt6LnN0cmluZygpLCB6Lm51bWJlcigpLmludCgpXSk7XG4vKipcbiAqIEFuIG9wYXF1ZSB0b2tlbiB1c2VkIHRvIHJlcHJlc2VudCBhIGN1cnNvciBmb3IgcGFnaW5hdGlvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IEN1cnNvclNjaGVtYSA9IHouc3RyaW5nKCk7XG5jb25zdCBSZXF1ZXN0TWV0YVNjaGVtYSA9IHpcbiAgICAub2JqZWN0KHtcbiAgICAvKipcbiAgICAgKiBJZiBzcGVjaWZpZWQsIHRoZSBjYWxsZXIgaXMgcmVxdWVzdGluZyBvdXQtb2YtYmFuZCBwcm9ncmVzcyBub3RpZmljYXRpb25zIGZvciB0aGlzIHJlcXVlc3QgKGFzIHJlcHJlc2VudGVkIGJ5IG5vdGlmaWNhdGlvbnMvcHJvZ3Jlc3MpLiBUaGUgdmFsdWUgb2YgdGhpcyBwYXJhbWV0ZXIgaXMgYW4gb3BhcXVlIHRva2VuIHRoYXQgd2lsbCBiZSBhdHRhY2hlZCB0byBhbnkgc3Vic2VxdWVudCBub3RpZmljYXRpb25zLiBUaGUgcmVjZWl2ZXIgaXMgbm90IG9ibGlnYXRlZCB0byBwcm92aWRlIHRoZXNlIG5vdGlmaWNhdGlvbnMuXG4gICAgICovXG4gICAgcHJvZ3Jlc3NUb2tlbjogei5vcHRpb25hbChQcm9ncmVzc1Rva2VuU2NoZW1hKSxcbn0pXG4gICAgLnBhc3N0aHJvdWdoKCk7XG5jb25zdCBCYXNlUmVxdWVzdFBhcmFtc1NjaGVtYSA9IHpcbiAgICAub2JqZWN0KHtcbiAgICBfbWV0YTogei5vcHRpb25hbChSZXF1ZXN0TWV0YVNjaGVtYSksXG59KVxuICAgIC5wYXNzdGhyb3VnaCgpO1xuZXhwb3J0IGNvbnN0IFJlcXVlc3RTY2hlbWEgPSB6Lm9iamVjdCh7XG4gICAgbWV0aG9kOiB6LnN0cmluZygpLFxuICAgIHBhcmFtczogei5vcHRpb25hbChCYXNlUmVxdWVzdFBhcmFtc1NjaGVtYSksXG59KTtcbmNvbnN0IEJhc2VOb3RpZmljYXRpb25QYXJhbXNTY2hlbWEgPSB6XG4gICAgLm9iamVjdCh7XG4gICAgLyoqXG4gICAgICogU2VlIFtNQ1Agc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL21vZGVsY29udGV4dHByb3RvY29sL21vZGVsY29udGV4dHByb3RvY29sL2Jsb2IvNDczMzljMDNjMTQzYmI0ZWMwMWEyNmU3MjFhMWI4ZmU2NjYzNGViZS9kb2NzL3NwZWNpZmljYXRpb24vZHJhZnQvYmFzaWMvaW5kZXgubWR4I2dlbmVyYWwtZmllbGRzKVxuICAgICAqIGZvciBub3RlcyBvbiBfbWV0YSB1c2FnZS5cbiAgICAgKi9cbiAgICBfbWV0YTogei5vcHRpb25hbCh6Lm9iamVjdCh7fSkucGFzc3Rocm91Z2goKSksXG59KVxuICAgIC5wYXNzdGhyb3VnaCgpO1xuZXhwb3J0IGNvbnN0IE5vdGlmaWNhdGlvblNjaGVtYSA9IHoub2JqZWN0KHtcbiAgICBtZXRob2Q6IHouc3RyaW5nKCksXG4gICAgcGFyYW1zOiB6Lm9wdGlvbmFsKEJhc2VOb3RpZmljYXRpb25QYXJhbXNTY2hlbWEpLFxufSk7XG5leHBvcnQgY29uc3QgUmVzdWx0U2NoZW1hID0gelxuICAgIC5vYmplY3Qoe1xuICAgIC8qKlxuICAgICAqIFNlZSBbTUNQIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9tb2RlbGNvbnRleHRwcm90b2NvbC9tb2RlbGNvbnRleHRwcm90b2NvbC9ibG9iLzQ3MzM5YzAzYzE0M2JiNGVjMDFhMjZlNzIxYTFiOGZlNjY2MzRlYmUvZG9jcy9zcGVjaWZpY2F0aW9uL2RyYWZ0L2Jhc2ljL2luZGV4Lm1keCNnZW5lcmFsLWZpZWxkcylcbiAgICAgKiBmb3Igbm90ZXMgb24gX21ldGEgdXNhZ2UuXG4gICAgICovXG4gICAgX21ldGE6IHoub3B0aW9uYWwoei5vYmplY3Qoe30pLnBhc3N0aHJvdWdoKCkpLFxufSlcbiAgICAucGFzc3Rocm91Z2goKTtcbi8qKlxuICogQSB1bmlxdWVseSBpZGVudGlmeWluZyBJRCBmb3IgYSByZXF1ZXN0IGluIEpTT04tUlBDLlxuICovXG5leHBvcnQgY29uc3QgUmVxdWVzdElkU2NoZW1hID0gei51bmlvbihbei5zdHJpbmcoKSwgei5udW1iZXIoKS5pbnQoKV0pO1xuLyoqXG4gKiBBIHJlcXVlc3QgdGhhdCBleHBlY3RzIGEgcmVzcG9uc2UuXG4gKi9cbmV4cG9ydCBjb25zdCBKU09OUlBDUmVxdWVzdFNjaGVtYSA9IHpcbiAgICAub2JqZWN0KHtcbiAgICBqc29ucnBjOiB6LmxpdGVyYWwoSlNPTlJQQ19WRVJTSU9OKSxcbiAgICBpZDogUmVxdWVzdElkU2NoZW1hLFxufSlcbiAgICAubWVyZ2UoUmVxdWVzdFNjaGVtYSlcbiAgICAuc3RyaWN0KCk7XG5leHBvcnQgY29uc3QgaXNKU09OUlBDUmVxdWVzdCA9ICh2YWx1ZSkgPT4gSlNPTlJQQ1JlcXVlc3RTY2hlbWEuc2FmZVBhcnNlKHZhbHVlKS5zdWNjZXNzO1xuLyoqXG4gKiBBIG5vdGlmaWNhdGlvbiB3aGljaCBkb2VzIG5vdCBleHBlY3QgYSByZXNwb25zZS5cbiAqL1xuZXhwb3J0IGNvbnN0IEpTT05SUENOb3RpZmljYXRpb25TY2hlbWEgPSB6XG4gICAgLm9iamVjdCh7XG4gICAganNvbnJwYzogei5saXRlcmFsKEpTT05SUENfVkVSU0lPTiksXG59KVxuICAgIC5tZXJnZShOb3RpZmljYXRpb25TY2hlbWEpXG4gICAgLnN0cmljdCgpO1xuZXhwb3J0IGNvbnN0IGlzSlNPTlJQQ05vdGlmaWNhdGlvbiA9ICh2YWx1ZSkgPT4gSlNPTlJQQ05vdGlmaWNhdGlvblNjaGVtYS5zYWZlUGFyc2UodmFsdWUpLnN1Y2Nlc3M7XG4vKipcbiAqIEEgc3VjY2Vzc2Z1bCAobm9uLWVycm9yKSByZXNwb25zZSB0byBhIHJlcXVlc3QuXG4gKi9cbmV4cG9ydCBjb25zdCBKU09OUlBDUmVzcG9uc2VTY2hlbWEgPSB6XG4gICAgLm9iamVjdCh7XG4gICAganNvbnJwYzogei5saXRlcmFsKEpTT05SUENfVkVSU0lPTiksXG4gICAgaWQ6IFJlcXVlc3RJZFNjaGVtYSxcbiAgICByZXN1bHQ6IFJlc3VsdFNjaGVtYSxcbn0pXG4gICAgLnN0cmljdCgpO1xuZXhwb3J0IGNvbnN0IGlzSlNPTlJQQ1Jlc3BvbnNlID0gKHZhbHVlKSA9PiBKU09OUlBDUmVzcG9uc2VTY2hlbWEuc2FmZVBhcnNlKHZhbHVlKS5zdWNjZXNzO1xuLyoqXG4gKiBFcnJvciBjb2RlcyBkZWZpbmVkIGJ5IHRoZSBKU09OLVJQQyBzcGVjaWZpY2F0aW9uLlxuICovXG5leHBvcnQgdmFyIEVycm9yQ29kZTtcbihmdW5jdGlvbiAoRXJyb3JDb2RlKSB7XG4gICAgLy8gU0RLIGVycm9yIGNvZGVzXG4gICAgRXJyb3JDb2RlW0Vycm9yQ29kZVtcIkNvbm5lY3Rpb25DbG9zZWRcIl0gPSAtMzIwMDBdID0gXCJDb25uZWN0aW9uQ2xvc2VkXCI7XG4gICAgRXJyb3JDb2RlW0Vycm9yQ29kZVtcIlJlcXVlc3RUaW1lb3V0XCJdID0gLTMyMDAxXSA9IFwiUmVxdWVzdFRpbWVvdXRcIjtcbiAgICAvLyBTdGFuZGFyZCBKU09OLVJQQyBlcnJvciBjb2Rlc1xuICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJQYXJzZUVycm9yXCJdID0gLTMyNzAwXSA9IFwiUGFyc2VFcnJvclwiO1xuICAgIEVycm9yQ29kZVtFcnJvckNvZGVbXCJJbnZhbGlkUmVxdWVzdFwiXSA9IC0zMjYwMF0gPSBcIkludmFsaWRSZXF1ZXN0XCI7XG4gICAgRXJyb3JDb2RlW0Vycm9yQ29kZVtcIk1ldGhvZE5vdEZvdW5kXCJdID0gLTMyNjAxXSA9IFwiTWV0aG9kTm90Rm91bmRcIjtcbiAgICBFcnJvckNvZGVbRXJyb3JDb2RlW1wiSW52YWxpZFBhcmFtc1wiXSA9IC0zMjYwMl0gPSBcIkludmFsaWRQYXJhbXNcIjtcbiAgICBFcnJvckNvZGVbRXJyb3JDb2RlW1wiSW50ZXJuYWxFcnJvclwiXSA9IC0zMjYwM10gPSBcIkludGVybmFsRXJyb3JcIjtcbn0pKEVycm9yQ29kZSB8fCAoRXJyb3JDb2RlID0ge30pKTtcbi8qKlxuICogQSByZXNwb25zZSB0byBhIHJlcXVlc3QgdGhhdCBpbmRpY2F0ZXMgYW4gZXJyb3Igb2NjdXJyZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBKU09OUlBDRXJyb3JTY2hlbWEgPSB6XG4gICAgLm9iamVjdCh7XG4gICAganNvbnJwYzogei5saXRlcmFsKEpTT05SUENfVkVSU0lPTiksXG4gICAgaWQ6IFJlcXVlc3RJZFNjaGVtYSxcbiAgICBlcnJvcjogei5vYmplY3Qoe1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGVycm9yIHR5cGUgdGhhdCBvY2N1cnJlZC5cbiAgICAgICAgICovXG4gICAgICAgIGNvZGU6IHoubnVtYmVyKCkuaW50KCksXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvci4gVGhlIG1lc3NhZ2UgU0hPVUxEIGJlIGxpbWl0ZWQgdG8gYSBjb25jaXNlIHNpbmdsZSBzZW50ZW5jZS5cbiAgICAgICAgICovXG4gICAgICAgIG1lc3NhZ2U6IHouc3RyaW5nKCksXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBZGRpdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBlcnJvci4gVGhlIHZhbHVlIG9mIHRoaXMgbWVtYmVyIGlzIGRlZmluZWQgYnkgdGhlIHNlbmRlciAoZS5nLiBkZXRhaWxlZCBlcnJvciBpbmZvcm1hdGlvbiwgbmVzdGVkIGVycm9ycyBldGMuKS5cbiAgICAgICAgICovXG4gICAgICAgIGRhdGE6IHoub3B0aW9uYWwoei51bmtub3duKCkpLFxuICAgIH0pLFxufSlcbiAgICAuc3RyaWN0KCk7XG5leHBvcnQgY29uc3QgaXNKU09OUlBDRXJyb3IgPSAodmFsdWUpID0+IEpTT05SUENFcnJvclNjaGVtYS5zYWZlUGFyc2UodmFsdWUpLnN1Y2Nlc3M7XG5leHBvcnQgY29uc3QgSlNPTlJQQ01lc3NhZ2VTY2hlbWEgPSB6LnVuaW9uKFtcbiAgICBKU09OUlBDUmVxdWVzdFNjaGVtYSxcbiAgICBKU09OUlBDTm90aWZpY2F0aW9uU2NoZW1hLFxuICAgIEpTT05SUENSZXNwb25zZVNjaGVtYSxcbiAgICBKU09OUlBDRXJyb3JTY2hlbWEsXG5dKTtcbi8qIEVtcHR5IHJlc3VsdCAqL1xuLyoqXG4gKiBBIHJlc3BvbnNlIHRoYXQgaW5kaWNhdGVzIHN1Y2Nlc3MgYnV0IGNhcnJpZXMgbm8gZGF0YS5cbiAqL1xuZXhwb3J0IGNvbnN0IEVtcHR5UmVzdWx0U2NoZW1hID0gUmVzdWx0U2NoZW1hLnN0cmljdCgpO1xuLyogQ2FuY2VsbGF0aW9uICovXG4vKipcbiAqIFRoaXMgbm90aWZpY2F0aW9uIGNhbiBiZSBzZW50IGJ5IGVpdGhlciBzaWRlIHRvIGluZGljYXRlIHRoYXQgaXQgaXMgY2FuY2VsbGluZyBhIHByZXZpb3VzbHktaXNzdWVkIHJlcXVlc3QuXG4gKlxuICogVGhlIHJlcXVlc3QgU0hPVUxEIHN0aWxsIGJlIGluLWZsaWdodCwgYnV0IGR1ZSB0byBjb21tdW5pY2F0aW9uIGxhdGVuY3ksIGl0IGlzIGFsd2F5cyBwb3NzaWJsZSB0aGF0IHRoaXMgbm90aWZpY2F0aW9uIE1BWSBhcnJpdmUgYWZ0ZXIgdGhlIHJlcXVlc3QgaGFzIGFscmVhZHkgZmluaXNoZWQuXG4gKlxuICogVGhpcyBub3RpZmljYXRpb24gaW5kaWNhdGVzIHRoYXQgdGhlIHJlc3VsdCB3aWxsIGJlIHVudXNlZCwgc28gYW55IGFzc29jaWF0ZWQgcHJvY2Vzc2luZyBTSE9VTEQgY2Vhc2UuXG4gKlxuICogQSBjbGllbnQgTVVTVCBOT1QgYXR0ZW1wdCB0byBjYW5jZWwgaXRzIGBpbml0aWFsaXplYCByZXF1ZXN0LlxuICovXG5leHBvcnQgY29uc3QgQ2FuY2VsbGVkTm90aWZpY2F0aW9uU2NoZW1hID0gTm90aWZpY2F0aW9uU2NoZW1hLmV4dGVuZCh7XG4gICAgbWV0aG9kOiB6LmxpdGVyYWwoXCJub3RpZmljYXRpb25zL2NhbmNlbGxlZFwiKSxcbiAgICBwYXJhbXM6IEJhc2VOb3RpZmljYXRpb25QYXJhbXNTY2hlbWEuZXh0ZW5kKHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBJRCBvZiB0aGUgcmVxdWVzdCB0byBjYW5jZWwuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoaXMgTVVTVCBjb3JyZXNwb25kIHRvIHRoZSBJRCBvZiBhIHJlcXVlc3QgcHJldmlvdXNseSBpc3N1ZWQgaW4gdGhlIHNhbWUgZGlyZWN0aW9uLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVxdWVzdElkOiBSZXF1ZXN0SWRTY2hlbWEsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBvcHRpb25hbCBzdHJpbmcgZGVzY3JpYmluZyB0aGUgcmVhc29uIGZvciB0aGUgY2FuY2VsbGF0aW9uLiBUaGlzIE1BWSBiZSBsb2dnZWQgb3IgcHJlc2VudGVkIHRvIHRoZSB1c2VyLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVhc29uOiB6LnN0cmluZygpLm9wdGlvbmFsKCksXG4gICAgfSksXG59KTtcbi8qIEJhc2UgTWV0YWRhdGEgKi9cbi8qKlxuICogQmFzZSBtZXRhZGF0YSBpbnRlcmZhY2UgZm9yIGNvbW1vbiBwcm9wZXJ0aWVzIGFjcm9zcyByZXNvdXJjZXMsIHRvb2xzLCBwcm9tcHRzLCBhbmQgaW1wbGVtZW50YXRpb25zLlxuICovXG5leHBvcnQgY29uc3QgQmFzZU1ldGFkYXRhU2NoZW1hID0gelxuICAgIC5vYmplY3Qoe1xuICAgIC8qKiBJbnRlbmRlZCBmb3IgcHJvZ3JhbW1hdGljIG9yIGxvZ2ljYWwgdXNlLCBidXQgdXNlZCBhcyBhIGRpc3BsYXkgbmFtZSBpbiBwYXN0IHNwZWNzIG9yIGZhbGxiYWNrICovXG4gICAgbmFtZTogei5zdHJpbmcoKSxcbiAgICAvKipcbiAgICAqIEludGVuZGVkIGZvciBVSSBhbmQgZW5kLXVzZXIgY29udGV4dHMg4oCUIG9wdGltaXplZCB0byBiZSBodW1hbi1yZWFkYWJsZSBhbmQgZWFzaWx5IHVuZGVyc3Rvb2QsXG4gICAgKiBldmVuIGJ5IHRob3NlIHVuZmFtaWxpYXIgd2l0aCBkb21haW4tc3BlY2lmaWMgdGVybWlub2xvZ3kuXG4gICAgKlxuICAgICogSWYgbm90IHByb3ZpZGVkLCB0aGUgbmFtZSBzaG91bGQgYmUgdXNlZCBmb3IgZGlzcGxheSAoZXhjZXB0IGZvciBUb29sLFxuICAgICogd2hlcmUgYGFubm90YXRpb25zLnRpdGxlYCBzaG91bGQgYmUgZ2l2ZW4gcHJlY2VkZW5jZSBvdmVyIHVzaW5nIGBuYW1lYCxcbiAgICAqIGlmIHByZXNlbnQpLlxuICAgICovXG4gICAgdGl0bGU6IHoub3B0aW9uYWwoei5zdHJpbmcoKSksXG59KVxuICAgIC5wYXNzdGhyb3VnaCgpO1xuLyogSW5pdGlhbGl6YXRpb24gKi9cbi8qKlxuICogRGVzY3JpYmVzIHRoZSBuYW1lIGFuZCB2ZXJzaW9uIG9mIGFuIE1DUCBpbXBsZW1lbnRhdGlvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IEltcGxlbWVudGF0aW9uU2NoZW1hID0gQmFzZU1ldGFkYXRhU2NoZW1hLmV4dGVuZCh7XG4gICAgdmVyc2lvbjogei5zdHJpbmcoKSxcbn0pO1xuLyoqXG4gKiBDYXBhYmlsaXRpZXMgYSBjbGllbnQgbWF5IHN1cHBvcnQuIEtub3duIGNhcGFiaWxpdGllcyBhcmUgZGVmaW5lZCBoZXJlLCBpbiB0aGlzIHNjaGVtYSwgYnV0IHRoaXMgaXMgbm90IGEgY2xvc2VkIHNldDogYW55IGNsaWVudCBjYW4gZGVmaW5lIGl0cyBvd24sIGFkZGl0aW9uYWwgY2FwYWJpbGl0aWVzLlxuICovXG5leHBvcnQgY29uc3QgQ2xpZW50Q2FwYWJpbGl0aWVzU2NoZW1hID0gelxuICAgIC5vYmplY3Qoe1xuICAgIC8qKlxuICAgICAqIEV4cGVyaW1lbnRhbCwgbm9uLXN0YW5kYXJkIGNhcGFiaWxpdGllcyB0aGF0IHRoZSBjbGllbnQgc3VwcG9ydHMuXG4gICAgICovXG4gICAgZXhwZXJpbWVudGFsOiB6Lm9wdGlvbmFsKHoub2JqZWN0KHt9KS5wYXNzdGhyb3VnaCgpKSxcbiAgICAvKipcbiAgICAgKiBQcmVzZW50IGlmIHRoZSBjbGllbnQgc3VwcG9ydHMgc2FtcGxpbmcgZnJvbSBhbiBMTE0uXG4gICAgICovXG4gICAgc2FtcGxpbmc6IHoub3B0aW9uYWwoei5vYmplY3Qoe30pLnBhc3N0aHJvdWdoKCkpLFxuICAgIC8qKlxuICAgICAqIFByZXNlbnQgaWYgdGhlIGNsaWVudCBzdXBwb3J0cyBlbGljaXRpbmcgdXNlciBpbnB1dC5cbiAgICAgKi9cbiAgICBlbGljaXRhdGlvbjogei5vcHRpb25hbCh6Lm9iamVjdCh7fSkucGFzc3Rocm91Z2goKSksXG4gICAgLyoqXG4gICAgICogUHJlc2VudCBpZiB0aGUgY2xpZW50IHN1cHBvcnRzIGxpc3Rpbmcgcm9vdHMuXG4gICAgICovXG4gICAgcm9vdHM6IHoub3B0aW9uYWwoelxuICAgICAgICAub2JqZWN0KHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZXRoZXIgdGhlIGNsaWVudCBzdXBwb3J0cyBpc3N1aW5nIG5vdGlmaWNhdGlvbnMgZm9yIGNoYW5nZXMgdG8gdGhlIHJvb3RzIGxpc3QuXG4gICAgICAgICAqL1xuICAgICAgICBsaXN0Q2hhbmdlZDogei5vcHRpb25hbCh6LmJvb2xlYW4oKSksXG4gICAgfSlcbiAgICAgICAgLnBhc3N0aHJvdWdoKCkpLFxufSlcbiAgICAucGFzc3Rocm91Z2goKTtcbi8qKlxuICogVGhpcyByZXF1ZXN0IGlzIHNlbnQgZnJvbSB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXIgd2hlbiBpdCBmaXJzdCBjb25uZWN0cywgYXNraW5nIGl0IHRvIGJlZ2luIGluaXRpYWxpemF0aW9uLlxuICovXG5leHBvcnQgY29uc3QgSW5pdGlhbGl6ZVJlcXVlc3RTY2hlbWEgPSBSZXF1ZXN0U2NoZW1hLmV4dGVuZCh7XG4gICAgbWV0aG9kOiB6LmxpdGVyYWwoXCJpbml0aWFsaXplXCIpLFxuICAgIHBhcmFtczogQmFzZVJlcXVlc3RQYXJhbXNTY2hlbWEuZXh0ZW5kKHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBsYXRlc3QgdmVyc2lvbiBvZiB0aGUgTW9kZWwgQ29udGV4dCBQcm90b2NvbCB0aGF0IHRoZSBjbGllbnQgc3VwcG9ydHMuIFRoZSBjbGllbnQgTUFZIGRlY2lkZSB0byBzdXBwb3J0IG9sZGVyIHZlcnNpb25zIGFzIHdlbGwuXG4gICAgICAgICAqL1xuICAgICAgICBwcm90b2NvbFZlcnNpb246IHouc3RyaW5nKCksXG4gICAgICAgIGNhcGFiaWxpdGllczogQ2xpZW50Q2FwYWJpbGl0aWVzU2NoZW1hLFxuICAgICAgICBjbGllbnRJbmZvOiBJbXBsZW1lbnRhdGlvblNjaGVtYSxcbiAgICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IGlzSW5pdGlhbGl6ZVJlcXVlc3QgPSAodmFsdWUpID0+IEluaXRpYWxpemVSZXF1ZXN0U2NoZW1hLnNhZmVQYXJzZSh2YWx1ZSkuc3VjY2Vzcztcbi8qKlxuICogQ2FwYWJpbGl0aWVzIHRoYXQgYSBzZXJ2ZXIgbWF5IHN1cHBvcnQuIEtub3duIGNhcGFiaWxpdGllcyBhcmUgZGVmaW5lZCBoZXJlLCBpbiB0aGlzIHNjaGVtYSwgYnV0IHRoaXMgaXMgbm90IGEgY2xvc2VkIHNldDogYW55IHNlcnZlciBjYW4gZGVmaW5lIGl0cyBvd24sIGFkZGl0aW9uYWwgY2FwYWJpbGl0aWVzLlxuICovXG5leHBvcnQgY29uc3QgU2VydmVyQ2FwYWJpbGl0aWVzU2NoZW1hID0gelxuICAgIC5vYmplY3Qoe1xuICAgIC8qKlxuICAgICAqIEV4cGVyaW1lbnRhbCwgbm9uLXN0YW5kYXJkIGNhcGFiaWxpdGllcyB0aGF0IHRoZSBzZXJ2ZXIgc3VwcG9ydHMuXG4gICAgICovXG4gICAgZXhwZXJpbWVudGFsOiB6Lm9wdGlvbmFsKHoub2JqZWN0KHt9KS5wYXNzdGhyb3VnaCgpKSxcbiAgICAvKipcbiAgICAgKiBQcmVzZW50IGlmIHRoZSBzZXJ2ZXIgc3VwcG9ydHMgc2VuZGluZyBsb2cgbWVzc2FnZXMgdG8gdGhlIGNsaWVudC5cbiAgICAgKi9cbiAgICBsb2dnaW5nOiB6Lm9wdGlvbmFsKHoub2JqZWN0KHt9KS5wYXNzdGhyb3VnaCgpKSxcbiAgICAvKipcbiAgICAgKiBQcmVzZW50IGlmIHRoZSBzZXJ2ZXIgc3VwcG9ydHMgc2VuZGluZyBjb21wbGV0aW9ucyB0byB0aGUgY2xpZW50LlxuICAgICAqL1xuICAgIGNvbXBsZXRpb25zOiB6Lm9wdGlvbmFsKHoub2JqZWN0KHt9KS5wYXNzdGhyb3VnaCgpKSxcbiAgICAvKipcbiAgICAgKiBQcmVzZW50IGlmIHRoZSBzZXJ2ZXIgb2ZmZXJzIGFueSBwcm9tcHQgdGVtcGxhdGVzLlxuICAgICAqL1xuICAgIHByb21wdHM6IHoub3B0aW9uYWwoelxuICAgICAgICAub2JqZWN0KHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZXRoZXIgdGhpcyBzZXJ2ZXIgc3VwcG9ydHMgaXNzdWluZyBub3RpZmljYXRpb25zIGZvciBjaGFuZ2VzIHRvIHRoZSBwcm9tcHQgbGlzdC5cbiAgICAgICAgICovXG4gICAgICAgIGxpc3RDaGFuZ2VkOiB6Lm9wdGlvbmFsKHouYm9vbGVhbigpKSxcbiAgICB9KVxuICAgICAgICAucGFzc3Rocm91Z2goKSksXG4gICAgLyoqXG4gICAgICogUHJlc2VudCBpZiB0aGUgc2VydmVyIG9mZmVycyBhbnkgcmVzb3VyY2VzIHRvIHJlYWQuXG4gICAgICovXG4gICAgcmVzb3VyY2VzOiB6Lm9wdGlvbmFsKHpcbiAgICAgICAgLm9iamVjdCh7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIHRoaXMgc2VydmVyIHN1cHBvcnRzIGNsaWVudHMgc3Vic2NyaWJpbmcgdG8gcmVzb3VyY2UgdXBkYXRlcy5cbiAgICAgICAgICovXG4gICAgICAgIHN1YnNjcmliZTogei5vcHRpb25hbCh6LmJvb2xlYW4oKSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIHRoaXMgc2VydmVyIHN1cHBvcnRzIGlzc3Vpbmcgbm90aWZpY2F0aW9ucyBmb3IgY2hhbmdlcyB0byB0aGUgcmVzb3VyY2UgbGlzdC5cbiAgICAgICAgICovXG4gICAgICAgIGxpc3RDaGFuZ2VkOiB6Lm9wdGlvbmFsKHouYm9vbGVhbigpKSxcbiAgICB9KVxuICAgICAgICAucGFzc3Rocm91Z2goKSksXG4gICAgLyoqXG4gICAgICogUHJlc2VudCBpZiB0aGUgc2VydmVyIG9mZmVycyBhbnkgdG9vbHMgdG8gY2FsbC5cbiAgICAgKi9cbiAgICB0b29sczogei5vcHRpb25hbCh6XG4gICAgICAgIC5vYmplY3Qoe1xuICAgICAgICAvKipcbiAgICAgICAgICogV2hldGhlciB0aGlzIHNlcnZlciBzdXBwb3J0cyBpc3N1aW5nIG5vdGlmaWNhdGlvbnMgZm9yIGNoYW5nZXMgdG8gdGhlIHRvb2wgbGlzdC5cbiAgICAgICAgICovXG4gICAgICAgIGxpc3RDaGFuZ2VkOiB6Lm9wdGlvbmFsKHouYm9vbGVhbigpKSxcbiAgICB9KVxuICAgICAgICAucGFzc3Rocm91Z2goKSksXG59KVxuICAgIC5wYXNzdGhyb3VnaCgpO1xuLyoqXG4gKiBBZnRlciByZWNlaXZpbmcgYW4gaW5pdGlhbGl6ZSByZXF1ZXN0IGZyb20gdGhlIGNsaWVudCwgdGhlIHNlcnZlciBzZW5kcyB0aGlzIHJlc3BvbnNlLlxuICovXG5leHBvcnQgY29uc3QgSW5pdGlhbGl6ZVJlc3VsdFNjaGVtYSA9IFJlc3VsdFNjaGVtYS5leHRlbmQoe1xuICAgIC8qKlxuICAgICAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBNb2RlbCBDb250ZXh0IFByb3RvY29sIHRoYXQgdGhlIHNlcnZlciB3YW50cyB0byB1c2UuIFRoaXMgbWF5IG5vdCBtYXRjaCB0aGUgdmVyc2lvbiB0aGF0IHRoZSBjbGllbnQgcmVxdWVzdGVkLiBJZiB0aGUgY2xpZW50IGNhbm5vdCBzdXBwb3J0IHRoaXMgdmVyc2lvbiwgaXQgTVVTVCBkaXNjb25uZWN0LlxuICAgICAqL1xuICAgIHByb3RvY29sVmVyc2lvbjogei5zdHJpbmcoKSxcbiAgICBjYXBhYmlsaXRpZXM6IFNlcnZlckNhcGFiaWxpdGllc1NjaGVtYSxcbiAgICBzZXJ2ZXJJbmZvOiBJbXBsZW1lbnRhdGlvblNjaGVtYSxcbiAgICAvKipcbiAgICAgKiBJbnN0cnVjdGlvbnMgZGVzY3JpYmluZyBob3cgdG8gdXNlIHRoZSBzZXJ2ZXIgYW5kIGl0cyBmZWF0dXJlcy5cbiAgICAgKlxuICAgICAqIFRoaXMgY2FuIGJlIHVzZWQgYnkgY2xpZW50cyB0byBpbXByb3ZlIHRoZSBMTE0ncyB1bmRlcnN0YW5kaW5nIG9mIGF2YWlsYWJsZSB0b29scywgcmVzb3VyY2VzLCBldGMuIEl0IGNhbiBiZSB0aG91Z2h0IG9mIGxpa2UgYSBcImhpbnRcIiB0byB0aGUgbW9kZWwuIEZvciBleGFtcGxlLCB0aGlzIGluZm9ybWF0aW9uIE1BWSBiZSBhZGRlZCB0byB0aGUgc3lzdGVtIHByb21wdC5cbiAgICAgKi9cbiAgICBpbnN0cnVjdGlvbnM6IHoub3B0aW9uYWwoei5zdHJpbmcoKSksXG59KTtcbi8qKlxuICogVGhpcyBub3RpZmljYXRpb24gaXMgc2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciBhZnRlciBpbml0aWFsaXphdGlvbiBoYXMgZmluaXNoZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBJbml0aWFsaXplZE5vdGlmaWNhdGlvblNjaGVtYSA9IE5vdGlmaWNhdGlvblNjaGVtYS5leHRlbmQoe1xuICAgIG1ldGhvZDogei5saXRlcmFsKFwibm90aWZpY2F0aW9ucy9pbml0aWFsaXplZFwiKSxcbn0pO1xuZXhwb3J0IGNvbnN0IGlzSW5pdGlhbGl6ZWROb3RpZmljYXRpb24gPSAodmFsdWUpID0+IEluaXRpYWxpemVkTm90aWZpY2F0aW9uU2NoZW1hLnNhZmVQYXJzZSh2YWx1ZSkuc3VjY2Vzcztcbi8qIFBpbmcgKi9cbi8qKlxuICogQSBwaW5nLCBpc3N1ZWQgYnkgZWl0aGVyIHRoZSBzZXJ2ZXIgb3IgdGhlIGNsaWVudCwgdG8gY2hlY2sgdGhhdCB0aGUgb3RoZXIgcGFydHkgaXMgc3RpbGwgYWxpdmUuIFRoZSByZWNlaXZlciBtdXN0IHByb21wdGx5IHJlc3BvbmQsIG9yIGVsc2UgbWF5IGJlIGRpc2Nvbm5lY3RlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IFBpbmdSZXF1ZXN0U2NoZW1hID0gUmVxdWVzdFNjaGVtYS5leHRlbmQoe1xuICAgIG1ldGhvZDogei5saXRlcmFsKFwicGluZ1wiKSxcbn0pO1xuLyogUHJvZ3Jlc3Mgbm90aWZpY2F0aW9ucyAqL1xuZXhwb3J0IGNvbnN0IFByb2dyZXNzU2NoZW1hID0gelxuICAgIC5vYmplY3Qoe1xuICAgIC8qKlxuICAgICAqIFRoZSBwcm9ncmVzcyB0aHVzIGZhci4gVGhpcyBzaG91bGQgaW5jcmVhc2UgZXZlcnkgdGltZSBwcm9ncmVzcyBpcyBtYWRlLCBldmVuIGlmIHRoZSB0b3RhbCBpcyB1bmtub3duLlxuICAgICAqL1xuICAgIHByb2dyZXNzOiB6Lm51bWJlcigpLFxuICAgIC8qKlxuICAgICAqIFRvdGFsIG51bWJlciBvZiBpdGVtcyB0byBwcm9jZXNzIChvciB0b3RhbCBwcm9ncmVzcyByZXF1aXJlZCksIGlmIGtub3duLlxuICAgICAqL1xuICAgIHRvdGFsOiB6Lm9wdGlvbmFsKHoubnVtYmVyKCkpLFxuICAgIC8qKlxuICAgICAqIEFuIG9wdGlvbmFsIG1lc3NhZ2UgZGVzY3JpYmluZyB0aGUgY3VycmVudCBwcm9ncmVzcy5cbiAgICAgKi9cbiAgICBtZXNzYWdlOiB6Lm9wdGlvbmFsKHouc3RyaW5nKCkpLFxufSlcbiAgICAucGFzc3Rocm91Z2goKTtcbi8qKlxuICogQW4gb3V0LW9mLWJhbmQgbm90aWZpY2F0aW9uIHVzZWQgdG8gaW5mb3JtIHRoZSByZWNlaXZlciBvZiBhIHByb2dyZXNzIHVwZGF0ZSBmb3IgYSBsb25nLXJ1bm5pbmcgcmVxdWVzdC5cbiAqL1xuZXhwb3J0IGNvbnN0IFByb2dyZXNzTm90aWZpY2F0aW9uU2NoZW1hID0gTm90aWZpY2F0aW9uU2NoZW1hLmV4dGVuZCh7XG4gICAgbWV0aG9kOiB6LmxpdGVyYWwoXCJub3RpZmljYXRpb25zL3Byb2dyZXNzXCIpLFxuICAgIHBhcmFtczogQmFzZU5vdGlmaWNhdGlvblBhcmFtc1NjaGVtYS5tZXJnZShQcm9ncmVzc1NjaGVtYSkuZXh0ZW5kKHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBwcm9ncmVzcyB0b2tlbiB3aGljaCB3YXMgZ2l2ZW4gaW4gdGhlIGluaXRpYWwgcmVxdWVzdCwgdXNlZCB0byBhc3NvY2lhdGUgdGhpcyBub3RpZmljYXRpb24gd2l0aCB0aGUgcmVxdWVzdCB0aGF0IGlzIHByb2NlZWRpbmcuXG4gICAgICAgICAqL1xuICAgICAgICBwcm9ncmVzc1Rva2VuOiBQcm9ncmVzc1Rva2VuU2NoZW1hLFxuICAgIH0pLFxufSk7XG4vKiBQYWdpbmF0aW9uICovXG5leHBvcnQgY29uc3QgUGFnaW5hdGVkUmVxdWVzdFNjaGVtYSA9IFJlcXVlc3RTY2hlbWEuZXh0ZW5kKHtcbiAgICBwYXJhbXM6IEJhc2VSZXF1ZXN0UGFyYW1zU2NoZW1hLmV4dGVuZCh7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBvcGFxdWUgdG9rZW4gcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IHBhZ2luYXRpb24gcG9zaXRpb24uXG4gICAgICAgICAqIElmIHByb3ZpZGVkLCB0aGUgc2VydmVyIHNob3VsZCByZXR1cm4gcmVzdWx0cyBzdGFydGluZyBhZnRlciB0aGlzIGN1cnNvci5cbiAgICAgICAgICovXG4gICAgICAgIGN1cnNvcjogei5vcHRpb25hbChDdXJzb3JTY2hlbWEpLFxuICAgIH0pLm9wdGlvbmFsKCksXG59KTtcbmV4cG9ydCBjb25zdCBQYWdpbmF0ZWRSZXN1bHRTY2hlbWEgPSBSZXN1bHRTY2hlbWEuZXh0ZW5kKHtcbiAgICAvKipcbiAgICAgKiBBbiBvcGFxdWUgdG9rZW4gcmVwcmVzZW50aW5nIHRoZSBwYWdpbmF0aW9uIHBvc2l0aW9uIGFmdGVyIHRoZSBsYXN0IHJldHVybmVkIHJlc3VsdC5cbiAgICAgKiBJZiBwcmVzZW50LCB0aGVyZSBtYXkgYmUgbW9yZSByZXN1bHRzIGF2YWlsYWJsZS5cbiAgICAgKi9cbiAgICBuZXh0Q3Vyc29yOiB6Lm9wdGlvbmFsKEN1cnNvclNjaGVtYSksXG59KTtcbi8qIFJlc291cmNlcyAqL1xuLyoqXG4gKiBUaGUgY29udGVudHMgb2YgYSBzcGVjaWZpYyByZXNvdXJjZSBvciBzdWItcmVzb3VyY2UuXG4gKi9cbmV4cG9ydCBjb25zdCBSZXNvdXJjZUNvbnRlbnRzU2NoZW1hID0gelxuICAgIC5vYmplY3Qoe1xuICAgIC8qKlxuICAgICAqIFRoZSBVUkkgb2YgdGhpcyByZXNvdXJjZS5cbiAgICAgKi9cbiAgICB1cmk6IHouc3RyaW5nKCksXG4gICAgLyoqXG4gICAgICogVGhlIE1JTUUgdHlwZSBvZiB0aGlzIHJlc291cmNlLCBpZiBrbm93bi5cbiAgICAgKi9cbiAgICBtaW1lVHlwZTogei5vcHRpb25hbCh6LnN0cmluZygpKSxcbiAgICAvKipcbiAgICAgKiBTZWUgW01DUCBzcGVjaWZpY2F0aW9uXShodHRwczovL2dpdGh1Yi5jb20vbW9kZWxjb250ZXh0cHJvdG9jb2wvbW9kZWxjb250ZXh0cHJvdG9jb2wvYmxvYi80NzMzOWMwM2MxNDNiYjRlYzAxYTI2ZTcyMWExYjhmZTY2NjM0ZWJlL2RvY3Mvc3BlY2lmaWNhdGlvbi9kcmFmdC9iYXNpYy9pbmRleC5tZHgjZ2VuZXJhbC1maWVsZHMpXG4gICAgICogZm9yIG5vdGVzIG9uIF9tZXRhIHVzYWdlLlxuICAgICAqL1xuICAgIF9tZXRhOiB6Lm9wdGlvbmFsKHoub2JqZWN0KHt9KS5wYXNzdGhyb3VnaCgpKSxcbn0pXG4gICAgLnBhc3N0aHJvdWdoKCk7XG5leHBvcnQgY29uc3QgVGV4dFJlc291cmNlQ29udGVudHNTY2hlbWEgPSBSZXNvdXJjZUNvbnRlbnRzU2NoZW1hLmV4dGVuZCh7XG4gICAgLyoqXG4gICAgICogVGhlIHRleHQgb2YgdGhlIGl0ZW0uIFRoaXMgbXVzdCBvbmx5IGJlIHNldCBpZiB0aGUgaXRlbSBjYW4gYWN0dWFsbHkgYmUgcmVwcmVzZW50ZWQgYXMgdGV4dCAobm90IGJpbmFyeSBkYXRhKS5cbiAgICAgKi9cbiAgICB0ZXh0OiB6LnN0cmluZygpLFxufSk7XG4vKipcbiAqIEEgWm9kIHNjaGVtYSBmb3IgdmFsaWRhdGluZyBCYXNlNjQgc3RyaW5ncyB0aGF0IGlzIG1vcmUgcGVyZm9ybWFudCBhbmRcbiAqIHJvYnVzdCBmb3IgdmVyeSBsYXJnZSBpbnB1dHMgdGhhbiB0aGUgZGVmYXVsdCByZWdleC1iYXNlZCBjaGVjay4gSXQgYXZvaWRzXG4gKiBzdGFjayBvdmVyZmxvd3MgYnkgdXNpbmcgdGhlIG5hdGl2ZSBgYXRvYmAgZnVuY3Rpb24gZm9yIHZhbGlkYXRpb24uXG4gKi9cbmNvbnN0IEJhc2U2NFNjaGVtYSA9IHouc3RyaW5nKCkucmVmaW5lKCh2YWwpID0+IHtcbiAgICB0cnkge1xuICAgICAgICAvLyBhdG9iIHRocm93cyBhIERPTUV4Y2VwdGlvbiBpZiB0aGUgc3RyaW5nIGNvbnRhaW5zIGNoYXJhY3RlcnNcbiAgICAgICAgLy8gdGhhdCBhcmUgbm90IHBhcnQgb2YgdGhlIEJhc2U2NCBjaGFyYWN0ZXIgc2V0LlxuICAgICAgICBhdG9iKHZhbCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCAoX2EpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn0sIHsgbWVzc2FnZTogXCJJbnZhbGlkIEJhc2U2NCBzdHJpbmdcIiB9KTtcbmV4cG9ydCBjb25zdCBCbG9iUmVzb3VyY2VDb250ZW50c1NjaGVtYSA9IFJlc291cmNlQ29udGVudHNTY2hlbWEuZXh0ZW5kKHtcbiAgICAvKipcbiAgICAgKiBBIGJhc2U2NC1lbmNvZGVkIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGJpbmFyeSBkYXRhIG9mIHRoZSBpdGVtLlxuICAgICAqL1xuICAgIGJsb2I6IEJhc2U2NFNjaGVtYSxcbn0pO1xuLyoqXG4gKiBBIGtub3duIHJlc291cmNlIHRoYXQgdGhlIHNlcnZlciBpcyBjYXBhYmxlIG9mIHJlYWRpbmcuXG4gKi9cbmV4cG9ydCBjb25zdCBSZXNvdXJjZVNjaGVtYSA9IEJhc2VNZXRhZGF0YVNjaGVtYS5leHRlbmQoe1xuICAgIC8qKlxuICAgICAqIFRoZSBVUkkgb2YgdGhpcyByZXNvdXJjZS5cbiAgICAgKi9cbiAgICB1cmk6IHouc3RyaW5nKCksXG4gICAgLyoqXG4gICAgICogQSBkZXNjcmlwdGlvbiBvZiB3aGF0IHRoaXMgcmVzb3VyY2UgcmVwcmVzZW50cy5cbiAgICAgKlxuICAgICAqIFRoaXMgY2FuIGJlIHVzZWQgYnkgY2xpZW50cyB0byBpbXByb3ZlIHRoZSBMTE0ncyB1bmRlcnN0YW5kaW5nIG9mIGF2YWlsYWJsZSByZXNvdXJjZXMuIEl0IGNhbiBiZSB0aG91Z2h0IG9mIGxpa2UgYSBcImhpbnRcIiB0byB0aGUgbW9kZWwuXG4gICAgICovXG4gICAgZGVzY3JpcHRpb246IHoub3B0aW9uYWwoei5zdHJpbmcoKSksXG4gICAgLyoqXG4gICAgICogVGhlIE1JTUUgdHlwZSBvZiB0aGlzIHJlc291cmNlLCBpZiBrbm93bi5cbiAgICAgKi9cbiAgICBtaW1lVHlwZTogei5vcHRpb25hbCh6LnN0cmluZygpKSxcbiAgICAvKipcbiAgICAgKiBTZWUgW01DUCBzcGVjaWZpY2F0aW9uXShodHRwczovL2dpdGh1Yi5jb20vbW9kZWxjb250ZXh0cHJvdG9jb2wvbW9kZWxjb250ZXh0cHJvdG9jb2wvYmxvYi80NzMzOWMwM2MxNDNiYjRlYzAxYTI2ZTcyMWExYjhmZTY2NjM0ZWJlL2RvY3Mvc3BlY2lmaWNhdGlvbi9kcmFmdC9iYXNpYy9pbmRleC5tZHgjZ2VuZXJhbC1maWVsZHMpXG4gICAgICogZm9yIG5vdGVzIG9uIF9tZXRhIHVzYWdlLlxuICAgICAqL1xuICAgIF9tZXRhOiB6Lm9wdGlvbmFsKHoub2JqZWN0KHt9KS5wYXNzdGhyb3VnaCgpKSxcbn0pO1xuLyoqXG4gKiBBIHRlbXBsYXRlIGRlc2NyaXB0aW9uIGZvciByZXNvdXJjZXMgYXZhaWxhYmxlIG9uIHRoZSBzZXJ2ZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBSZXNvdXJjZVRlbXBsYXRlU2NoZW1hID0gQmFzZU1ldGFkYXRhU2NoZW1hLmV4dGVuZCh7XG4gICAgLyoqXG4gICAgICogQSBVUkkgdGVtcGxhdGUgKGFjY29yZGluZyB0byBSRkMgNjU3MCkgdGhhdCBjYW4gYmUgdXNlZCB0byBjb25zdHJ1Y3QgcmVzb3VyY2UgVVJJcy5cbiAgICAgKi9cbiAgICB1cmlUZW1wbGF0ZTogei5zdHJpbmcoKSxcbiAgICAvKipcbiAgICAgKiBBIGRlc2NyaXB0aW9uIG9mIHdoYXQgdGhpcyB0ZW1wbGF0ZSBpcyBmb3IuXG4gICAgICpcbiAgICAgKiBUaGlzIGNhbiBiZSB1c2VkIGJ5IGNsaWVudHMgdG8gaW1wcm92ZSB0aGUgTExNJ3MgdW5kZXJzdGFuZGluZyBvZiBhdmFpbGFibGUgcmVzb3VyY2VzLiBJdCBjYW4gYmUgdGhvdWdodCBvZiBsaWtlIGEgXCJoaW50XCIgdG8gdGhlIG1vZGVsLlxuICAgICAqL1xuICAgIGRlc2NyaXB0aW9uOiB6Lm9wdGlvbmFsKHouc3RyaW5nKCkpLFxuICAgIC8qKlxuICAgICAqIFRoZSBNSU1FIHR5cGUgZm9yIGFsbCByZXNvdXJjZXMgdGhhdCBtYXRjaCB0aGlzIHRlbXBsYXRlLiBUaGlzIHNob3VsZCBvbmx5IGJlIGluY2x1ZGVkIGlmIGFsbCByZXNvdXJjZXMgbWF0Y2hpbmcgdGhpcyB0ZW1wbGF0ZSBoYXZlIHRoZSBzYW1lIHR5cGUuXG4gICAgICovXG4gICAgbWltZVR5cGU6IHoub3B0aW9uYWwoei5zdHJpbmcoKSksXG4gICAgLyoqXG4gICAgICogU2VlIFtNQ1Agc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL21vZGVsY29udGV4dHByb3RvY29sL21vZGVsY29udGV4dHByb3RvY29sL2Jsb2IvNDczMzljMDNjMTQzYmI0ZWMwMWEyNmU3MjFhMWI4ZmU2NjYzNGViZS9kb2NzL3NwZWNpZmljYXRpb24vZHJhZnQvYmFzaWMvaW5kZXgubWR4I2dlbmVyYWwtZmllbGRzKVxuICAgICAqIGZvciBub3RlcyBvbiBfbWV0YSB1c2FnZS5cbiAgICAgKi9cbiAgICBfbWV0YTogei5vcHRpb25hbCh6Lm9iamVjdCh7fSkucGFzc3Rocm91Z2goKSksXG59KTtcbi8qKlxuICogU2VudCBmcm9tIHRoZSBjbGllbnQgdG8gcmVxdWVzdCBhIGxpc3Qgb2YgcmVzb3VyY2VzIHRoZSBzZXJ2ZXIgaGFzLlxuICovXG5leHBvcnQgY29uc3QgTGlzdFJlc291cmNlc1JlcXVlc3RTY2hlbWEgPSBQYWdpbmF0ZWRSZXF1ZXN0U2NoZW1hLmV4dGVuZCh7XG4gICAgbWV0aG9kOiB6LmxpdGVyYWwoXCJyZXNvdXJjZXMvbGlzdFwiKSxcbn0pO1xuLyoqXG4gKiBUaGUgc2VydmVyJ3MgcmVzcG9uc2UgdG8gYSByZXNvdXJjZXMvbGlzdCByZXF1ZXN0IGZyb20gdGhlIGNsaWVudC5cbiAqL1xuZXhwb3J0IGNvbnN0IExpc3RSZXNvdXJjZXNSZXN1bHRTY2hlbWEgPSBQYWdpbmF0ZWRSZXN1bHRTY2hlbWEuZXh0ZW5kKHtcbiAgICByZXNvdXJjZXM6IHouYXJyYXkoUmVzb3VyY2VTY2hlbWEpLFxufSk7XG4vKipcbiAqIFNlbnQgZnJvbSB0aGUgY2xpZW50IHRvIHJlcXVlc3QgYSBsaXN0IG9mIHJlc291cmNlIHRlbXBsYXRlcyB0aGUgc2VydmVyIGhhcy5cbiAqL1xuZXhwb3J0IGNvbnN0IExpc3RSZXNvdXJjZVRlbXBsYXRlc1JlcXVlc3RTY2hlbWEgPSBQYWdpbmF0ZWRSZXF1ZXN0U2NoZW1hLmV4dGVuZCh7XG4gICAgbWV0aG9kOiB6LmxpdGVyYWwoXCJyZXNvdXJjZXMvdGVtcGxhdGVzL2xpc3RcIiksXG59KTtcbi8qKlxuICogVGhlIHNlcnZlcidzIHJlc3BvbnNlIHRvIGEgcmVzb3VyY2VzL3RlbXBsYXRlcy9saXN0IHJlcXVlc3QgZnJvbSB0aGUgY2xpZW50LlxuICovXG5leHBvcnQgY29uc3QgTGlzdFJlc291cmNlVGVtcGxhdGVzUmVzdWx0U2NoZW1hID0gUGFnaW5hdGVkUmVzdWx0U2NoZW1hLmV4dGVuZCh7XG4gICAgcmVzb3VyY2VUZW1wbGF0ZXM6IHouYXJyYXkoUmVzb3VyY2VUZW1wbGF0ZVNjaGVtYSksXG59KTtcbi8qKlxuICogU2VudCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciwgdG8gcmVhZCBhIHNwZWNpZmljIHJlc291cmNlIFVSSS5cbiAqL1xuZXhwb3J0IGNvbnN0IFJlYWRSZXNvdXJjZVJlcXVlc3RTY2hlbWEgPSBSZXF1ZXN0U2NoZW1hLmV4dGVuZCh7XG4gICAgbWV0aG9kOiB6LmxpdGVyYWwoXCJyZXNvdXJjZXMvcmVhZFwiKSxcbiAgICBwYXJhbXM6IEJhc2VSZXF1ZXN0UGFyYW1zU2NoZW1hLmV4dGVuZCh7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgVVJJIG9mIHRoZSByZXNvdXJjZSB0byByZWFkLiBUaGUgVVJJIGNhbiB1c2UgYW55IHByb3RvY29sOyBpdCBpcyB1cCB0byB0aGUgc2VydmVyIGhvdyB0byBpbnRlcnByZXQgaXQuXG4gICAgICAgICAqL1xuICAgICAgICB1cmk6IHouc3RyaW5nKCksXG4gICAgfSksXG59KTtcbi8qKlxuICogVGhlIHNlcnZlcidzIHJlc3BvbnNlIHRvIGEgcmVzb3VyY2VzL3JlYWQgcmVxdWVzdCBmcm9tIHRoZSBjbGllbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBSZWFkUmVzb3VyY2VSZXN1bHRTY2hlbWEgPSBSZXN1bHRTY2hlbWEuZXh0ZW5kKHtcbiAgICBjb250ZW50czogei5hcnJheSh6LnVuaW9uKFtUZXh0UmVzb3VyY2VDb250ZW50c1NjaGVtYSwgQmxvYlJlc291cmNlQ29udGVudHNTY2hlbWFdKSksXG59KTtcbi8qKlxuICogQW4gb3B0aW9uYWwgbm90aWZpY2F0aW9uIGZyb20gdGhlIHNlcnZlciB0byB0aGUgY2xpZW50LCBpbmZvcm1pbmcgaXQgdGhhdCB0aGUgbGlzdCBvZiByZXNvdXJjZXMgaXQgY2FuIHJlYWQgZnJvbSBoYXMgY2hhbmdlZC4gVGhpcyBtYXkgYmUgaXNzdWVkIGJ5IHNlcnZlcnMgd2l0aG91dCBhbnkgcHJldmlvdXMgc3Vic2NyaXB0aW9uIGZyb20gdGhlIGNsaWVudC5cbiAqL1xuZXhwb3J0IGNvbnN0IFJlc291cmNlTGlzdENoYW5nZWROb3RpZmljYXRpb25TY2hlbWEgPSBOb3RpZmljYXRpb25TY2hlbWEuZXh0ZW5kKHtcbiAgICBtZXRob2Q6IHoubGl0ZXJhbChcIm5vdGlmaWNhdGlvbnMvcmVzb3VyY2VzL2xpc3RfY2hhbmdlZFwiKSxcbn0pO1xuLyoqXG4gKiBTZW50IGZyb20gdGhlIGNsaWVudCB0byByZXF1ZXN0IHJlc291cmNlcy91cGRhdGVkIG5vdGlmaWNhdGlvbnMgZnJvbSB0aGUgc2VydmVyIHdoZW5ldmVyIGEgcGFydGljdWxhciByZXNvdXJjZSBjaGFuZ2VzLlxuICovXG5leHBvcnQgY29uc3QgU3Vic2NyaWJlUmVxdWVzdFNjaGVtYSA9IFJlcXVlc3RTY2hlbWEuZXh0ZW5kKHtcbiAgICBtZXRob2Q6IHoubGl0ZXJhbChcInJlc291cmNlcy9zdWJzY3JpYmVcIiksXG4gICAgcGFyYW1zOiBCYXNlUmVxdWVzdFBhcmFtc1NjaGVtYS5leHRlbmQoe1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIFVSSSBvZiB0aGUgcmVzb3VyY2UgdG8gc3Vic2NyaWJlIHRvLiBUaGUgVVJJIGNhbiB1c2UgYW55IHByb3RvY29sOyBpdCBpcyB1cCB0byB0aGUgc2VydmVyIGhvdyB0byBpbnRlcnByZXQgaXQuXG4gICAgICAgICAqL1xuICAgICAgICB1cmk6IHouc3RyaW5nKCksXG4gICAgfSksXG59KTtcbi8qKlxuICogU2VudCBmcm9tIHRoZSBjbGllbnQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgcmVzb3VyY2VzL3VwZGF0ZWQgbm90aWZpY2F0aW9ucyBmcm9tIHRoZSBzZXJ2ZXIuIFRoaXMgc2hvdWxkIGZvbGxvdyBhIHByZXZpb3VzIHJlc291cmNlcy9zdWJzY3JpYmUgcmVxdWVzdC5cbiAqL1xuZXhwb3J0IGNvbnN0IFVuc3Vic2NyaWJlUmVxdWVzdFNjaGVtYSA9IFJlcXVlc3RTY2hlbWEuZXh0ZW5kKHtcbiAgICBtZXRob2Q6IHoubGl0ZXJhbChcInJlc291cmNlcy91bnN1YnNjcmliZVwiKSxcbiAgICBwYXJhbXM6IEJhc2VSZXF1ZXN0UGFyYW1zU2NoZW1hLmV4dGVuZCh7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgVVJJIG9mIHRoZSByZXNvdXJjZSB0byB1bnN1YnNjcmliZSBmcm9tLlxuICAgICAgICAgKi9cbiAgICAgICAgdXJpOiB6LnN0cmluZygpLFxuICAgIH0pLFxufSk7XG4vKipcbiAqIEEgbm90aWZpY2F0aW9uIGZyb20gdGhlIHNlcnZlciB0byB0aGUgY2xpZW50LCBpbmZvcm1pbmcgaXQgdGhhdCBhIHJlc291cmNlIGhhcyBjaGFuZ2VkIGFuZCBtYXkgbmVlZCB0byBiZSByZWFkIGFnYWluLiBUaGlzIHNob3VsZCBvbmx5IGJlIHNlbnQgaWYgdGhlIGNsaWVudCBwcmV2aW91c2x5IHNlbnQgYSByZXNvdXJjZXMvc3Vic2NyaWJlIHJlcXVlc3QuXG4gKi9cbmV4cG9ydCBjb25zdCBSZXNvdXJjZVVwZGF0ZWROb3RpZmljYXRpb25TY2hlbWEgPSBOb3RpZmljYXRpb25TY2hlbWEuZXh0ZW5kKHtcbiAgICBtZXRob2Q6IHoubGl0ZXJhbChcIm5vdGlmaWNhdGlvbnMvcmVzb3VyY2VzL3VwZGF0ZWRcIiksXG4gICAgcGFyYW1zOiBCYXNlTm90aWZpY2F0aW9uUGFyYW1zU2NoZW1hLmV4dGVuZCh7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgVVJJIG9mIHRoZSByZXNvdXJjZSB0aGF0IGhhcyBiZWVuIHVwZGF0ZWQuIFRoaXMgbWlnaHQgYmUgYSBzdWItcmVzb3VyY2Ugb2YgdGhlIG9uZSB0aGF0IHRoZSBjbGllbnQgYWN0dWFsbHkgc3Vic2NyaWJlZCB0by5cbiAgICAgICAgICovXG4gICAgICAgIHVyaTogei5zdHJpbmcoKSxcbiAgICB9KSxcbn0pO1xuLyogUHJvbXB0cyAqL1xuLyoqXG4gKiBEZXNjcmliZXMgYW4gYXJndW1lbnQgdGhhdCBhIHByb21wdCBjYW4gYWNjZXB0LlxuICovXG5leHBvcnQgY29uc3QgUHJvbXB0QXJndW1lbnRTY2hlbWEgPSB6XG4gICAgLm9iamVjdCh7XG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGFyZ3VtZW50LlxuICAgICAqL1xuICAgIG5hbWU6IHouc3RyaW5nKCksXG4gICAgLyoqXG4gICAgICogQSBodW1hbi1yZWFkYWJsZSBkZXNjcmlwdGlvbiBvZiB0aGUgYXJndW1lbnQuXG4gICAgICovXG4gICAgZGVzY3JpcHRpb246IHoub3B0aW9uYWwoei5zdHJpbmcoKSksXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0aGlzIGFyZ3VtZW50IG11c3QgYmUgcHJvdmlkZWQuXG4gICAgICovXG4gICAgcmVxdWlyZWQ6IHoub3B0aW9uYWwoei5ib29sZWFuKCkpLFxufSlcbiAgICAucGFzc3Rocm91Z2goKTtcbi8qKlxuICogQSBwcm9tcHQgb3IgcHJvbXB0IHRlbXBsYXRlIHRoYXQgdGhlIHNlcnZlciBvZmZlcnMuXG4gKi9cbmV4cG9ydCBjb25zdCBQcm9tcHRTY2hlbWEgPSBCYXNlTWV0YWRhdGFTY2hlbWEuZXh0ZW5kKHtcbiAgICAvKipcbiAgICAgKiBBbiBvcHRpb25hbCBkZXNjcmlwdGlvbiBvZiB3aGF0IHRoaXMgcHJvbXB0IHByb3ZpZGVzXG4gICAgICovXG4gICAgZGVzY3JpcHRpb246IHoub3B0aW9uYWwoei5zdHJpbmcoKSksXG4gICAgLyoqXG4gICAgICogQSBsaXN0IG9mIGFyZ3VtZW50cyB0byB1c2UgZm9yIHRlbXBsYXRpbmcgdGhlIHByb21wdC5cbiAgICAgKi9cbiAgICBhcmd1bWVudHM6IHoub3B0aW9uYWwoei5hcnJheShQcm9tcHRBcmd1bWVudFNjaGVtYSkpLFxuICAgIC8qKlxuICAgICAqIFNlZSBbTUNQIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9tb2RlbGNvbnRleHRwcm90b2NvbC9tb2RlbGNvbnRleHRwcm90b2NvbC9ibG9iLzQ3MzM5YzAzYzE0M2JiNGVjMDFhMjZlNzIxYTFiOGZlNjY2MzRlYmUvZG9jcy9zcGVjaWZpY2F0aW9uL2RyYWZ0L2Jhc2ljL2luZGV4Lm1keCNnZW5lcmFsLWZpZWxkcylcbiAgICAgKiBmb3Igbm90ZXMgb24gX21ldGEgdXNhZ2UuXG4gICAgICovXG4gICAgX21ldGE6IHoub3B0aW9uYWwoei5vYmplY3Qoe30pLnBhc3N0aHJvdWdoKCkpLFxufSk7XG4vKipcbiAqIFNlbnQgZnJvbSB0aGUgY2xpZW50IHRvIHJlcXVlc3QgYSBsaXN0IG9mIHByb21wdHMgYW5kIHByb21wdCB0ZW1wbGF0ZXMgdGhlIHNlcnZlciBoYXMuXG4gKi9cbmV4cG9ydCBjb25zdCBMaXN0UHJvbXB0c1JlcXVlc3RTY2hlbWEgPSBQYWdpbmF0ZWRSZXF1ZXN0U2NoZW1hLmV4dGVuZCh7XG4gICAgbWV0aG9kOiB6LmxpdGVyYWwoXCJwcm9tcHRzL2xpc3RcIiksXG59KTtcbi8qKlxuICogVGhlIHNlcnZlcidzIHJlc3BvbnNlIHRvIGEgcHJvbXB0cy9saXN0IHJlcXVlc3QgZnJvbSB0aGUgY2xpZW50LlxuICovXG5leHBvcnQgY29uc3QgTGlzdFByb21wdHNSZXN1bHRTY2hlbWEgPSBQYWdpbmF0ZWRSZXN1bHRTY2hlbWEuZXh0ZW5kKHtcbiAgICBwcm9tcHRzOiB6LmFycmF5KFByb21wdFNjaGVtYSksXG59KTtcbi8qKlxuICogVXNlZCBieSB0aGUgY2xpZW50IHRvIGdldCBhIHByb21wdCBwcm92aWRlZCBieSB0aGUgc2VydmVyLlxuICovXG5leHBvcnQgY29uc3QgR2V0UHJvbXB0UmVxdWVzdFNjaGVtYSA9IFJlcXVlc3RTY2hlbWEuZXh0ZW5kKHtcbiAgICBtZXRob2Q6IHoubGl0ZXJhbChcInByb21wdHMvZ2V0XCIpLFxuICAgIHBhcmFtczogQmFzZVJlcXVlc3RQYXJhbXNTY2hlbWEuZXh0ZW5kKHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBuYW1lIG9mIHRoZSBwcm9tcHQgb3IgcHJvbXB0IHRlbXBsYXRlLlxuICAgICAgICAgKi9cbiAgICAgICAgbmFtZTogei5zdHJpbmcoKSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFyZ3VtZW50cyB0byB1c2UgZm9yIHRlbXBsYXRpbmcgdGhlIHByb21wdC5cbiAgICAgICAgICovXG4gICAgICAgIGFyZ3VtZW50czogei5vcHRpb25hbCh6LnJlY29yZCh6LnN0cmluZygpKSksXG4gICAgfSksXG59KTtcbi8qKlxuICogVGV4dCBwcm92aWRlZCB0byBvciBmcm9tIGFuIExMTS5cbiAqL1xuZXhwb3J0IGNvbnN0IFRleHRDb250ZW50U2NoZW1hID0gelxuICAgIC5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbChcInRleHRcIiksXG4gICAgLyoqXG4gICAgICogVGhlIHRleHQgY29udGVudCBvZiB0aGUgbWVzc2FnZS5cbiAgICAgKi9cbiAgICB0ZXh0OiB6LnN0cmluZygpLFxuICAgIC8qKlxuICAgICAqIFNlZSBbTUNQIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9tb2RlbGNvbnRleHRwcm90b2NvbC9tb2RlbGNvbnRleHRwcm90b2NvbC9ibG9iLzQ3MzM5YzAzYzE0M2JiNGVjMDFhMjZlNzIxYTFiOGZlNjY2MzRlYmUvZG9jcy9zcGVjaWZpY2F0aW9uL2RyYWZ0L2Jhc2ljL2luZGV4Lm1keCNnZW5lcmFsLWZpZWxkcylcbiAgICAgKiBmb3Igbm90ZXMgb24gX21ldGEgdXNhZ2UuXG4gICAgICovXG4gICAgX21ldGE6IHoub3B0aW9uYWwoei5vYmplY3Qoe30pLnBhc3N0aHJvdWdoKCkpLFxufSlcbiAgICAucGFzc3Rocm91Z2goKTtcbi8qKlxuICogQW4gaW1hZ2UgcHJvdmlkZWQgdG8gb3IgZnJvbSBhbiBMTE0uXG4gKi9cbmV4cG9ydCBjb25zdCBJbWFnZUNvbnRlbnRTY2hlbWEgPSB6XG4gICAgLm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKFwiaW1hZ2VcIiksXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2U2NC1lbmNvZGVkIGltYWdlIGRhdGEuXG4gICAgICovXG4gICAgZGF0YTogQmFzZTY0U2NoZW1hLFxuICAgIC8qKlxuICAgICAqIFRoZSBNSU1FIHR5cGUgb2YgdGhlIGltYWdlLiBEaWZmZXJlbnQgcHJvdmlkZXJzIG1heSBzdXBwb3J0IGRpZmZlcmVudCBpbWFnZSB0eXBlcy5cbiAgICAgKi9cbiAgICBtaW1lVHlwZTogei5zdHJpbmcoKSxcbiAgICAvKipcbiAgICAgKiBTZWUgW01DUCBzcGVjaWZpY2F0aW9uXShodHRwczovL2dpdGh1Yi5jb20vbW9kZWxjb250ZXh0cHJvdG9jb2wvbW9kZWxjb250ZXh0cHJvdG9jb2wvYmxvYi80NzMzOWMwM2MxNDNiYjRlYzAxYTI2ZTcyMWExYjhmZTY2NjM0ZWJlL2RvY3Mvc3BlY2lmaWNhdGlvbi9kcmFmdC9iYXNpYy9pbmRleC5tZHgjZ2VuZXJhbC1maWVsZHMpXG4gICAgICogZm9yIG5vdGVzIG9uIF9tZXRhIHVzYWdlLlxuICAgICAqL1xuICAgIF9tZXRhOiB6Lm9wdGlvbmFsKHoub2JqZWN0KHt9KS5wYXNzdGhyb3VnaCgpKSxcbn0pXG4gICAgLnBhc3N0aHJvdWdoKCk7XG4vKipcbiAqIEFuIEF1ZGlvIHByb3ZpZGVkIHRvIG9yIGZyb20gYW4gTExNLlxuICovXG5leHBvcnQgY29uc3QgQXVkaW9Db250ZW50U2NoZW1hID0gelxuICAgIC5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbChcImF1ZGlvXCIpLFxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlNjQtZW5jb2RlZCBhdWRpbyBkYXRhLlxuICAgICAqL1xuICAgIGRhdGE6IEJhc2U2NFNjaGVtYSxcbiAgICAvKipcbiAgICAgKiBUaGUgTUlNRSB0eXBlIG9mIHRoZSBhdWRpby4gRGlmZmVyZW50IHByb3ZpZGVycyBtYXkgc3VwcG9ydCBkaWZmZXJlbnQgYXVkaW8gdHlwZXMuXG4gICAgICovXG4gICAgbWltZVR5cGU6IHouc3RyaW5nKCksXG4gICAgLyoqXG4gICAgICogU2VlIFtNQ1Agc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL21vZGVsY29udGV4dHByb3RvY29sL21vZGVsY29udGV4dHByb3RvY29sL2Jsb2IvNDczMzljMDNjMTQzYmI0ZWMwMWEyNmU3MjFhMWI4ZmU2NjYzNGViZS9kb2NzL3NwZWNpZmljYXRpb24vZHJhZnQvYmFzaWMvaW5kZXgubWR4I2dlbmVyYWwtZmllbGRzKVxuICAgICAqIGZvciBub3RlcyBvbiBfbWV0YSB1c2FnZS5cbiAgICAgKi9cbiAgICBfbWV0YTogei5vcHRpb25hbCh6Lm9iamVjdCh7fSkucGFzc3Rocm91Z2goKSksXG59KVxuICAgIC5wYXNzdGhyb3VnaCgpO1xuLyoqXG4gKiBUaGUgY29udGVudHMgb2YgYSByZXNvdXJjZSwgZW1iZWRkZWQgaW50byBhIHByb21wdCBvciB0b29sIGNhbGwgcmVzdWx0LlxuICovXG5leHBvcnQgY29uc3QgRW1iZWRkZWRSZXNvdXJjZVNjaGVtYSA9IHpcbiAgICAub2JqZWN0KHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoXCJyZXNvdXJjZVwiKSxcbiAgICByZXNvdXJjZTogei51bmlvbihbVGV4dFJlc291cmNlQ29udGVudHNTY2hlbWEsIEJsb2JSZXNvdXJjZUNvbnRlbnRzU2NoZW1hXSksXG4gICAgLyoqXG4gICAgICogU2VlIFtNQ1Agc3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly9naXRodWIuY29tL21vZGVsY29udGV4dHByb3RvY29sL21vZGVsY29udGV4dHByb3RvY29sL2Jsb2IvNDczMzljMDNjMTQzYmI0ZWMwMWEyNmU3MjFhMWI4ZmU2NjYzNGViZS9kb2NzL3NwZWNpZmljYXRpb24vZHJhZnQvYmFzaWMvaW5kZXgubWR4I2dlbmVyYWwtZmllbGRzKVxuICAgICAqIGZvciBub3RlcyBvbiBfbWV0YSB1c2FnZS5cbiAgICAgKi9cbiAgICBfbWV0YTogei5vcHRpb25hbCh6Lm9iamVjdCh7fSkucGFzc3Rocm91Z2goKSksXG59KVxuICAgIC5wYXNzdGhyb3VnaCgpO1xuLyoqXG4gKiBBIHJlc291cmNlIHRoYXQgdGhlIHNlcnZlciBpcyBjYXBhYmxlIG9mIHJlYWRpbmcsIGluY2x1ZGVkIGluIGEgcHJvbXB0IG9yIHRvb2wgY2FsbCByZXN1bHQuXG4gKlxuICogTm90ZTogcmVzb3VyY2UgbGlua3MgcmV0dXJuZWQgYnkgdG9vbHMgYXJlIG5vdCBndWFyYW50ZWVkIHRvIGFwcGVhciBpbiB0aGUgcmVzdWx0cyBvZiBgcmVzb3VyY2VzL2xpc3RgIHJlcXVlc3RzLlxuICovXG5leHBvcnQgY29uc3QgUmVzb3VyY2VMaW5rU2NoZW1hID0gUmVzb3VyY2VTY2hlbWEuZXh0ZW5kKHtcbiAgICB0eXBlOiB6LmxpdGVyYWwoXCJyZXNvdXJjZV9saW5rXCIpLFxufSk7XG4vKipcbiAqIEEgY29udGVudCBibG9jayB0aGF0IGNhbiBiZSB1c2VkIGluIHByb21wdHMgYW5kIHRvb2wgcmVzdWx0cy5cbiAqL1xuZXhwb3J0IGNvbnN0IENvbnRlbnRCbG9ja1NjaGVtYSA9IHoudW5pb24oW1xuICAgIFRleHRDb250ZW50U2NoZW1hLFxuICAgIEltYWdlQ29udGVudFNjaGVtYSxcbiAgICBBdWRpb0NvbnRlbnRTY2hlbWEsXG4gICAgUmVzb3VyY2VMaW5rU2NoZW1hLFxuICAgIEVtYmVkZGVkUmVzb3VyY2VTY2hlbWEsXG5dKTtcbi8qKlxuICogRGVzY3JpYmVzIGEgbWVzc2FnZSByZXR1cm5lZCBhcyBwYXJ0IG9mIGEgcHJvbXB0LlxuICovXG5leHBvcnQgY29uc3QgUHJvbXB0TWVzc2FnZVNjaGVtYSA9IHpcbiAgICAub2JqZWN0KHtcbiAgICByb2xlOiB6LmVudW0oW1widXNlclwiLCBcImFzc2lzdGFudFwiXSksXG4gICAgY29udGVudDogQ29udGVudEJsb2NrU2NoZW1hLFxufSlcbiAgICAucGFzc3Rocm91Z2goKTtcbi8qKlxuICogVGhlIHNlcnZlcidzIHJlc3BvbnNlIHRvIGEgcHJvbXB0cy9nZXQgcmVxdWVzdCBmcm9tIHRoZSBjbGllbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBHZXRQcm9tcHRSZXN1bHRTY2hlbWEgPSBSZXN1bHRTY2hlbWEuZXh0ZW5kKHtcbiAgICAvKipcbiAgICAgKiBBbiBvcHRpb25hbCBkZXNjcmlwdGlvbiBmb3IgdGhlIHByb21wdC5cbiAgICAgKi9cbiAgICBkZXNjcmlwdGlvbjogei5vcHRpb25hbCh6LnN0cmluZygpKSxcbiAgICBtZXNzYWdlczogei5hcnJheShQcm9tcHRNZXNzYWdlU2NoZW1hKSxcbn0pO1xuLyoqXG4gKiBBbiBvcHRpb25hbCBub3RpZmljYXRpb24gZnJvbSB0aGUgc2VydmVyIHRvIHRoZSBjbGllbnQsIGluZm9ybWluZyBpdCB0aGF0IHRoZSBsaXN0IG9mIHByb21wdHMgaXQgb2ZmZXJzIGhhcyBjaGFuZ2VkLiBUaGlzIG1heSBiZSBpc3N1ZWQgYnkgc2VydmVycyB3aXRob3V0IGFueSBwcmV2aW91cyBzdWJzY3JpcHRpb24gZnJvbSB0aGUgY2xpZW50LlxuICovXG5leHBvcnQgY29uc3QgUHJvbXB0TGlzdENoYW5nZWROb3RpZmljYXRpb25TY2hlbWEgPSBOb3RpZmljYXRpb25TY2hlbWEuZXh0ZW5kKHtcbiAgICBtZXRob2Q6IHoubGl0ZXJhbChcIm5vdGlmaWNhdGlvbnMvcHJvbXB0cy9saXN0X2NoYW5nZWRcIiksXG59KTtcbi8qIFRvb2xzICovXG4vKipcbiAqIEFkZGl0aW9uYWwgcHJvcGVydGllcyBkZXNjcmliaW5nIGEgVG9vbCB0byBjbGllbnRzLlxuICpcbiAqIE5PVEU6IGFsbCBwcm9wZXJ0aWVzIGluIFRvb2xBbm5vdGF0aW9ucyBhcmUgKipoaW50cyoqLlxuICogVGhleSBhcmUgbm90IGd1YXJhbnRlZWQgdG8gcHJvdmlkZSBhIGZhaXRoZnVsIGRlc2NyaXB0aW9uIG9mXG4gKiB0b29sIGJlaGF2aW9yIChpbmNsdWRpbmcgZGVzY3JpcHRpdmUgcHJvcGVydGllcyBsaWtlIGB0aXRsZWApLlxuICpcbiAqIENsaWVudHMgc2hvdWxkIG5ldmVyIG1ha2UgdG9vbCB1c2UgZGVjaXNpb25zIGJhc2VkIG9uIFRvb2xBbm5vdGF0aW9uc1xuICogcmVjZWl2ZWQgZnJvbSB1bnRydXN0ZWQgc2VydmVycy5cbiAqL1xuZXhwb3J0IGNvbnN0IFRvb2xBbm5vdGF0aW9uc1NjaGVtYSA9IHpcbiAgICAub2JqZWN0KHtcbiAgICAvKipcbiAgICAgKiBBIGh1bWFuLXJlYWRhYmxlIHRpdGxlIGZvciB0aGUgdG9vbC5cbiAgICAgKi9cbiAgICB0aXRsZTogei5vcHRpb25hbCh6LnN0cmluZygpKSxcbiAgICAvKipcbiAgICAgKiBJZiB0cnVlLCB0aGUgdG9vbCBkb2VzIG5vdCBtb2RpZnkgaXRzIGVudmlyb25tZW50LlxuICAgICAqXG4gICAgICogRGVmYXVsdDogZmFsc2VcbiAgICAgKi9cbiAgICByZWFkT25seUhpbnQ6IHoub3B0aW9uYWwoei5ib29sZWFuKCkpLFxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIHRoZSB0b29sIG1heSBwZXJmb3JtIGRlc3RydWN0aXZlIHVwZGF0ZXMgdG8gaXRzIGVudmlyb25tZW50LlxuICAgICAqIElmIGZhbHNlLCB0aGUgdG9vbCBwZXJmb3JtcyBvbmx5IGFkZGl0aXZlIHVwZGF0ZXMuXG4gICAgICpcbiAgICAgKiAoVGhpcyBwcm9wZXJ0eSBpcyBtZWFuaW5nZnVsIG9ubHkgd2hlbiBgcmVhZE9ubHlIaW50ID09IGZhbHNlYClcbiAgICAgKlxuICAgICAqIERlZmF1bHQ6IHRydWVcbiAgICAgKi9cbiAgICBkZXN0cnVjdGl2ZUhpbnQ6IHoub3B0aW9uYWwoei5ib29sZWFuKCkpLFxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIGNhbGxpbmcgdGhlIHRvb2wgcmVwZWF0ZWRseSB3aXRoIHRoZSBzYW1lIGFyZ3VtZW50c1xuICAgICAqIHdpbGwgaGF2ZSBubyBhZGRpdGlvbmFsIGVmZmVjdCBvbiB0aGUgaXRzIGVudmlyb25tZW50LlxuICAgICAqXG4gICAgICogKFRoaXMgcHJvcGVydHkgaXMgbWVhbmluZ2Z1bCBvbmx5IHdoZW4gYHJlYWRPbmx5SGludCA9PSBmYWxzZWApXG4gICAgICpcbiAgICAgKiBEZWZhdWx0OiBmYWxzZVxuICAgICAqL1xuICAgIGlkZW1wb3RlbnRIaW50OiB6Lm9wdGlvbmFsKHouYm9vbGVhbigpKSxcbiAgICAvKipcbiAgICAgKiBJZiB0cnVlLCB0aGlzIHRvb2wgbWF5IGludGVyYWN0IHdpdGggYW4gXCJvcGVuIHdvcmxkXCIgb2YgZXh0ZXJuYWxcbiAgICAgKiBlbnRpdGllcy4gSWYgZmFsc2UsIHRoZSB0b29sJ3MgZG9tYWluIG9mIGludGVyYWN0aW9uIGlzIGNsb3NlZC5cbiAgICAgKiBGb3IgZXhhbXBsZSwgdGhlIHdvcmxkIG9mIGEgd2ViIHNlYXJjaCB0b29sIGlzIG9wZW4sIHdoZXJlYXMgdGhhdFxuICAgICAqIG9mIGEgbWVtb3J5IHRvb2wgaXMgbm90LlxuICAgICAqXG4gICAgICogRGVmYXVsdDogdHJ1ZVxuICAgICAqL1xuICAgIG9wZW5Xb3JsZEhpbnQ6IHoub3B0aW9uYWwoei5ib29sZWFuKCkpLFxufSlcbiAgICAucGFzc3Rocm91Z2goKTtcbi8qKlxuICogRGVmaW5pdGlvbiBmb3IgYSB0b29sIHRoZSBjbGllbnQgY2FuIGNhbGwuXG4gKi9cbmV4cG9ydCBjb25zdCBUb29sU2NoZW1hID0gQmFzZU1ldGFkYXRhU2NoZW1hLmV4dGVuZCh7XG4gICAgLyoqXG4gICAgICogQSBodW1hbi1yZWFkYWJsZSBkZXNjcmlwdGlvbiBvZiB0aGUgdG9vbC5cbiAgICAgKi9cbiAgICBkZXNjcmlwdGlvbjogei5vcHRpb25hbCh6LnN0cmluZygpKSxcbiAgICAvKipcbiAgICAgKiBBIEpTT04gU2NoZW1hIG9iamVjdCBkZWZpbmluZyB0aGUgZXhwZWN0ZWQgcGFyYW1ldGVycyBmb3IgdGhlIHRvb2wuXG4gICAgICovXG4gICAgaW5wdXRTY2hlbWE6IHpcbiAgICAgICAgLm9iamVjdCh7XG4gICAgICAgIHR5cGU6IHoubGl0ZXJhbChcIm9iamVjdFwiKSxcbiAgICAgICAgcHJvcGVydGllczogei5vcHRpb25hbCh6Lm9iamVjdCh7fSkucGFzc3Rocm91Z2goKSksXG4gICAgICAgIHJlcXVpcmVkOiB6Lm9wdGlvbmFsKHouYXJyYXkoei5zdHJpbmcoKSkpLFxuICAgIH0pXG4gICAgICAgIC5wYXNzdGhyb3VnaCgpLFxuICAgIC8qKlxuICAgICAqIEFuIG9wdGlvbmFsIEpTT04gU2NoZW1hIG9iamVjdCBkZWZpbmluZyB0aGUgc3RydWN0dXJlIG9mIHRoZSB0b29sJ3Mgb3V0cHV0IHJldHVybmVkIGluXG4gICAgICogdGhlIHN0cnVjdHVyZWRDb250ZW50IGZpZWxkIG9mIGEgQ2FsbFRvb2xSZXN1bHQuXG4gICAgICovXG4gICAgb3V0cHV0U2NoZW1hOiB6Lm9wdGlvbmFsKHoub2JqZWN0KHtcbiAgICAgICAgdHlwZTogei5saXRlcmFsKFwib2JqZWN0XCIpLFxuICAgICAgICBwcm9wZXJ0aWVzOiB6Lm9wdGlvbmFsKHoub2JqZWN0KHt9KS5wYXNzdGhyb3VnaCgpKSxcbiAgICAgICAgcmVxdWlyZWQ6IHoub3B0aW9uYWwoei5hcnJheSh6LnN0cmluZygpKSksXG4gICAgfSlcbiAgICAgICAgLnBhc3N0aHJvdWdoKCkpLFxuICAgIC8qKlxuICAgICAqIE9wdGlvbmFsIGFkZGl0aW9uYWwgdG9vbCBpbmZvcm1hdGlvbi5cbiAgICAgKi9cbiAgICBhbm5vdGF0aW9uczogei5vcHRpb25hbChUb29sQW5ub3RhdGlvbnNTY2hlbWEpLFxuICAgIC8qKlxuICAgICAqIFNlZSBbTUNQIHNwZWNpZmljYXRpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9tb2RlbGNvbnRleHRwcm90b2NvbC9tb2RlbGNvbnRleHRwcm90b2NvbC9ibG9iLzQ3MzM5YzAzYzE0M2JiNGVjMDFhMjZlNzIxYTFiOGZlNjY2MzRlYmUvZG9jcy9zcGVjaWZpY2F0aW9uL2RyYWZ0L2Jhc2ljL2luZGV4Lm1keCNnZW5lcmFsLWZpZWxkcylcbiAgICAgKiBmb3Igbm90ZXMgb24gX21ldGEgdXNhZ2UuXG4gICAgICovXG4gICAgX21ldGE6IHoub3B0aW9uYWwoei5vYmplY3Qoe30pLnBhc3N0aHJvdWdoKCkpLFxufSk7XG4vKipcbiAqIFNlbnQgZnJvbSB0aGUgY2xpZW50IHRvIHJlcXVlc3QgYSBsaXN0IG9mIHRvb2xzIHRoZSBzZXJ2ZXIgaGFzLlxuICovXG5leHBvcnQgY29uc3QgTGlzdFRvb2xzUmVxdWVzdFNjaGVtYSA9IFBhZ2luYXRlZFJlcXVlc3RTY2hlbWEuZXh0ZW5kKHtcbiAgICBtZXRob2Q6IHoubGl0ZXJhbChcInRvb2xzL2xpc3RcIiksXG59KTtcbi8qKlxuICogVGhlIHNlcnZlcidzIHJlc3BvbnNlIHRvIGEgdG9vbHMvbGlzdCByZXF1ZXN0IGZyb20gdGhlIGNsaWVudC5cbiAqL1xuZXhwb3J0IGNvbnN0IExpc3RUb29sc1Jlc3VsdFNjaGVtYSA9IFBhZ2luYXRlZFJlc3VsdFNjaGVtYS5leHRlbmQoe1xuICAgIHRvb2xzOiB6LmFycmF5KFRvb2xTY2hlbWEpLFxufSk7XG4vKipcbiAqIFRoZSBzZXJ2ZXIncyByZXNwb25zZSB0byBhIHRvb2wgY2FsbC5cbiAqL1xuZXhwb3J0IGNvbnN0IENhbGxUb29sUmVzdWx0U2NoZW1hID0gUmVzdWx0U2NoZW1hLmV4dGVuZCh7XG4gICAgLyoqXG4gICAgICogQSBsaXN0IG9mIGNvbnRlbnQgb2JqZWN0cyB0aGF0IHJlcHJlc2VudCB0aGUgcmVzdWx0IG9mIHRoZSB0b29sIGNhbGwuXG4gICAgICpcbiAgICAgKiBJZiB0aGUgVG9vbCBkb2VzIG5vdCBkZWZpbmUgYW4gb3V0cHV0U2NoZW1hLCB0aGlzIGZpZWxkIE1VU1QgYmUgcHJlc2VudCBpbiB0aGUgcmVzdWx0LlxuICAgICAqIEZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSwgdGhpcyBmaWVsZCBpcyBhbHdheXMgcHJlc2VudCwgYnV0IGl0IG1heSBiZSBlbXB0eS5cbiAgICAgKi9cbiAgICBjb250ZW50OiB6LmFycmF5KENvbnRlbnRCbG9ja1NjaGVtYSkuZGVmYXVsdChbXSksXG4gICAgLyoqXG4gICAgICogQW4gb2JqZWN0IGNvbnRhaW5pbmcgc3RydWN0dXJlZCB0b29sIG91dHB1dC5cbiAgICAgKlxuICAgICAqIElmIHRoZSBUb29sIGRlZmluZXMgYW4gb3V0cHV0U2NoZW1hLCB0aGlzIGZpZWxkIE1VU1QgYmUgcHJlc2VudCBpbiB0aGUgcmVzdWx0LCBhbmQgY29udGFpbiBhIEpTT04gb2JqZWN0IHRoYXQgbWF0Y2hlcyB0aGUgc2NoZW1hLlxuICAgICAqL1xuICAgIHN0cnVjdHVyZWRDb250ZW50OiB6Lm9iamVjdCh7fSkucGFzc3Rocm91Z2goKS5vcHRpb25hbCgpLFxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIHRvb2wgY2FsbCBlbmRlZCBpbiBhbiBlcnJvci5cbiAgICAgKlxuICAgICAqIElmIG5vdCBzZXQsIHRoaXMgaXMgYXNzdW1lZCB0byBiZSBmYWxzZSAodGhlIGNhbGwgd2FzIHN1Y2Nlc3NmdWwpLlxuICAgICAqXG4gICAgICogQW55IGVycm9ycyB0aGF0IG9yaWdpbmF0ZSBmcm9tIHRoZSB0b29sIFNIT1VMRCBiZSByZXBvcnRlZCBpbnNpZGUgdGhlIHJlc3VsdFxuICAgICAqIG9iamVjdCwgd2l0aCBgaXNFcnJvcmAgc2V0IHRvIHRydWUsIF9ub3RfIGFzIGFuIE1DUCBwcm90b2NvbC1sZXZlbCBlcnJvclxuICAgICAqIHJlc3BvbnNlLiBPdGhlcndpc2UsIHRoZSBMTE0gd291bGQgbm90IGJlIGFibGUgdG8gc2VlIHRoYXQgYW4gZXJyb3Igb2NjdXJyZWRcbiAgICAgKiBhbmQgc2VsZi1jb3JyZWN0LlxuICAgICAqXG4gICAgICogSG93ZXZlciwgYW55IGVycm9ycyBpbiBfZmluZGluZ18gdGhlIHRvb2wsIGFuIGVycm9yIGluZGljYXRpbmcgdGhhdCB0aGVcbiAgICAgKiBzZXJ2ZXIgZG9lcyBub3Qgc3VwcG9ydCB0b29sIGNhbGxzLCBvciBhbnkgb3RoZXIgZXhjZXB0aW9uYWwgY29uZGl0aW9ucyxcbiAgICAgKiBzaG91bGQgYmUgcmVwb3J0ZWQgYXMgYW4gTUNQIGVycm9yIHJlc3BvbnNlLlxuICAgICAqL1xuICAgIGlzRXJyb3I6IHoub3B0aW9uYWwoei5ib29sZWFuKCkpLFxufSk7XG4vKipcbiAqIENhbGxUb29sUmVzdWx0U2NoZW1hIGV4dGVuZGVkIHdpdGggYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgdG8gcHJvdG9jb2wgdmVyc2lvbiAyMDI0LTEwLTA3LlxuICovXG5leHBvcnQgY29uc3QgQ29tcGF0aWJpbGl0eUNhbGxUb29sUmVzdWx0U2NoZW1hID0gQ2FsbFRvb2xSZXN1bHRTY2hlbWEub3IoUmVzdWx0U2NoZW1hLmV4dGVuZCh7XG4gICAgdG9vbFJlc3VsdDogei51bmtub3duKCksXG59KSk7XG4vKipcbiAqIFVzZWQgYnkgdGhlIGNsaWVudCB0byBpbnZva2UgYSB0b29sIHByb3ZpZGVkIGJ5IHRoZSBzZXJ2ZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBDYWxsVG9vbFJlcXVlc3RTY2hlbWEgPSBSZXF1ZXN0U2NoZW1hLmV4dGVuZCh7XG4gICAgbWV0aG9kOiB6LmxpdGVyYWwoXCJ0b29scy9jYWxsXCIpLFxuICAgIHBhcmFtczogQmFzZVJlcXVlc3RQYXJhbXNTY2hlbWEuZXh0ZW5kKHtcbiAgICAgICAgbmFtZTogei5zdHJpbmcoKSxcbiAgICAgICAgYXJndW1lbnRzOiB6Lm9wdGlvbmFsKHoucmVjb3JkKHoudW5rbm93bigpKSksXG4gICAgfSksXG59KTtcbi8qKlxuICogQW4gb3B0aW9uYWwgbm90aWZpY2F0aW9uIGZyb20gdGhlIHNlcnZlciB0byB0aGUgY2xpZW50LCBpbmZvcm1pbmcgaXQgdGhhdCB0aGUgbGlzdCBvZiB0b29scyBpdCBvZmZlcnMgaGFzIGNoYW5nZWQuIFRoaXMgbWF5IGJlIGlzc3VlZCBieSBzZXJ2ZXJzIHdpdGhvdXQgYW55IHByZXZpb3VzIHN1YnNjcmlwdGlvbiBmcm9tIHRoZSBjbGllbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBUb29sTGlzdENoYW5nZWROb3RpZmljYXRpb25TY2hlbWEgPSBOb3RpZmljYXRpb25TY2hlbWEuZXh0ZW5kKHtcbiAgICBtZXRob2Q6IHoubGl0ZXJhbChcIm5vdGlmaWNhdGlvbnMvdG9vbHMvbGlzdF9jaGFuZ2VkXCIpLFxufSk7XG4vKiBMb2dnaW5nICovXG4vKipcbiAqIFRoZSBzZXZlcml0eSBvZiBhIGxvZyBtZXNzYWdlLlxuICovXG5leHBvcnQgY29uc3QgTG9nZ2luZ0xldmVsU2NoZW1hID0gei5lbnVtKFtcbiAgICBcImRlYnVnXCIsXG4gICAgXCJpbmZvXCIsXG4gICAgXCJub3RpY2VcIixcbiAgICBcIndhcm5pbmdcIixcbiAgICBcImVycm9yXCIsXG4gICAgXCJjcml0aWNhbFwiLFxuICAgIFwiYWxlcnRcIixcbiAgICBcImVtZXJnZW5jeVwiLFxuXSk7XG4vKipcbiAqIEEgcmVxdWVzdCBmcm9tIHRoZSBjbGllbnQgdG8gdGhlIHNlcnZlciwgdG8gZW5hYmxlIG9yIGFkanVzdCBsb2dnaW5nLlxuICovXG5leHBvcnQgY29uc3QgU2V0TGV2ZWxSZXF1ZXN0U2NoZW1hID0gUmVxdWVzdFNjaGVtYS5leHRlbmQoe1xuICAgIG1ldGhvZDogei5saXRlcmFsKFwibG9nZ2luZy9zZXRMZXZlbFwiKSxcbiAgICBwYXJhbXM6IEJhc2VSZXF1ZXN0UGFyYW1zU2NoZW1hLmV4dGVuZCh7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbGV2ZWwgb2YgbG9nZ2luZyB0aGF0IHRoZSBjbGllbnQgd2FudHMgdG8gcmVjZWl2ZSBmcm9tIHRoZSBzZXJ2ZXIuIFRoZSBzZXJ2ZXIgc2hvdWxkIHNlbmQgYWxsIGxvZ3MgYXQgdGhpcyBsZXZlbCBhbmQgaGlnaGVyIChpLmUuLCBtb3JlIHNldmVyZSkgdG8gdGhlIGNsaWVudCBhcyBub3RpZmljYXRpb25zL2xvZ2dpbmcvbWVzc2FnZS5cbiAgICAgICAgICovXG4gICAgICAgIGxldmVsOiBMb2dnaW5nTGV2ZWxTY2hlbWEsXG4gICAgfSksXG59KTtcbi8qKlxuICogTm90aWZpY2F0aW9uIG9mIGEgbG9nIG1lc3NhZ2UgcGFzc2VkIGZyb20gc2VydmVyIHRvIGNsaWVudC4gSWYgbm8gbG9nZ2luZy9zZXRMZXZlbCByZXF1ZXN0IGhhcyBiZWVuIHNlbnQgZnJvbSB0aGUgY2xpZW50LCB0aGUgc2VydmVyIE1BWSBkZWNpZGUgd2hpY2ggbWVzc2FnZXMgdG8gc2VuZCBhdXRvbWF0aWNhbGx5LlxuICovXG5leHBvcnQgY29uc3QgTG9nZ2luZ01lc3NhZ2VOb3RpZmljYXRpb25TY2hlbWEgPSBOb3RpZmljYXRpb25TY2hlbWEuZXh0ZW5kKHtcbiAgICBtZXRob2Q6IHoubGl0ZXJhbChcIm5vdGlmaWNhdGlvbnMvbWVzc2FnZVwiKSxcbiAgICBwYXJhbXM6IEJhc2VOb3RpZmljYXRpb25QYXJhbXNTY2hlbWEuZXh0ZW5kKHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBzZXZlcml0eSBvZiB0aGlzIGxvZyBtZXNzYWdlLlxuICAgICAgICAgKi9cbiAgICAgICAgbGV2ZWw6IExvZ2dpbmdMZXZlbFNjaGVtYSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIG9wdGlvbmFsIG5hbWUgb2YgdGhlIGxvZ2dlciBpc3N1aW5nIHRoaXMgbWVzc2FnZS5cbiAgICAgICAgICovXG4gICAgICAgIGxvZ2dlcjogei5vcHRpb25hbCh6LnN0cmluZygpKSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBkYXRhIHRvIGJlIGxvZ2dlZCwgc3VjaCBhcyBhIHN0cmluZyBtZXNzYWdlIG9yIGFuIG9iamVjdC4gQW55IEpTT04gc2VyaWFsaXphYmxlIHR5cGUgaXMgYWxsb3dlZCBoZXJlLlxuICAgICAgICAgKi9cbiAgICAgICAgZGF0YTogei51bmtub3duKCksXG4gICAgfSksXG59KTtcbi8qIFNhbXBsaW5nICovXG4vKipcbiAqIEhpbnRzIHRvIHVzZSBmb3IgbW9kZWwgc2VsZWN0aW9uLlxuICovXG5leHBvcnQgY29uc3QgTW9kZWxIaW50U2NoZW1hID0gelxuICAgIC5vYmplY3Qoe1xuICAgIC8qKlxuICAgICAqIEEgaGludCBmb3IgYSBtb2RlbCBuYW1lLlxuICAgICAqL1xuICAgIG5hbWU6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbn0pXG4gICAgLnBhc3N0aHJvdWdoKCk7XG4vKipcbiAqIFRoZSBzZXJ2ZXIncyBwcmVmZXJlbmNlcyBmb3IgbW9kZWwgc2VsZWN0aW9uLCByZXF1ZXN0ZWQgb2YgdGhlIGNsaWVudCBkdXJpbmcgc2FtcGxpbmcuXG4gKi9cbmV4cG9ydCBjb25zdCBNb2RlbFByZWZlcmVuY2VzU2NoZW1hID0gelxuICAgIC5vYmplY3Qoe1xuICAgIC8qKlxuICAgICAqIE9wdGlvbmFsIGhpbnRzIHRvIHVzZSBmb3IgbW9kZWwgc2VsZWN0aW9uLlxuICAgICAqL1xuICAgIGhpbnRzOiB6Lm9wdGlvbmFsKHouYXJyYXkoTW9kZWxIaW50U2NoZW1hKSksXG4gICAgLyoqXG4gICAgICogSG93IG11Y2ggdG8gcHJpb3JpdGl6ZSBjb3N0IHdoZW4gc2VsZWN0aW5nIGEgbW9kZWwuXG4gICAgICovXG4gICAgY29zdFByaW9yaXR5OiB6Lm9wdGlvbmFsKHoubnVtYmVyKCkubWluKDApLm1heCgxKSksXG4gICAgLyoqXG4gICAgICogSG93IG11Y2ggdG8gcHJpb3JpdGl6ZSBzYW1wbGluZyBzcGVlZCAobGF0ZW5jeSkgd2hlbiBzZWxlY3RpbmcgYSBtb2RlbC5cbiAgICAgKi9cbiAgICBzcGVlZFByaW9yaXR5OiB6Lm9wdGlvbmFsKHoubnVtYmVyKCkubWluKDApLm1heCgxKSksXG4gICAgLyoqXG4gICAgICogSG93IG11Y2ggdG8gcHJpb3JpdGl6ZSBpbnRlbGxpZ2VuY2UgYW5kIGNhcGFiaWxpdGllcyB3aGVuIHNlbGVjdGluZyBhIG1vZGVsLlxuICAgICAqL1xuICAgIGludGVsbGlnZW5jZVByaW9yaXR5OiB6Lm9wdGlvbmFsKHoubnVtYmVyKCkubWluKDApLm1heCgxKSksXG59KVxuICAgIC5wYXNzdGhyb3VnaCgpO1xuLyoqXG4gKiBEZXNjcmliZXMgYSBtZXNzYWdlIGlzc3VlZCB0byBvciByZWNlaXZlZCBmcm9tIGFuIExMTSBBUEkuXG4gKi9cbmV4cG9ydCBjb25zdCBTYW1wbGluZ01lc3NhZ2VTY2hlbWEgPSB6XG4gICAgLm9iamVjdCh7XG4gICAgcm9sZTogei5lbnVtKFtcInVzZXJcIiwgXCJhc3Npc3RhbnRcIl0pLFxuICAgIGNvbnRlbnQ6IHoudW5pb24oW1RleHRDb250ZW50U2NoZW1hLCBJbWFnZUNvbnRlbnRTY2hlbWEsIEF1ZGlvQ29udGVudFNjaGVtYV0pLFxufSlcbiAgICAucGFzc3Rocm91Z2goKTtcbi8qKlxuICogQSByZXF1ZXN0IGZyb20gdGhlIHNlcnZlciB0byBzYW1wbGUgYW4gTExNIHZpYSB0aGUgY2xpZW50LiBUaGUgY2xpZW50IGhhcyBmdWxsIGRpc2NyZXRpb24gb3ZlciB3aGljaCBtb2RlbCB0byBzZWxlY3QuIFRoZSBjbGllbnQgc2hvdWxkIGFsc28gaW5mb3JtIHRoZSB1c2VyIGJlZm9yZSBiZWdpbm5pbmcgc2FtcGxpbmcsIHRvIGFsbG93IHRoZW0gdG8gaW5zcGVjdCB0aGUgcmVxdWVzdCAoaHVtYW4gaW4gdGhlIGxvb3ApIGFuZCBkZWNpZGUgd2hldGhlciB0byBhcHByb3ZlIGl0LlxuICovXG5leHBvcnQgY29uc3QgQ3JlYXRlTWVzc2FnZVJlcXVlc3RTY2hlbWEgPSBSZXF1ZXN0U2NoZW1hLmV4dGVuZCh7XG4gICAgbWV0aG9kOiB6LmxpdGVyYWwoXCJzYW1wbGluZy9jcmVhdGVNZXNzYWdlXCIpLFxuICAgIHBhcmFtczogQmFzZVJlcXVlc3RQYXJhbXNTY2hlbWEuZXh0ZW5kKHtcbiAgICAgICAgbWVzc2FnZXM6IHouYXJyYXkoU2FtcGxpbmdNZXNzYWdlU2NoZW1hKSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIG9wdGlvbmFsIHN5c3RlbSBwcm9tcHQgdGhlIHNlcnZlciB3YW50cyB0byB1c2UgZm9yIHNhbXBsaW5nLiBUaGUgY2xpZW50IE1BWSBtb2RpZnkgb3Igb21pdCB0aGlzIHByb21wdC5cbiAgICAgICAgICovXG4gICAgICAgIHN5c3RlbVByb21wdDogei5vcHRpb25hbCh6LnN0cmluZygpKSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcmVxdWVzdCB0byBpbmNsdWRlIGNvbnRleHQgZnJvbSBvbmUgb3IgbW9yZSBNQ1Agc2VydmVycyAoaW5jbHVkaW5nIHRoZSBjYWxsZXIpLCB0byBiZSBhdHRhY2hlZCB0byB0aGUgcHJvbXB0LiBUaGUgY2xpZW50IE1BWSBpZ25vcmUgdGhpcyByZXF1ZXN0LlxuICAgICAgICAgKi9cbiAgICAgICAgaW5jbHVkZUNvbnRleHQ6IHoub3B0aW9uYWwoei5lbnVtKFtcIm5vbmVcIiwgXCJ0aGlzU2VydmVyXCIsIFwiYWxsU2VydmVyc1wiXSkpLFxuICAgICAgICB0ZW1wZXJhdHVyZTogei5vcHRpb25hbCh6Lm51bWJlcigpKSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBtYXhpbXVtIG51bWJlciBvZiB0b2tlbnMgdG8gc2FtcGxlLCBhcyByZXF1ZXN0ZWQgYnkgdGhlIHNlcnZlci4gVGhlIGNsaWVudCBNQVkgY2hvb3NlIHRvIHNhbXBsZSBmZXdlciB0b2tlbnMgdGhhbiByZXF1ZXN0ZWQuXG4gICAgICAgICAqL1xuICAgICAgICBtYXhUb2tlbnM6IHoubnVtYmVyKCkuaW50KCksXG4gICAgICAgIHN0b3BTZXF1ZW5jZXM6IHoub3B0aW9uYWwoei5hcnJheSh6LnN0cmluZygpKSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPcHRpb25hbCBtZXRhZGF0YSB0byBwYXNzIHRocm91Z2ggdG8gdGhlIExMTSBwcm92aWRlci4gVGhlIGZvcm1hdCBvZiB0aGlzIG1ldGFkYXRhIGlzIHByb3ZpZGVyLXNwZWNpZmljLlxuICAgICAgICAgKi9cbiAgICAgICAgbWV0YWRhdGE6IHoub3B0aW9uYWwoei5vYmplY3Qoe30pLnBhc3N0aHJvdWdoKCkpLFxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHNlcnZlcidzIHByZWZlcmVuY2VzIGZvciB3aGljaCBtb2RlbCB0byBzZWxlY3QuXG4gICAgICAgICAqL1xuICAgICAgICBtb2RlbFByZWZlcmVuY2VzOiB6Lm9wdGlvbmFsKE1vZGVsUHJlZmVyZW5jZXNTY2hlbWEpLFxuICAgIH0pLFxufSk7XG4vKipcbiAqIFRoZSBjbGllbnQncyByZXNwb25zZSB0byBhIHNhbXBsaW5nL2NyZWF0ZV9tZXNzYWdlIHJlcXVlc3QgZnJvbSB0aGUgc2VydmVyLiBUaGUgY2xpZW50IHNob3VsZCBpbmZvcm0gdGhlIHVzZXIgYmVmb3JlIHJldHVybmluZyB0aGUgc2FtcGxlZCBtZXNzYWdlLCB0byBhbGxvdyB0aGVtIHRvIGluc3BlY3QgdGhlIHJlc3BvbnNlIChodW1hbiBpbiB0aGUgbG9vcCkgYW5kIGRlY2lkZSB3aGV0aGVyIHRvIGFsbG93IHRoZSBzZXJ2ZXIgdG8gc2VlIGl0LlxuICovXG5leHBvcnQgY29uc3QgQ3JlYXRlTWVzc2FnZVJlc3VsdFNjaGVtYSA9IFJlc3VsdFNjaGVtYS5leHRlbmQoe1xuICAgIC8qKlxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBtb2RlbCB0aGF0IGdlbmVyYXRlZCB0aGUgbWVzc2FnZS5cbiAgICAgKi9cbiAgICBtb2RlbDogei5zdHJpbmcoKSxcbiAgICAvKipcbiAgICAgKiBUaGUgcmVhc29uIHdoeSBzYW1wbGluZyBzdG9wcGVkLlxuICAgICAqL1xuICAgIHN0b3BSZWFzb246IHoub3B0aW9uYWwoei5lbnVtKFtcImVuZFR1cm5cIiwgXCJzdG9wU2VxdWVuY2VcIiwgXCJtYXhUb2tlbnNcIl0pLm9yKHouc3RyaW5nKCkpKSxcbiAgICByb2xlOiB6LmVudW0oW1widXNlclwiLCBcImFzc2lzdGFudFwiXSksXG4gICAgY29udGVudDogei5kaXNjcmltaW5hdGVkVW5pb24oXCJ0eXBlXCIsIFtcbiAgICAgICAgVGV4dENvbnRlbnRTY2hlbWEsXG4gICAgICAgIEltYWdlQ29udGVudFNjaGVtYSxcbiAgICAgICAgQXVkaW9Db250ZW50U2NoZW1hXG4gICAgXSksXG59KTtcbi8qIEVsaWNpdGF0aW9uICovXG4vKipcbiAqIFByaW1pdGl2ZSBzY2hlbWEgZGVmaW5pdGlvbiBmb3IgYm9vbGVhbiBmaWVsZHMuXG4gKi9cbmV4cG9ydCBjb25zdCBCb29sZWFuU2NoZW1hU2NoZW1hID0gelxuICAgIC5vYmplY3Qoe1xuICAgIHR5cGU6IHoubGl0ZXJhbChcImJvb2xlYW5cIiksXG4gICAgdGl0bGU6IHoub3B0aW9uYWwoei5zdHJpbmcoKSksXG4gICAgZGVzY3JpcHRpb246IHoub3B0aW9uYWwoei5zdHJpbmcoKSksXG4gICAgZGVmYXVsdDogei5vcHRpb25hbCh6LmJvb2xlYW4oKSksXG59KVxuICAgIC5wYXNzdGhyb3VnaCgpO1xuLyoqXG4gKiBQcmltaXRpdmUgc2NoZW1hIGRlZmluaXRpb24gZm9yIHN0cmluZyBmaWVsZHMuXG4gKi9cbmV4cG9ydCBjb25zdCBTdHJpbmdTY2hlbWFTY2hlbWEgPSB6XG4gICAgLm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKFwic3RyaW5nXCIpLFxuICAgIHRpdGxlOiB6Lm9wdGlvbmFsKHouc3RyaW5nKCkpLFxuICAgIGRlc2NyaXB0aW9uOiB6Lm9wdGlvbmFsKHouc3RyaW5nKCkpLFxuICAgIG1pbkxlbmd0aDogei5vcHRpb25hbCh6Lm51bWJlcigpKSxcbiAgICBtYXhMZW5ndGg6IHoub3B0aW9uYWwoei5udW1iZXIoKSksXG4gICAgZm9ybWF0OiB6Lm9wdGlvbmFsKHouZW51bShbXCJlbWFpbFwiLCBcInVyaVwiLCBcImRhdGVcIiwgXCJkYXRlLXRpbWVcIl0pKSxcbn0pXG4gICAgLnBhc3N0aHJvdWdoKCk7XG4vKipcbiAqIFByaW1pdGl2ZSBzY2hlbWEgZGVmaW5pdGlvbiBmb3IgbnVtYmVyIGZpZWxkcy5cbiAqL1xuZXhwb3J0IGNvbnN0IE51bWJlclNjaGVtYVNjaGVtYSA9IHpcbiAgICAub2JqZWN0KHtcbiAgICB0eXBlOiB6LmVudW0oW1wibnVtYmVyXCIsIFwiaW50ZWdlclwiXSksXG4gICAgdGl0bGU6IHoub3B0aW9uYWwoei5zdHJpbmcoKSksXG4gICAgZGVzY3JpcHRpb246IHoub3B0aW9uYWwoei5zdHJpbmcoKSksXG4gICAgbWluaW11bTogei5vcHRpb25hbCh6Lm51bWJlcigpKSxcbiAgICBtYXhpbXVtOiB6Lm9wdGlvbmFsKHoubnVtYmVyKCkpLFxufSlcbiAgICAucGFzc3Rocm91Z2goKTtcbi8qKlxuICogUHJpbWl0aXZlIHNjaGVtYSBkZWZpbml0aW9uIGZvciBlbnVtIGZpZWxkcy5cbiAqL1xuZXhwb3J0IGNvbnN0IEVudW1TY2hlbWFTY2hlbWEgPSB6XG4gICAgLm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKFwic3RyaW5nXCIpLFxuICAgIHRpdGxlOiB6Lm9wdGlvbmFsKHouc3RyaW5nKCkpLFxuICAgIGRlc2NyaXB0aW9uOiB6Lm9wdGlvbmFsKHouc3RyaW5nKCkpLFxuICAgIGVudW06IHouYXJyYXkoei5zdHJpbmcoKSksXG4gICAgZW51bU5hbWVzOiB6Lm9wdGlvbmFsKHouYXJyYXkoei5zdHJpbmcoKSkpLFxufSlcbiAgICAucGFzc3Rocm91Z2goKTtcbi8qKlxuICogVW5pb24gb2YgYWxsIHByaW1pdGl2ZSBzY2hlbWEgZGVmaW5pdGlvbnMuXG4gKi9cbmV4cG9ydCBjb25zdCBQcmltaXRpdmVTY2hlbWFEZWZpbml0aW9uU2NoZW1hID0gei51bmlvbihbXG4gICAgQm9vbGVhblNjaGVtYVNjaGVtYSxcbiAgICBTdHJpbmdTY2hlbWFTY2hlbWEsXG4gICAgTnVtYmVyU2NoZW1hU2NoZW1hLFxuICAgIEVudW1TY2hlbWFTY2hlbWEsXG5dKTtcbi8qKlxuICogQSByZXF1ZXN0IGZyb20gdGhlIHNlcnZlciB0byBlbGljaXQgdXNlciBpbnB1dCB2aWEgdGhlIGNsaWVudC5cbiAqIFRoZSBjbGllbnQgc2hvdWxkIHByZXNlbnQgdGhlIG1lc3NhZ2UgYW5kIGZvcm0gZmllbGRzIHRvIHRoZSB1c2VyLlxuICovXG5leHBvcnQgY29uc3QgRWxpY2l0UmVxdWVzdFNjaGVtYSA9IFJlcXVlc3RTY2hlbWEuZXh0ZW5kKHtcbiAgICBtZXRob2Q6IHoubGl0ZXJhbChcImVsaWNpdGF0aW9uL2NyZWF0ZVwiKSxcbiAgICBwYXJhbXM6IEJhc2VSZXF1ZXN0UGFyYW1zU2NoZW1hLmV4dGVuZCh7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbWVzc2FnZSB0byBwcmVzZW50IHRvIHRoZSB1c2VyLlxuICAgICAgICAgKi9cbiAgICAgICAgbWVzc2FnZTogei5zdHJpbmcoKSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBzY2hlbWEgZm9yIHRoZSByZXF1ZXN0ZWQgdXNlciBpbnB1dC5cbiAgICAgICAgICovXG4gICAgICAgIHJlcXVlc3RlZFNjaGVtYTogelxuICAgICAgICAgICAgLm9iamVjdCh7XG4gICAgICAgICAgICB0eXBlOiB6LmxpdGVyYWwoXCJvYmplY3RcIiksXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiB6LnJlY29yZCh6LnN0cmluZygpLCBQcmltaXRpdmVTY2hlbWFEZWZpbml0aW9uU2NoZW1hKSxcbiAgICAgICAgICAgIHJlcXVpcmVkOiB6Lm9wdGlvbmFsKHouYXJyYXkoei5zdHJpbmcoKSkpLFxuICAgICAgICB9KVxuICAgICAgICAgICAgLnBhc3N0aHJvdWdoKCksXG4gICAgfSksXG59KTtcbi8qKlxuICogVGhlIGNsaWVudCdzIHJlc3BvbnNlIHRvIGFuIGVsaWNpdGF0aW9uL2NyZWF0ZSByZXF1ZXN0IGZyb20gdGhlIHNlcnZlci5cbiAqL1xuZXhwb3J0IGNvbnN0IEVsaWNpdFJlc3VsdFNjaGVtYSA9IFJlc3VsdFNjaGVtYS5leHRlbmQoe1xuICAgIC8qKlxuICAgICAqIFRoZSB1c2VyJ3MgcmVzcG9uc2UgYWN0aW9uLlxuICAgICAqL1xuICAgIGFjdGlvbjogei5lbnVtKFtcImFjY2VwdFwiLCBcImRlY2xpbmVcIiwgXCJjYW5jZWxcIl0pLFxuICAgIC8qKlxuICAgICAqIFRoZSBjb2xsZWN0ZWQgdXNlciBpbnB1dCBjb250ZW50IChvbmx5IHByZXNlbnQgaWYgYWN0aW9uIGlzIFwiYWNjZXB0XCIpLlxuICAgICAqL1xuICAgIGNvbnRlbnQ6IHoub3B0aW9uYWwoei5yZWNvcmQoei5zdHJpbmcoKSwgei51bmtub3duKCkpKSxcbn0pO1xuLyogQXV0b2NvbXBsZXRlICovXG4vKipcbiAqIEEgcmVmZXJlbmNlIHRvIGEgcmVzb3VyY2Ugb3IgcmVzb3VyY2UgdGVtcGxhdGUgZGVmaW5pdGlvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IFJlc291cmNlVGVtcGxhdGVSZWZlcmVuY2VTY2hlbWEgPSB6XG4gICAgLm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKFwicmVmL3Jlc291cmNlXCIpLFxuICAgIC8qKlxuICAgICAqIFRoZSBVUkkgb3IgVVJJIHRlbXBsYXRlIG9mIHRoZSByZXNvdXJjZS5cbiAgICAgKi9cbiAgICB1cmk6IHouc3RyaW5nKCksXG59KVxuICAgIC5wYXNzdGhyb3VnaCgpO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBVc2UgUmVzb3VyY2VUZW1wbGF0ZVJlZmVyZW5jZVNjaGVtYSBpbnN0ZWFkXG4gKi9cbmV4cG9ydCBjb25zdCBSZXNvdXJjZVJlZmVyZW5jZVNjaGVtYSA9IFJlc291cmNlVGVtcGxhdGVSZWZlcmVuY2VTY2hlbWE7XG4vKipcbiAqIElkZW50aWZpZXMgYSBwcm9tcHQuXG4gKi9cbmV4cG9ydCBjb25zdCBQcm9tcHRSZWZlcmVuY2VTY2hlbWEgPSB6XG4gICAgLm9iamVjdCh7XG4gICAgdHlwZTogei5saXRlcmFsKFwicmVmL3Byb21wdFwiKSxcbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgcHJvbXB0IG9yIHByb21wdCB0ZW1wbGF0ZVxuICAgICAqL1xuICAgIG5hbWU6IHouc3RyaW5nKCksXG59KVxuICAgIC5wYXNzdGhyb3VnaCgpO1xuLyoqXG4gKiBBIHJlcXVlc3QgZnJvbSB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXIsIHRvIGFzayBmb3IgY29tcGxldGlvbiBvcHRpb25zLlxuICovXG5leHBvcnQgY29uc3QgQ29tcGxldGVSZXF1ZXN0U2NoZW1hID0gUmVxdWVzdFNjaGVtYS5leHRlbmQoe1xuICAgIG1ldGhvZDogei5saXRlcmFsKFwiY29tcGxldGlvbi9jb21wbGV0ZVwiKSxcbiAgICBwYXJhbXM6IEJhc2VSZXF1ZXN0UGFyYW1zU2NoZW1hLmV4dGVuZCh7XG4gICAgICAgIHJlZjogei51bmlvbihbUHJvbXB0UmVmZXJlbmNlU2NoZW1hLCBSZXNvdXJjZVRlbXBsYXRlUmVmZXJlbmNlU2NoZW1hXSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgYXJndW1lbnQncyBpbmZvcm1hdGlvblxuICAgICAgICAgKi9cbiAgICAgICAgYXJndW1lbnQ6IHpcbiAgICAgICAgICAgIC5vYmplY3Qoe1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGUgbmFtZSBvZiB0aGUgYXJndW1lbnRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgbmFtZTogei5zdHJpbmcoKSxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGhlIHZhbHVlIG9mIHRoZSBhcmd1bWVudCB0byB1c2UgZm9yIGNvbXBsZXRpb24gbWF0Y2hpbmcuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHZhbHVlOiB6LnN0cmluZygpLFxuICAgICAgICB9KVxuICAgICAgICAgICAgLnBhc3N0aHJvdWdoKCksXG4gICAgICAgIGNvbnRleHQ6IHoub3B0aW9uYWwoei5vYmplY3Qoe1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBQcmV2aW91c2x5LXJlc29sdmVkIHZhcmlhYmxlcyBpbiBhIFVSSSB0ZW1wbGF0ZSBvciBwcm9tcHQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGFyZ3VtZW50czogei5vcHRpb25hbCh6LnJlY29yZCh6LnN0cmluZygpLCB6LnN0cmluZygpKSksXG4gICAgICAgIH0pKSxcbiAgICB9KSxcbn0pO1xuLyoqXG4gKiBUaGUgc2VydmVyJ3MgcmVzcG9uc2UgdG8gYSBjb21wbGV0aW9uL2NvbXBsZXRlIHJlcXVlc3RcbiAqL1xuZXhwb3J0IGNvbnN0IENvbXBsZXRlUmVzdWx0U2NoZW1hID0gUmVzdWx0U2NoZW1hLmV4dGVuZCh7XG4gICAgY29tcGxldGlvbjogelxuICAgICAgICAub2JqZWN0KHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIGFycmF5IG9mIGNvbXBsZXRpb24gdmFsdWVzLiBNdXN0IG5vdCBleGNlZWQgMTAwIGl0ZW1zLlxuICAgICAgICAgKi9cbiAgICAgICAgdmFsdWVzOiB6LmFycmF5KHouc3RyaW5nKCkpLm1heCgxMDApLFxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHRvdGFsIG51bWJlciBvZiBjb21wbGV0aW9uIG9wdGlvbnMgYXZhaWxhYmxlLiBUaGlzIGNhbiBleGNlZWQgdGhlIG51bWJlciBvZiB2YWx1ZXMgYWN0dWFsbHkgc2VudCBpbiB0aGUgcmVzcG9uc2UuXG4gICAgICAgICAqL1xuICAgICAgICB0b3RhbDogei5vcHRpb25hbCh6Lm51bWJlcigpLmludCgpKSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZXJlIGFyZSBhZGRpdGlvbmFsIGNvbXBsZXRpb24gb3B0aW9ucyBiZXlvbmQgdGhvc2UgcHJvdmlkZWQgaW4gdGhlIGN1cnJlbnQgcmVzcG9uc2UsIGV2ZW4gaWYgdGhlIGV4YWN0IHRvdGFsIGlzIHVua25vd24uXG4gICAgICAgICAqL1xuICAgICAgICBoYXNNb3JlOiB6Lm9wdGlvbmFsKHouYm9vbGVhbigpKSxcbiAgICB9KVxuICAgICAgICAucGFzc3Rocm91Z2goKSxcbn0pO1xuLyogUm9vdHMgKi9cbi8qKlxuICogUmVwcmVzZW50cyBhIHJvb3QgZGlyZWN0b3J5IG9yIGZpbGUgdGhhdCB0aGUgc2VydmVyIGNhbiBvcGVyYXRlIG9uLlxuICovXG5leHBvcnQgY29uc3QgUm9vdFNjaGVtYSA9IHpcbiAgICAub2JqZWN0KHtcbiAgICAvKipcbiAgICAgKiBUaGUgVVJJIGlkZW50aWZ5aW5nIHRoZSByb290LiBUaGlzICptdXN0KiBzdGFydCB3aXRoIGZpbGU6Ly8gZm9yIG5vdy5cbiAgICAgKi9cbiAgICB1cmk6IHouc3RyaW5nKCkuc3RhcnRzV2l0aChcImZpbGU6Ly9cIiksXG4gICAgLyoqXG4gICAgICogQW4gb3B0aW9uYWwgbmFtZSBmb3IgdGhlIHJvb3QuXG4gICAgICovXG4gICAgbmFtZTogei5vcHRpb25hbCh6LnN0cmluZygpKSxcbiAgICAvKipcbiAgICAgKiBTZWUgW01DUCBzcGVjaWZpY2F0aW9uXShodHRwczovL2dpdGh1Yi5jb20vbW9kZWxjb250ZXh0cHJvdG9jb2wvbW9kZWxjb250ZXh0cHJvdG9jb2wvYmxvYi80NzMzOWMwM2MxNDNiYjRlYzAxYTI2ZTcyMWExYjhmZTY2NjM0ZWJlL2RvY3Mvc3BlY2lmaWNhdGlvbi9kcmFmdC9iYXNpYy9pbmRleC5tZHgjZ2VuZXJhbC1maWVsZHMpXG4gICAgICogZm9yIG5vdGVzIG9uIF9tZXRhIHVzYWdlLlxuICAgICAqL1xuICAgIF9tZXRhOiB6Lm9wdGlvbmFsKHoub2JqZWN0KHt9KS5wYXNzdGhyb3VnaCgpKSxcbn0pXG4gICAgLnBhc3N0aHJvdWdoKCk7XG4vKipcbiAqIFNlbnQgZnJvbSB0aGUgc2VydmVyIHRvIHJlcXVlc3QgYSBsaXN0IG9mIHJvb3QgVVJJcyBmcm9tIHRoZSBjbGllbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBMaXN0Um9vdHNSZXF1ZXN0U2NoZW1hID0gUmVxdWVzdFNjaGVtYS5leHRlbmQoe1xuICAgIG1ldGhvZDogei5saXRlcmFsKFwicm9vdHMvbGlzdFwiKSxcbn0pO1xuLyoqXG4gKiBUaGUgY2xpZW50J3MgcmVzcG9uc2UgdG8gYSByb290cy9saXN0IHJlcXVlc3QgZnJvbSB0aGUgc2VydmVyLlxuICovXG5leHBvcnQgY29uc3QgTGlzdFJvb3RzUmVzdWx0U2NoZW1hID0gUmVzdWx0U2NoZW1hLmV4dGVuZCh7XG4gICAgcm9vdHM6IHouYXJyYXkoUm9vdFNjaGVtYSksXG59KTtcbi8qKlxuICogQSBub3RpZmljYXRpb24gZnJvbSB0aGUgY2xpZW50IHRvIHRoZSBzZXJ2ZXIsIGluZm9ybWluZyBpdCB0aGF0IHRoZSBsaXN0IG9mIHJvb3RzIGhhcyBjaGFuZ2VkLlxuICovXG5leHBvcnQgY29uc3QgUm9vdHNMaXN0Q2hhbmdlZE5vdGlmaWNhdGlvblNjaGVtYSA9IE5vdGlmaWNhdGlvblNjaGVtYS5leHRlbmQoe1xuICAgIG1ldGhvZDogei5saXRlcmFsKFwibm90aWZpY2F0aW9ucy9yb290cy9saXN0X2NoYW5nZWRcIiksXG59KTtcbi8qIENsaWVudCBtZXNzYWdlcyAqL1xuZXhwb3J0IGNvbnN0IENsaWVudFJlcXVlc3RTY2hlbWEgPSB6LnVuaW9uKFtcbiAgICBQaW5nUmVxdWVzdFNjaGVtYSxcbiAgICBJbml0aWFsaXplUmVxdWVzdFNjaGVtYSxcbiAgICBDb21wbGV0ZVJlcXVlc3RTY2hlbWEsXG4gICAgU2V0TGV2ZWxSZXF1ZXN0U2NoZW1hLFxuICAgIEdldFByb21wdFJlcXVlc3RTY2hlbWEsXG4gICAgTGlzdFByb21wdHNSZXF1ZXN0U2NoZW1hLFxuICAgIExpc3RSZXNvdXJjZXNSZXF1ZXN0U2NoZW1hLFxuICAgIExpc3RSZXNvdXJjZVRlbXBsYXRlc1JlcXVlc3RTY2hlbWEsXG4gICAgUmVhZFJlc291cmNlUmVxdWVzdFNjaGVtYSxcbiAgICBTdWJzY3JpYmVSZXF1ZXN0U2NoZW1hLFxuICAgIFVuc3Vic2NyaWJlUmVxdWVzdFNjaGVtYSxcbiAgICBDYWxsVG9vbFJlcXVlc3RTY2hlbWEsXG4gICAgTGlzdFRvb2xzUmVxdWVzdFNjaGVtYSxcbl0pO1xuZXhwb3J0IGNvbnN0IENsaWVudE5vdGlmaWNhdGlvblNjaGVtYSA9IHoudW5pb24oW1xuICAgIENhbmNlbGxlZE5vdGlmaWNhdGlvblNjaGVtYSxcbiAgICBQcm9ncmVzc05vdGlmaWNhdGlvblNjaGVtYSxcbiAgICBJbml0aWFsaXplZE5vdGlmaWNhdGlvblNjaGVtYSxcbiAgICBSb290c0xpc3RDaGFuZ2VkTm90aWZpY2F0aW9uU2NoZW1hLFxuXSk7XG5leHBvcnQgY29uc3QgQ2xpZW50UmVzdWx0U2NoZW1hID0gei51bmlvbihbXG4gICAgRW1wdHlSZXN1bHRTY2hlbWEsXG4gICAgQ3JlYXRlTWVzc2FnZVJlc3VsdFNjaGVtYSxcbiAgICBFbGljaXRSZXN1bHRTY2hlbWEsXG4gICAgTGlzdFJvb3RzUmVzdWx0U2NoZW1hLFxuXSk7XG4vKiBTZXJ2ZXIgbWVzc2FnZXMgKi9cbmV4cG9ydCBjb25zdCBTZXJ2ZXJSZXF1ZXN0U2NoZW1hID0gei51bmlvbihbXG4gICAgUGluZ1JlcXVlc3RTY2hlbWEsXG4gICAgQ3JlYXRlTWVzc2FnZVJlcXVlc3RTY2hlbWEsXG4gICAgRWxpY2l0UmVxdWVzdFNjaGVtYSxcbiAgICBMaXN0Um9vdHNSZXF1ZXN0U2NoZW1hLFxuXSk7XG5leHBvcnQgY29uc3QgU2VydmVyTm90aWZpY2F0aW9uU2NoZW1hID0gei51bmlvbihbXG4gICAgQ2FuY2VsbGVkTm90aWZpY2F0aW9uU2NoZW1hLFxuICAgIFByb2dyZXNzTm90aWZpY2F0aW9uU2NoZW1hLFxuICAgIExvZ2dpbmdNZXNzYWdlTm90aWZpY2F0aW9uU2NoZW1hLFxuICAgIFJlc291cmNlVXBkYXRlZE5vdGlmaWNhdGlvblNjaGVtYSxcbiAgICBSZXNvdXJjZUxpc3RDaGFuZ2VkTm90aWZpY2F0aW9uU2NoZW1hLFxuICAgIFRvb2xMaXN0Q2hhbmdlZE5vdGlmaWNhdGlvblNjaGVtYSxcbiAgICBQcm9tcHRMaXN0Q2hhbmdlZE5vdGlmaWNhdGlvblNjaGVtYSxcbl0pO1xuZXhwb3J0IGNvbnN0IFNlcnZlclJlc3VsdFNjaGVtYSA9IHoudW5pb24oW1xuICAgIEVtcHR5UmVzdWx0U2NoZW1hLFxuICAgIEluaXRpYWxpemVSZXN1bHRTY2hlbWEsXG4gICAgQ29tcGxldGVSZXN1bHRTY2hlbWEsXG4gICAgR2V0UHJvbXB0UmVzdWx0U2NoZW1hLFxuICAgIExpc3RQcm9tcHRzUmVzdWx0U2NoZW1hLFxuICAgIExpc3RSZXNvdXJjZXNSZXN1bHRTY2hlbWEsXG4gICAgTGlzdFJlc291cmNlVGVtcGxhdGVzUmVzdWx0U2NoZW1hLFxuICAgIFJlYWRSZXNvdXJjZVJlc3VsdFNjaGVtYSxcbiAgICBDYWxsVG9vbFJlc3VsdFNjaGVtYSxcbiAgICBMaXN0VG9vbHNSZXN1bHRTY2hlbWEsXG5dKTtcbmV4cG9ydCBjbGFzcyBNY3BFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2RlLCBtZXNzYWdlLCBkYXRhKSB7XG4gICAgICAgIHN1cGVyKGBNQ1AgZXJyb3IgJHtjb2RlfTogJHttZXNzYWdlfWApO1xuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIk1jcEVycm9yXCI7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@modelcontextprotocol/sdk/dist/esm/types.js\n");

/***/ })

};
;