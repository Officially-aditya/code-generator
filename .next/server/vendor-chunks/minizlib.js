"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/minizlib";
exports.ids = ["vendor-chunks/minizlib"];
exports.modules = {

/***/ "(rsc)/./node_modules/minizlib/dist/esm/constants.js":
/*!*****************************************************!*\
  !*** ./node_modules/minizlib/dist/esm/constants.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   constants: () => (/* binding */ constants)\n/* harmony export */ });\n/* harmony import */ var zlib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zlib */ \"zlib\");\n// Update with any zlib constants that are added or changed in the future.\n// Node v6 didn't export this, so we just hard code the version and rely\n// on all the other hard-coded values from zlib v4736.  When node v6\n// support drops, we can just export the realZlibConstants object.\n\n/* c8 ignore start */\nconst realZlibConstants = zlib__WEBPACK_IMPORTED_MODULE_0__.constants || { ZLIB_VERNUM: 4736 };\n/* c8 ignore stop */\nconst constants = Object.freeze(Object.assign(Object.create(null), {\n    Z_NO_FLUSH: 0,\n    Z_PARTIAL_FLUSH: 1,\n    Z_SYNC_FLUSH: 2,\n    Z_FULL_FLUSH: 3,\n    Z_FINISH: 4,\n    Z_BLOCK: 5,\n    Z_OK: 0,\n    Z_STREAM_END: 1,\n    Z_NEED_DICT: 2,\n    Z_ERRNO: -1,\n    Z_STREAM_ERROR: -2,\n    Z_DATA_ERROR: -3,\n    Z_MEM_ERROR: -4,\n    Z_BUF_ERROR: -5,\n    Z_VERSION_ERROR: -6,\n    Z_NO_COMPRESSION: 0,\n    Z_BEST_SPEED: 1,\n    Z_BEST_COMPRESSION: 9,\n    Z_DEFAULT_COMPRESSION: -1,\n    Z_FILTERED: 1,\n    Z_HUFFMAN_ONLY: 2,\n    Z_RLE: 3,\n    Z_FIXED: 4,\n    Z_DEFAULT_STRATEGY: 0,\n    DEFLATE: 1,\n    INFLATE: 2,\n    GZIP: 3,\n    GUNZIP: 4,\n    DEFLATERAW: 5,\n    INFLATERAW: 6,\n    UNZIP: 7,\n    BROTLI_DECODE: 8,\n    BROTLI_ENCODE: 9,\n    Z_MIN_WINDOWBITS: 8,\n    Z_MAX_WINDOWBITS: 15,\n    Z_DEFAULT_WINDOWBITS: 15,\n    Z_MIN_CHUNK: 64,\n    Z_MAX_CHUNK: Infinity,\n    Z_DEFAULT_CHUNK: 16384,\n    Z_MIN_MEMLEVEL: 1,\n    Z_MAX_MEMLEVEL: 9,\n    Z_DEFAULT_MEMLEVEL: 8,\n    Z_MIN_LEVEL: -1,\n    Z_MAX_LEVEL: 9,\n    Z_DEFAULT_LEVEL: -1,\n    BROTLI_OPERATION_PROCESS: 0,\n    BROTLI_OPERATION_FLUSH: 1,\n    BROTLI_OPERATION_FINISH: 2,\n    BROTLI_OPERATION_EMIT_METADATA: 3,\n    BROTLI_MODE_GENERIC: 0,\n    BROTLI_MODE_TEXT: 1,\n    BROTLI_MODE_FONT: 2,\n    BROTLI_DEFAULT_MODE: 0,\n    BROTLI_MIN_QUALITY: 0,\n    BROTLI_MAX_QUALITY: 11,\n    BROTLI_DEFAULT_QUALITY: 11,\n    BROTLI_MIN_WINDOW_BITS: 10,\n    BROTLI_MAX_WINDOW_BITS: 24,\n    BROTLI_LARGE_MAX_WINDOW_BITS: 30,\n    BROTLI_DEFAULT_WINDOW: 22,\n    BROTLI_MIN_INPUT_BLOCK_BITS: 16,\n    BROTLI_MAX_INPUT_BLOCK_BITS: 24,\n    BROTLI_PARAM_MODE: 0,\n    BROTLI_PARAM_QUALITY: 1,\n    BROTLI_PARAM_LGWIN: 2,\n    BROTLI_PARAM_LGBLOCK: 3,\n    BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING: 4,\n    BROTLI_PARAM_SIZE_HINT: 5,\n    BROTLI_PARAM_LARGE_WINDOW: 6,\n    BROTLI_PARAM_NPOSTFIX: 7,\n    BROTLI_PARAM_NDIRECT: 8,\n    BROTLI_DECODER_RESULT_ERROR: 0,\n    BROTLI_DECODER_RESULT_SUCCESS: 1,\n    BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT: 2,\n    BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT: 3,\n    BROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION: 0,\n    BROTLI_DECODER_PARAM_LARGE_WINDOW: 1,\n    BROTLI_DECODER_NO_ERROR: 0,\n    BROTLI_DECODER_SUCCESS: 1,\n    BROTLI_DECODER_NEEDS_MORE_INPUT: 2,\n    BROTLI_DECODER_NEEDS_MORE_OUTPUT: 3,\n    BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE: -1,\n    BROTLI_DECODER_ERROR_FORMAT_RESERVED: -2,\n    BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE: -3,\n    BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET: -4,\n    BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME: -5,\n    BROTLI_DECODER_ERROR_FORMAT_CL_SPACE: -6,\n    BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE: -7,\n    BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT: -8,\n    BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1: -9,\n    BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2: -10,\n    BROTLI_DECODER_ERROR_FORMAT_TRANSFORM: -11,\n    BROTLI_DECODER_ERROR_FORMAT_DICTIONARY: -12,\n    BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS: -13,\n    BROTLI_DECODER_ERROR_FORMAT_PADDING_1: -14,\n    BROTLI_DECODER_ERROR_FORMAT_PADDING_2: -15,\n    BROTLI_DECODER_ERROR_FORMAT_DISTANCE: -16,\n    BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET: -19,\n    BROTLI_DECODER_ERROR_INVALID_ARGUMENTS: -20,\n    BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES: -21,\n    BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS: -22,\n    BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP: -25,\n    BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1: -26,\n    BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2: -27,\n    BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES: -30,\n    BROTLI_DECODER_ERROR_UNREACHABLE: -31,\n}, realZlibConstants));\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbWluaXpsaWIvZGlzdC9lc20vY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDNEI7QUFDNUI7QUFDQSwwQkFBMEIsMkNBQWtCLE1BQU07QUFDbEQ7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdml2ZS12aWJlLWFpLW5leHQvLi9ub2RlX21vZHVsZXMvbWluaXpsaWIvZGlzdC9lc20vY29uc3RhbnRzLmpzPzM2MDMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVXBkYXRlIHdpdGggYW55IHpsaWIgY29uc3RhbnRzIHRoYXQgYXJlIGFkZGVkIG9yIGNoYW5nZWQgaW4gdGhlIGZ1dHVyZS5cbi8vIE5vZGUgdjYgZGlkbid0IGV4cG9ydCB0aGlzLCBzbyB3ZSBqdXN0IGhhcmQgY29kZSB0aGUgdmVyc2lvbiBhbmQgcmVseVxuLy8gb24gYWxsIHRoZSBvdGhlciBoYXJkLWNvZGVkIHZhbHVlcyBmcm9tIHpsaWIgdjQ3MzYuICBXaGVuIG5vZGUgdjZcbi8vIHN1cHBvcnQgZHJvcHMsIHdlIGNhbiBqdXN0IGV4cG9ydCB0aGUgcmVhbFpsaWJDb25zdGFudHMgb2JqZWN0LlxuaW1wb3J0IHJlYWxabGliIGZyb20gJ3psaWInO1xuLyogYzggaWdub3JlIHN0YXJ0ICovXG5jb25zdCByZWFsWmxpYkNvbnN0YW50cyA9IHJlYWxabGliLmNvbnN0YW50cyB8fCB7IFpMSUJfVkVSTlVNOiA0NzM2IH07XG4vKiBjOCBpZ25vcmUgc3RvcCAqL1xuZXhwb3J0IGNvbnN0IGNvbnN0YW50cyA9IE9iamVjdC5mcmVlemUoT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKG51bGwpLCB7XG4gICAgWl9OT19GTFVTSDogMCxcbiAgICBaX1BBUlRJQUxfRkxVU0g6IDEsXG4gICAgWl9TWU5DX0ZMVVNIOiAyLFxuICAgIFpfRlVMTF9GTFVTSDogMyxcbiAgICBaX0ZJTklTSDogNCxcbiAgICBaX0JMT0NLOiA1LFxuICAgIFpfT0s6IDAsXG4gICAgWl9TVFJFQU1fRU5EOiAxLFxuICAgIFpfTkVFRF9ESUNUOiAyLFxuICAgIFpfRVJSTk86IC0xLFxuICAgIFpfU1RSRUFNX0VSUk9SOiAtMixcbiAgICBaX0RBVEFfRVJST1I6IC0zLFxuICAgIFpfTUVNX0VSUk9SOiAtNCxcbiAgICBaX0JVRl9FUlJPUjogLTUsXG4gICAgWl9WRVJTSU9OX0VSUk9SOiAtNixcbiAgICBaX05PX0NPTVBSRVNTSU9OOiAwLFxuICAgIFpfQkVTVF9TUEVFRDogMSxcbiAgICBaX0JFU1RfQ09NUFJFU1NJT046IDksXG4gICAgWl9ERUZBVUxUX0NPTVBSRVNTSU9OOiAtMSxcbiAgICBaX0ZJTFRFUkVEOiAxLFxuICAgIFpfSFVGRk1BTl9PTkxZOiAyLFxuICAgIFpfUkxFOiAzLFxuICAgIFpfRklYRUQ6IDQsXG4gICAgWl9ERUZBVUxUX1NUUkFURUdZOiAwLFxuICAgIERFRkxBVEU6IDEsXG4gICAgSU5GTEFURTogMixcbiAgICBHWklQOiAzLFxuICAgIEdVTlpJUDogNCxcbiAgICBERUZMQVRFUkFXOiA1LFxuICAgIElORkxBVEVSQVc6IDYsXG4gICAgVU5aSVA6IDcsXG4gICAgQlJPVExJX0RFQ09ERTogOCxcbiAgICBCUk9UTElfRU5DT0RFOiA5LFxuICAgIFpfTUlOX1dJTkRPV0JJVFM6IDgsXG4gICAgWl9NQVhfV0lORE9XQklUUzogMTUsXG4gICAgWl9ERUZBVUxUX1dJTkRPV0JJVFM6IDE1LFxuICAgIFpfTUlOX0NIVU5LOiA2NCxcbiAgICBaX01BWF9DSFVOSzogSW5maW5pdHksXG4gICAgWl9ERUZBVUxUX0NIVU5LOiAxNjM4NCxcbiAgICBaX01JTl9NRU1MRVZFTDogMSxcbiAgICBaX01BWF9NRU1MRVZFTDogOSxcbiAgICBaX0RFRkFVTFRfTUVNTEVWRUw6IDgsXG4gICAgWl9NSU5fTEVWRUw6IC0xLFxuICAgIFpfTUFYX0xFVkVMOiA5LFxuICAgIFpfREVGQVVMVF9MRVZFTDogLTEsXG4gICAgQlJPVExJX09QRVJBVElPTl9QUk9DRVNTOiAwLFxuICAgIEJST1RMSV9PUEVSQVRJT05fRkxVU0g6IDEsXG4gICAgQlJPVExJX09QRVJBVElPTl9GSU5JU0g6IDIsXG4gICAgQlJPVExJX09QRVJBVElPTl9FTUlUX01FVEFEQVRBOiAzLFxuICAgIEJST1RMSV9NT0RFX0dFTkVSSUM6IDAsXG4gICAgQlJPVExJX01PREVfVEVYVDogMSxcbiAgICBCUk9UTElfTU9ERV9GT05UOiAyLFxuICAgIEJST1RMSV9ERUZBVUxUX01PREU6IDAsXG4gICAgQlJPVExJX01JTl9RVUFMSVRZOiAwLFxuICAgIEJST1RMSV9NQVhfUVVBTElUWTogMTEsXG4gICAgQlJPVExJX0RFRkFVTFRfUVVBTElUWTogMTEsXG4gICAgQlJPVExJX01JTl9XSU5ET1dfQklUUzogMTAsXG4gICAgQlJPVExJX01BWF9XSU5ET1dfQklUUzogMjQsXG4gICAgQlJPVExJX0xBUkdFX01BWF9XSU5ET1dfQklUUzogMzAsXG4gICAgQlJPVExJX0RFRkFVTFRfV0lORE9XOiAyMixcbiAgICBCUk9UTElfTUlOX0lOUFVUX0JMT0NLX0JJVFM6IDE2LFxuICAgIEJST1RMSV9NQVhfSU5QVVRfQkxPQ0tfQklUUzogMjQsXG4gICAgQlJPVExJX1BBUkFNX01PREU6IDAsXG4gICAgQlJPVExJX1BBUkFNX1FVQUxJVFk6IDEsXG4gICAgQlJPVExJX1BBUkFNX0xHV0lOOiAyLFxuICAgIEJST1RMSV9QQVJBTV9MR0JMT0NLOiAzLFxuICAgIEJST1RMSV9QQVJBTV9ESVNBQkxFX0xJVEVSQUxfQ09OVEVYVF9NT0RFTElORzogNCxcbiAgICBCUk9UTElfUEFSQU1fU0laRV9ISU5UOiA1LFxuICAgIEJST1RMSV9QQVJBTV9MQVJHRV9XSU5ET1c6IDYsXG4gICAgQlJPVExJX1BBUkFNX05QT1NURklYOiA3LFxuICAgIEJST1RMSV9QQVJBTV9ORElSRUNUOiA4LFxuICAgIEJST1RMSV9ERUNPREVSX1JFU1VMVF9FUlJPUjogMCxcbiAgICBCUk9UTElfREVDT0RFUl9SRVNVTFRfU1VDQ0VTUzogMSxcbiAgICBCUk9UTElfREVDT0RFUl9SRVNVTFRfTkVFRFNfTU9SRV9JTlBVVDogMixcbiAgICBCUk9UTElfREVDT0RFUl9SRVNVTFRfTkVFRFNfTU9SRV9PVVRQVVQ6IDMsXG4gICAgQlJPVExJX0RFQ09ERVJfUEFSQU1fRElTQUJMRV9SSU5HX0JVRkZFUl9SRUFMTE9DQVRJT046IDAsXG4gICAgQlJPVExJX0RFQ09ERVJfUEFSQU1fTEFSR0VfV0lORE9XOiAxLFxuICAgIEJST1RMSV9ERUNPREVSX05PX0VSUk9SOiAwLFxuICAgIEJST1RMSV9ERUNPREVSX1NVQ0NFU1M6IDEsXG4gICAgQlJPVExJX0RFQ09ERVJfTkVFRFNfTU9SRV9JTlBVVDogMixcbiAgICBCUk9UTElfREVDT0RFUl9ORUVEU19NT1JFX09VVFBVVDogMyxcbiAgICBCUk9UTElfREVDT0RFUl9FUlJPUl9GT1JNQVRfRVhVQkVSQU5UX05JQkJMRTogLTEsXG4gICAgQlJPVExJX0RFQ09ERVJfRVJST1JfRk9STUFUX1JFU0VSVkVEOiAtMixcbiAgICBCUk9UTElfREVDT0RFUl9FUlJPUl9GT1JNQVRfRVhVQkVSQU5UX01FVEFfTklCQkxFOiAtMyxcbiAgICBCUk9UTElfREVDT0RFUl9FUlJPUl9GT1JNQVRfU0lNUExFX0hVRkZNQU5fQUxQSEFCRVQ6IC00LFxuICAgIEJST1RMSV9ERUNPREVSX0VSUk9SX0ZPUk1BVF9TSU1QTEVfSFVGRk1BTl9TQU1FOiAtNSxcbiAgICBCUk9UTElfREVDT0RFUl9FUlJPUl9GT1JNQVRfQ0xfU1BBQ0U6IC02LFxuICAgIEJST1RMSV9ERUNPREVSX0VSUk9SX0ZPUk1BVF9IVUZGTUFOX1NQQUNFOiAtNyxcbiAgICBCUk9UTElfREVDT0RFUl9FUlJPUl9GT1JNQVRfQ09OVEVYVF9NQVBfUkVQRUFUOiAtOCxcbiAgICBCUk9UTElfREVDT0RFUl9FUlJPUl9GT1JNQVRfQkxPQ0tfTEVOR1RIXzE6IC05LFxuICAgIEJST1RMSV9ERUNPREVSX0VSUk9SX0ZPUk1BVF9CTE9DS19MRU5HVEhfMjogLTEwLFxuICAgIEJST1RMSV9ERUNPREVSX0VSUk9SX0ZPUk1BVF9UUkFOU0ZPUk06IC0xMSxcbiAgICBCUk9UTElfREVDT0RFUl9FUlJPUl9GT1JNQVRfRElDVElPTkFSWTogLTEyLFxuICAgIEJST1RMSV9ERUNPREVSX0VSUk9SX0ZPUk1BVF9XSU5ET1dfQklUUzogLTEzLFxuICAgIEJST1RMSV9ERUNPREVSX0VSUk9SX0ZPUk1BVF9QQURESU5HXzE6IC0xNCxcbiAgICBCUk9UTElfREVDT0RFUl9FUlJPUl9GT1JNQVRfUEFERElOR18yOiAtMTUsXG4gICAgQlJPVExJX0RFQ09ERVJfRVJST1JfRk9STUFUX0RJU1RBTkNFOiAtMTYsXG4gICAgQlJPVExJX0RFQ09ERVJfRVJST1JfRElDVElPTkFSWV9OT1RfU0VUOiAtMTksXG4gICAgQlJPVExJX0RFQ09ERVJfRVJST1JfSU5WQUxJRF9BUkdVTUVOVFM6IC0yMCxcbiAgICBCUk9UTElfREVDT0RFUl9FUlJPUl9BTExPQ19DT05URVhUX01PREVTOiAtMjEsXG4gICAgQlJPVExJX0RFQ09ERVJfRVJST1JfQUxMT0NfVFJFRV9HUk9VUFM6IC0yMixcbiAgICBCUk9UTElfREVDT0RFUl9FUlJPUl9BTExPQ19DT05URVhUX01BUDogLTI1LFxuICAgIEJST1RMSV9ERUNPREVSX0VSUk9SX0FMTE9DX1JJTkdfQlVGRkVSXzE6IC0yNixcbiAgICBCUk9UTElfREVDT0RFUl9FUlJPUl9BTExPQ19SSU5HX0JVRkZFUl8yOiAtMjcsXG4gICAgQlJPVExJX0RFQ09ERVJfRVJST1JfQUxMT0NfQkxPQ0tfVFlQRV9UUkVFUzogLTMwLFxuICAgIEJST1RMSV9ERUNPREVSX0VSUk9SX1VOUkVBQ0hBQkxFOiAtMzEsXG59LCByZWFsWmxpYkNvbnN0YW50cykpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/minizlib/dist/esm/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/minizlib/dist/esm/index.js":
/*!*************************************************!*\
  !*** ./node_modules/minizlib/dist/esm/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var zlib__WEBPACK_IMPORTED_MODULE_3___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Brotli: () => (/* binding */ Brotli),\n/* harmony export */   BrotliCompress: () => (/* binding */ BrotliCompress),\n/* harmony export */   BrotliDecompress: () => (/* binding */ BrotliDecompress),\n/* harmony export */   Deflate: () => (/* binding */ Deflate),\n/* harmony export */   DeflateRaw: () => (/* binding */ DeflateRaw),\n/* harmony export */   Gunzip: () => (/* binding */ Gunzip),\n/* harmony export */   Gzip: () => (/* binding */ Gzip),\n/* harmony export */   Inflate: () => (/* binding */ Inflate),\n/* harmony export */   InflateRaw: () => (/* binding */ InflateRaw),\n/* harmony export */   Unzip: () => (/* binding */ Unzip),\n/* harmony export */   Zlib: () => (/* binding */ Zlib),\n/* harmony export */   ZlibError: () => (/* binding */ ZlibError),\n/* harmony export */   constants: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_4__.constants)\n/* harmony export */ });\n/* harmony import */ var assert__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! assert */ \"assert\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! buffer */ \"buffer\");\n/* harmony import */ var minipass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! minipass */ \"(rsc)/./node_modules/minipass/dist/esm/index.js\");\n/* harmony import */ var zlib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zlib */ \"zlib\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./constants.js */ \"(rsc)/./node_modules/minizlib/dist/esm/constants.js\");\n\n\n\n\n\n\nconst OriginalBufferConcat = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.concat;\nconst desc = Object.getOwnPropertyDescriptor(buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer, 'concat');\nconst noop = (args) => args;\nconst passthroughBufferConcat = desc?.writable === true || desc?.set !== undefined\n    ? (makeNoOp) => {\n        buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.concat = makeNoOp ? noop : OriginalBufferConcat;\n    }\n    : (_) => { };\nconst _superWrite = Symbol('_superWrite');\nclass ZlibError extends Error {\n    code;\n    errno;\n    constructor(err) {\n        super('zlib: ' + err.message);\n        this.code = err.code;\n        this.errno = err.errno;\n        /* c8 ignore next */\n        if (!this.code)\n            this.code = 'ZLIB_ERROR';\n        this.message = 'zlib: ' + err.message;\n        Error.captureStackTrace(this, this.constructor);\n    }\n    get name() {\n        return 'ZlibError';\n    }\n}\n// the Zlib class they all inherit from\n// This thing manages the queue of requests, and returns\n// true or false if there is anything in the queue when\n// you call the .write() method.\nconst _flushFlag = Symbol('flushFlag');\nclass ZlibBase extends minipass__WEBPACK_IMPORTED_MODULE_2__.Minipass {\n    #sawError = false;\n    #ended = false;\n    #flushFlag;\n    #finishFlushFlag;\n    #fullFlushFlag;\n    #handle;\n    #onError;\n    get sawError() {\n        return this.#sawError;\n    }\n    get handle() {\n        return this.#handle;\n    }\n    /* c8 ignore start */\n    get flushFlag() {\n        return this.#flushFlag;\n    }\n    /* c8 ignore stop */\n    constructor(opts, mode) {\n        if (!opts || typeof opts !== 'object')\n            throw new TypeError('invalid options for ZlibBase constructor');\n        //@ts-ignore\n        super(opts);\n        /* c8 ignore start */\n        this.#flushFlag = opts.flush ?? 0;\n        this.#finishFlushFlag = opts.finishFlush ?? 0;\n        this.#fullFlushFlag = opts.fullFlushFlag ?? 0;\n        /* c8 ignore stop */\n        // this will throw if any options are invalid for the class selected\n        try {\n            // @types/node doesn't know that it exports the classes, but they're there\n            //@ts-ignore\n            this.#handle = new /*#__PURE__*/ (zlib__WEBPACK_IMPORTED_MODULE_3___namespace_cache || (zlib__WEBPACK_IMPORTED_MODULE_3___namespace_cache = __webpack_require__.t(zlib__WEBPACK_IMPORTED_MODULE_3__, 2)))[mode](opts);\n        }\n        catch (er) {\n            // make sure that all errors get decorated properly\n            throw new ZlibError(er);\n        }\n        this.#onError = err => {\n            // no sense raising multiple errors, since we abort on the first one.\n            if (this.#sawError)\n                return;\n            this.#sawError = true;\n            // there is no way to cleanly recover.\n            // continuing only obscures problems.\n            this.close();\n            this.emit('error', err);\n        };\n        this.#handle?.on('error', er => this.#onError(new ZlibError(er)));\n        this.once('end', () => this.close);\n    }\n    close() {\n        if (this.#handle) {\n            this.#handle.close();\n            this.#handle = undefined;\n            this.emit('close');\n        }\n    }\n    reset() {\n        if (!this.#sawError) {\n            assert__WEBPACK_IMPORTED_MODULE_0__(this.#handle, 'zlib binding closed');\n            //@ts-ignore\n            return this.#handle.reset?.();\n        }\n    }\n    flush(flushFlag) {\n        if (this.ended)\n            return;\n        if (typeof flushFlag !== 'number')\n            flushFlag = this.#fullFlushFlag;\n        this.write(Object.assign(buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.alloc(0), { [_flushFlag]: flushFlag }));\n    }\n    end(chunk, encoding, cb) {\n        /* c8 ignore start */\n        if (typeof chunk === 'function') {\n            cb = chunk;\n            encoding = undefined;\n            chunk = undefined;\n        }\n        if (typeof encoding === 'function') {\n            cb = encoding;\n            encoding = undefined;\n        }\n        /* c8 ignore stop */\n        if (chunk) {\n            if (encoding)\n                this.write(chunk, encoding);\n            else\n                this.write(chunk);\n        }\n        this.flush(this.#finishFlushFlag);\n        this.#ended = true;\n        return super.end(cb);\n    }\n    get ended() {\n        return this.#ended;\n    }\n    // overridden in the gzip classes to do portable writes\n    [_superWrite](data) {\n        return super.write(data);\n    }\n    write(chunk, encoding, cb) {\n        // process the chunk using the sync process\n        // then super.write() all the outputted chunks\n        if (typeof encoding === 'function')\n            (cb = encoding), (encoding = 'utf8');\n        if (typeof chunk === 'string')\n            chunk = buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(chunk, encoding);\n        if (this.#sawError)\n            return;\n        assert__WEBPACK_IMPORTED_MODULE_0__(this.#handle, 'zlib binding closed');\n        // _processChunk tries to .close() the native handle after it's done, so we\n        // intercept that by temporarily making it a no-op.\n        // diving into the node:zlib internals a bit here\n        const nativeHandle = this.#handle\n            ._handle;\n        const originalNativeClose = nativeHandle.close;\n        nativeHandle.close = () => { };\n        const originalClose = this.#handle.close;\n        this.#handle.close = () => { };\n        // It also calls `Buffer.concat()` at the end, which may be convenient\n        // for some, but which we are not interested in as it slows us down.\n        passthroughBufferConcat(true);\n        let result = undefined;\n        try {\n            const flushFlag = typeof chunk[_flushFlag] === 'number'\n                ? chunk[_flushFlag]\n                : this.#flushFlag;\n            result = this.#handle._processChunk(chunk, flushFlag);\n            // if we don't throw, reset it back how it was\n            passthroughBufferConcat(false);\n        }\n        catch (err) {\n            // or if we do, put Buffer.concat() back before we emit error\n            // Error events call into user code, which may call Buffer.concat()\n            passthroughBufferConcat(false);\n            this.#onError(new ZlibError(err));\n        }\n        finally {\n            if (this.#handle) {\n                // Core zlib resets `_handle` to null after attempting to close the\n                // native handle. Our no-op handler prevented actual closure, but we\n                // need to restore the `._handle` property.\n                ;\n                this.#handle._handle =\n                    nativeHandle;\n                nativeHandle.close = originalNativeClose;\n                this.#handle.close = originalClose;\n                // `_processChunk()` adds an 'error' listener. If we don't remove it\n                // after each call, these handlers start piling up.\n                this.#handle.removeAllListeners('error');\n                // make sure OUR error listener is still attached tho\n            }\n        }\n        if (this.#handle)\n            this.#handle.on('error', er => this.#onError(new ZlibError(er)));\n        let writeReturn;\n        if (result) {\n            if (Array.isArray(result) && result.length > 0) {\n                const r = result[0];\n                // The first buffer is always `handle._outBuffer`, which would be\n                // re-used for later invocations; so, we always have to copy that one.\n                writeReturn = this[_superWrite](buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(r));\n                for (let i = 1; i < result.length; i++) {\n                    writeReturn = this[_superWrite](result[i]);\n                }\n            }\n            else {\n                // either a single Buffer or an empty array\n                writeReturn = this[_superWrite](buffer__WEBPACK_IMPORTED_MODULE_1__.Buffer.from(result));\n            }\n        }\n        if (cb)\n            cb();\n        return writeReturn;\n    }\n}\nclass Zlib extends ZlibBase {\n    #level;\n    #strategy;\n    constructor(opts, mode) {\n        opts = opts || {};\n        opts.flush = opts.flush || _constants_js__WEBPACK_IMPORTED_MODULE_4__.constants.Z_NO_FLUSH;\n        opts.finishFlush = opts.finishFlush || _constants_js__WEBPACK_IMPORTED_MODULE_4__.constants.Z_FINISH;\n        opts.fullFlushFlag = _constants_js__WEBPACK_IMPORTED_MODULE_4__.constants.Z_FULL_FLUSH;\n        super(opts, mode);\n        this.#level = opts.level;\n        this.#strategy = opts.strategy;\n    }\n    params(level, strategy) {\n        if (this.sawError)\n            return;\n        if (!this.handle)\n            throw new Error('cannot switch params when binding is closed');\n        // no way to test this without also not supporting params at all\n        /* c8 ignore start */\n        if (!this.handle.params)\n            throw new Error('not supported in this implementation');\n        /* c8 ignore stop */\n        if (this.#level !== level || this.#strategy !== strategy) {\n            this.flush(_constants_js__WEBPACK_IMPORTED_MODULE_4__.constants.Z_SYNC_FLUSH);\n            assert__WEBPACK_IMPORTED_MODULE_0__(this.handle, 'zlib binding closed');\n            // .params() calls .flush(), but the latter is always async in the\n            // core zlib. We override .flush() temporarily to intercept that and\n            // flush synchronously.\n            const origFlush = this.handle.flush;\n            this.handle.flush = (flushFlag, cb) => {\n                /* c8 ignore start */\n                if (typeof flushFlag === 'function') {\n                    cb = flushFlag;\n                    flushFlag = this.flushFlag;\n                }\n                /* c8 ignore stop */\n                this.flush(flushFlag);\n                cb?.();\n            };\n            try {\n                ;\n                this.handle.params(level, strategy);\n            }\n            finally {\n                this.handle.flush = origFlush;\n            }\n            /* c8 ignore start */\n            if (this.handle) {\n                this.#level = level;\n                this.#strategy = strategy;\n            }\n            /* c8 ignore stop */\n        }\n    }\n}\n// minimal 2-byte header\nclass Deflate extends Zlib {\n    constructor(opts) {\n        super(opts, 'Deflate');\n    }\n}\nclass Inflate extends Zlib {\n    constructor(opts) {\n        super(opts, 'Inflate');\n    }\n}\nclass Gzip extends Zlib {\n    #portable;\n    constructor(opts) {\n        super(opts, 'Gzip');\n        this.#portable = opts && !!opts.portable;\n    }\n    [_superWrite](data) {\n        if (!this.#portable)\n            return super[_superWrite](data);\n        // we'll always get the header emitted in one first chunk\n        // overwrite the OS indicator byte with 0xFF\n        this.#portable = false;\n        data[9] = 255;\n        return super[_superWrite](data);\n    }\n}\nclass Gunzip extends Zlib {\n    constructor(opts) {\n        super(opts, 'Gunzip');\n    }\n}\n// raw - no header\nclass DeflateRaw extends Zlib {\n    constructor(opts) {\n        super(opts, 'DeflateRaw');\n    }\n}\nclass InflateRaw extends Zlib {\n    constructor(opts) {\n        super(opts, 'InflateRaw');\n    }\n}\n// auto-detect header.\nclass Unzip extends Zlib {\n    constructor(opts) {\n        super(opts, 'Unzip');\n    }\n}\nclass Brotli extends ZlibBase {\n    constructor(opts, mode) {\n        opts = opts || {};\n        opts.flush = opts.flush || _constants_js__WEBPACK_IMPORTED_MODULE_4__.constants.BROTLI_OPERATION_PROCESS;\n        opts.finishFlush =\n            opts.finishFlush || _constants_js__WEBPACK_IMPORTED_MODULE_4__.constants.BROTLI_OPERATION_FINISH;\n        opts.fullFlushFlag = _constants_js__WEBPACK_IMPORTED_MODULE_4__.constants.BROTLI_OPERATION_FLUSH;\n        super(opts, mode);\n    }\n}\nclass BrotliCompress extends Brotli {\n    constructor(opts) {\n        super(opts, 'BrotliCompress');\n    }\n}\nclass BrotliDecompress extends Brotli {\n    constructor(opts) {\n        super(opts, 'BrotliDecompress');\n    }\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/minizlib/dist/esm/index.js\n");

/***/ })

};
;