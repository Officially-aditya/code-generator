"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/dockerfile-ast";
exports.ids = ["vendor-chunks/dockerfile-ast"];
exports.modules = {

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/argument.js":
/*!*****************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/argument.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Argument = void 0;\nclass Argument {\n    constructor(value, range) {\n        this.value = value;\n        this.range = range;\n    }\n    toString() {\n        return this.value;\n    }\n    getRange() {\n        return this.range;\n    }\n    getValue() {\n        return this.value;\n    }\n    isAfter(position) {\n        if (this.range.end.line < position.line) {\n            return false;\n        }\n        return this.range.start.line > position.line ? true : this.range.start.character > position.character;\n    }\n    isBefore(position) {\n        if (this.range.start.line < position.line) {\n            return true;\n        }\n        return this.range.end.line > position.line ? false : this.range.end.character < position.character;\n    }\n}\nexports.Argument = Argument;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2FyZ3VtZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aXZlLXZpYmUtYWktbmV4dC8uL25vZGVfbW9kdWxlcy9kb2NrZXJmaWxlLWFzdC9saWIvYXJndW1lbnQuanM/ZDdmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXJndW1lbnQgPSB2b2lkIDA7XG5jbGFzcyBBcmd1bWVudCB7XG4gICAgY29uc3RydWN0b3IodmFsdWUsIHJhbmdlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5yYW5nZSA9IHJhbmdlO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgfVxuICAgIGdldFJhbmdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYW5nZTtcbiAgICB9XG4gICAgZ2V0VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgIH1cbiAgICBpc0FmdGVyKHBvc2l0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLnJhbmdlLmVuZC5saW5lIDwgcG9zaXRpb24ubGluZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnJhbmdlLnN0YXJ0LmxpbmUgPiBwb3NpdGlvbi5saW5lID8gdHJ1ZSA6IHRoaXMucmFuZ2Uuc3RhcnQuY2hhcmFjdGVyID4gcG9zaXRpb24uY2hhcmFjdGVyO1xuICAgIH1cbiAgICBpc0JlZm9yZShwb3NpdGlvbikge1xuICAgICAgICBpZiAodGhpcy5yYW5nZS5zdGFydC5saW5lIDwgcG9zaXRpb24ubGluZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucmFuZ2UuZW5kLmxpbmUgPiBwb3NpdGlvbi5saW5lID8gZmFsc2UgOiB0aGlzLnJhbmdlLmVuZC5jaGFyYWN0ZXIgPCBwb3NpdGlvbi5jaGFyYWN0ZXI7XG4gICAgfVxufVxuZXhwb3J0cy5Bcmd1bWVudCA9IEFyZ3VtZW50O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/argument.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/comment.js":
/*!****************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/comment.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Comment = void 0;\nconst vscode_languageserver_types_1 = __webpack_require__(/*! vscode-languageserver-types */ \"(rsc)/./node_modules/vscode-languageserver-types/lib/umd/main.js\");\nconst line_1 = __webpack_require__(/*! ./line */ \"(rsc)/./node_modules/dockerfile-ast/lib/line.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/dockerfile-ast/lib/util.js\");\nclass Comment extends line_1.Line {\n    constructor(document, range) {\n        super(document, range);\n    }\n    toString() {\n        const content = this.getContent();\n        if (content) {\n            return \"# \" + content;\n        }\n        return \"#\";\n    }\n    /**\n     * Returns the content of this comment. This excludes leading and\n     * trailing whitespace as well as the # symbol. If the comment only\n     * consists of whitespace, the empty string will be returned.\n     */\n    getContent() {\n        let range = this.getContentRange();\n        if (range === null) {\n            return \"\";\n        }\n        return this.document.getText().substring(this.document.offsetAt(range.start), this.document.offsetAt(range.end));\n    }\n    /**\n     * Returns a range that includes the content of the comment\n     * excluding any leading and trailing whitespace as well as the #\n     * symbol. May return null if the comment only consists of whitespace\n     * characters.\n     */\n    getContentRange() {\n        let range = this.getRange();\n        const startOffset = this.document.offsetAt(range.start);\n        let raw = this.document.getText().substring(startOffset, this.document.offsetAt(range.end));\n        let start = -1;\n        let end = -1;\n        // skip the first # symbol\n        for (let i = 1; i < raw.length; i++) {\n            if (!util_1.Util.isWhitespace(raw.charAt(i))) {\n                start = i;\n                break;\n            }\n        }\n        if (start === -1) {\n            return null;\n        }\n        // go backwards up to the first # symbol\n        for (let i = raw.length - 1; i >= 1; i--) {\n            if (!util_1.Util.isWhitespace(raw.charAt(i))) {\n                end = i + 1;\n                break;\n            }\n        }\n        return vscode_languageserver_types_1.Range.create(this.document.positionAt(startOffset + start), this.document.positionAt(startOffset + end));\n    }\n}\nexports.Comment = Comment;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2NvbW1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZTtBQUNmLHNDQUFzQyxtQkFBTyxDQUFDLHFHQUE2QjtBQUMzRSxlQUFlLG1CQUFPLENBQUMsK0RBQVE7QUFDL0IsZUFBZSxtQkFBTyxDQUFDLCtEQUFRO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnQkFBZ0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLFFBQVE7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aXZlLXZpYmUtYWktbmV4dC8uL25vZGVfbW9kdWxlcy9kb2NrZXJmaWxlLWFzdC9saWIvY29tbWVudC5qcz9jNWU0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db21tZW50ID0gdm9pZCAwO1xuY29uc3QgdnNjb2RlX2xhbmd1YWdlc2VydmVyX3R5cGVzXzEgPSByZXF1aXJlKFwidnNjb2RlLWxhbmd1YWdlc2VydmVyLXR5cGVzXCIpO1xuY29uc3QgbGluZV8xID0gcmVxdWlyZShcIi4vbGluZVwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5jbGFzcyBDb21tZW50IGV4dGVuZHMgbGluZV8xLkxpbmUge1xuICAgIGNvbnN0cnVjdG9yKGRvY3VtZW50LCByYW5nZSkge1xuICAgICAgICBzdXBlcihkb2N1bWVudCwgcmFuZ2UpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgY29uc3QgY29udGVudCA9IHRoaXMuZ2V0Q29udGVudCgpO1xuICAgICAgICBpZiAoY29udGVudCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiIyBcIiArIGNvbnRlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFwiI1wiO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjb250ZW50IG9mIHRoaXMgY29tbWVudC4gVGhpcyBleGNsdWRlcyBsZWFkaW5nIGFuZFxuICAgICAqIHRyYWlsaW5nIHdoaXRlc3BhY2UgYXMgd2VsbCBhcyB0aGUgIyBzeW1ib2wuIElmIHRoZSBjb21tZW50IG9ubHlcbiAgICAgKiBjb25zaXN0cyBvZiB3aGl0ZXNwYWNlLCB0aGUgZW1wdHkgc3RyaW5nIHdpbGwgYmUgcmV0dXJuZWQuXG4gICAgICovXG4gICAgZ2V0Q29udGVudCgpIHtcbiAgICAgICAgbGV0IHJhbmdlID0gdGhpcy5nZXRDb250ZW50UmFuZ2UoKTtcbiAgICAgICAgaWYgKHJhbmdlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5kb2N1bWVudC5nZXRUZXh0KCkuc3Vic3RyaW5nKHRoaXMuZG9jdW1lbnQub2Zmc2V0QXQocmFuZ2Uuc3RhcnQpLCB0aGlzLmRvY3VtZW50Lm9mZnNldEF0KHJhbmdlLmVuZCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgcmFuZ2UgdGhhdCBpbmNsdWRlcyB0aGUgY29udGVudCBvZiB0aGUgY29tbWVudFxuICAgICAqIGV4Y2x1ZGluZyBhbnkgbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZSBhcyB3ZWxsIGFzIHRoZSAjXG4gICAgICogc3ltYm9sLiBNYXkgcmV0dXJuIG51bGwgaWYgdGhlIGNvbW1lbnQgb25seSBjb25zaXN0cyBvZiB3aGl0ZXNwYWNlXG4gICAgICogY2hhcmFjdGVycy5cbiAgICAgKi9cbiAgICBnZXRDb250ZW50UmFuZ2UoKSB7XG4gICAgICAgIGxldCByYW5nZSA9IHRoaXMuZ2V0UmFuZ2UoKTtcbiAgICAgICAgY29uc3Qgc3RhcnRPZmZzZXQgPSB0aGlzLmRvY3VtZW50Lm9mZnNldEF0KHJhbmdlLnN0YXJ0KTtcbiAgICAgICAgbGV0IHJhdyA9IHRoaXMuZG9jdW1lbnQuZ2V0VGV4dCgpLnN1YnN0cmluZyhzdGFydE9mZnNldCwgdGhpcy5kb2N1bWVudC5vZmZzZXRBdChyYW5nZS5lbmQpKTtcbiAgICAgICAgbGV0IHN0YXJ0ID0gLTE7XG4gICAgICAgIGxldCBlbmQgPSAtMTtcbiAgICAgICAgLy8gc2tpcCB0aGUgZmlyc3QgIyBzeW1ib2xcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCByYXcubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICghdXRpbF8xLlV0aWwuaXNXaGl0ZXNwYWNlKHJhdy5jaGFyQXQoaSkpKSB7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSBpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIC8vIGdvIGJhY2t3YXJkcyB1cCB0byB0aGUgZmlyc3QgIyBzeW1ib2xcbiAgICAgICAgZm9yIChsZXQgaSA9IHJhdy5sZW5ndGggLSAxOyBpID49IDE7IGktLSkge1xuICAgICAgICAgICAgaWYgKCF1dGlsXzEuVXRpbC5pc1doaXRlc3BhY2UocmF3LmNoYXJBdChpKSkpIHtcbiAgICAgICAgICAgICAgICBlbmQgPSBpICsgMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdnNjb2RlX2xhbmd1YWdlc2VydmVyX3R5cGVzXzEuUmFuZ2UuY3JlYXRlKHRoaXMuZG9jdW1lbnQucG9zaXRpb25BdChzdGFydE9mZnNldCArIHN0YXJ0KSwgdGhpcy5kb2N1bWVudC5wb3NpdGlvbkF0KHN0YXJ0T2Zmc2V0ICsgZW5kKSk7XG4gICAgfVxufVxuZXhwb3J0cy5Db21tZW50ID0gQ29tbWVudDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/comment.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/dockerfile.js":
/*!*******************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/dockerfile.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* --------------------------------------------------------------------------------------------\n * Copyright (c) Remy Suen. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Dockerfile = void 0;\nconst vscode_languageserver_types_1 = __webpack_require__(/*! vscode-languageserver-types */ \"(rsc)/./node_modules/vscode-languageserver-types/lib/umd/main.js\");\nconst ast = __webpack_require__(/*! ./main */ \"(rsc)/./node_modules/dockerfile-ast/lib/main.js\");\nconst imageTemplate_1 = __webpack_require__(/*! ./imageTemplate */ \"(rsc)/./node_modules/dockerfile-ast/lib/imageTemplate.js\");\nconst from_1 = __webpack_require__(/*! ./instructions/from */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/from.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/dockerfile-ast/lib/util.js\");\nconst main_1 = __webpack_require__(/*! ./main */ \"(rsc)/./node_modules/dockerfile-ast/lib/main.js\");\nclass Dockerfile extends imageTemplate_1.ImageTemplate {\n    constructor(document) {\n        super();\n        this.initialInstructions = new imageTemplate_1.ImageTemplate();\n        this.buildStages = [];\n        this.directives = [];\n        /**\n         * Whether a FROM instruction has been added to this Dockerfile or not.\n         */\n        this.foundFrom = false;\n        this.document = document;\n    }\n    getEscapeCharacter() {\n        for (const directive of this.directives) {\n            if (directive.getDirective() === ast.Directive.escape) {\n                const value = directive.getValue();\n                if (value === '\\\\' || value === '`') {\n                    return value;\n                }\n            }\n        }\n        return '\\\\';\n    }\n    getInitialARGs() {\n        return this.initialInstructions.getARGs();\n    }\n    getContainingImage(position) {\n        let range = vscode_languageserver_types_1.Range.create(vscode_languageserver_types_1.Position.create(0, 0), this.document.positionAt(this.document.getText().length));\n        if (!util_1.Util.isInsideRange(position, range)) {\n            // not inside the document, invalid position\n            return null;\n        }\n        if (this.initialInstructions.getComments().length > 0 || this.initialInstructions.getInstructions().length > 0) {\n            if (util_1.Util.isInsideRange(position, this.initialInstructions.getRange())) {\n                return this.initialInstructions;\n            }\n        }\n        for (const buildStage of this.buildStages) {\n            if (util_1.Util.isInsideRange(position, buildStage.getRange())) {\n                return buildStage;\n            }\n        }\n        return this;\n    }\n    addInstruction(instruction) {\n        if (instruction.getKeyword() === main_1.Keyword.FROM) {\n            this.currentBuildStage = new imageTemplate_1.ImageTemplate();\n            this.buildStages.push(this.currentBuildStage);\n            this.foundFrom = true;\n        }\n        else if (!this.foundFrom) {\n            this.initialInstructions.addInstruction(instruction);\n        }\n        if (this.foundFrom) {\n            this.currentBuildStage.addInstruction(instruction);\n        }\n        super.addInstruction(instruction);\n    }\n    setDirectives(directives) {\n        this.directives = directives;\n    }\n    getDirective() {\n        return this.directives.length === 0 ? null : this.directives[0];\n    }\n    getDirectives() {\n        return this.directives;\n    }\n    resolveVariable(variable, line) {\n        for (let from of this.getFROMs()) {\n            let range = from.getRange();\n            if (range.start.line <= line && line <= range.end.line) {\n                // resolve the FROM variable against the initial ARGs\n                let initialARGs = new imageTemplate_1.ImageTemplate();\n                for (let instruction of this.initialInstructions.getARGs()) {\n                    initialARGs.addInstruction(instruction);\n                }\n                return initialARGs.resolveVariable(variable, line);\n            }\n        }\n        let image = this.getContainingImage(vscode_languageserver_types_1.Position.create(line, 0));\n        if (image === null) {\n            return undefined;\n        }\n        let resolvedVariable = image.resolveVariable(variable, line);\n        if (resolvedVariable === null) {\n            // refers to an uninitialized ARG variable,\n            // try resolving it against the initial ARGs then\n            let initialARGs = new imageTemplate_1.ImageTemplate();\n            for (let instruction of this.initialInstructions.getARGs()) {\n                initialARGs.addInstruction(instruction);\n            }\n            return initialARGs.resolveVariable(variable, line);\n        }\n        return resolvedVariable;\n    }\n    getAvailableVariables(currentLine) {\n        if (this.getInstructionAt(currentLine) instanceof from_1.From) {\n            let variables = [];\n            for (let arg of this.getInitialARGs()) {\n                let property = arg.getProperty();\n                if (property) {\n                    variables.push(property.getName());\n                }\n            }\n            return variables;\n        }\n        let image = this.getContainingImage(vscode_languageserver_types_1.Position.create(currentLine, 0));\n        return image ? image.getAvailableVariables(currentLine) : [];\n    }\n    getParentStage(image) {\n        const templateFrom = image.getFROM();\n        const imageName = templateFrom === null ? null : templateFrom.getImageName();\n        if (imageName === null) {\n            return null;\n        }\n        for (const from of this.getFROMs()) {\n            if (from.getBuildStage() === imageName) {\n                const range = from.getRange();\n                // on the same line then it's an image that shares the name as the build stage\n                if (range.start.line === templateFrom.getRange().start.line) {\n                    return null;\n                }\n                return this.getContainingImage(range.start);\n            }\n        }\n        return null;\n    }\n    getStageHierarchy(line) {\n        const image = this.getContainingImage(vscode_languageserver_types_1.Position.create(line, 0));\n        if (image === null) {\n            return [];\n        }\n        const stages = [image];\n        let stage = this.getParentStage(image);\n        while (stage !== null) {\n            stages.splice(0, 0, stage);\n            stage = this.getParentStage(stage);\n        }\n        return stages;\n    }\n    getAvailableWorkingDirectories(line) {\n        const availableDirectories = new Set();\n        for (const image of this.getStageHierarchy(line)) {\n            for (const workdir of image.getWORKDIRs()) {\n                if (workdir.getRange().end.line < line) {\n                    let directory = workdir.getAbsolutePath();\n                    if (directory !== undefined && directory !== null) {\n                        if (!directory.endsWith(\"/\")) {\n                            directory += \"/\";\n                        }\n                        availableDirectories.add(directory);\n                    }\n                }\n            }\n        }\n        return Array.from(availableDirectories);\n    }\n    /**\n     * Internally reorganize the comments in the Dockerfile and allocate\n     * them to the relevant build stages that they belong to.\n     */\n    organizeComments() {\n        const comments = this.getComments();\n        for (let i = 0; i < comments.length; i++) {\n            if (util_1.Util.isInsideRange(comments[i].getRange().end, this.initialInstructions.getRange())) {\n                this.initialInstructions.addComment(comments[i]);\n            }\n            else {\n                for (const buildStage of this.buildStages) {\n                    if (util_1.Util.isInsideRange(comments[i].getRange().start, buildStage.getRange())) {\n                        buildStage.addComment(comments[i]);\n                    }\n                }\n            }\n        }\n    }\n    getRange() {\n        const comments = this.getComments();\n        const instructions = this.getInstructions();\n        let range = null;\n        if (comments.length === 0) {\n            if (instructions.length > 0) {\n                range = vscode_languageserver_types_1.Range.create(instructions[0].getRange().start, instructions[instructions.length - 1].getRange().end);\n            }\n        }\n        else if (instructions.length === 0) {\n            range = vscode_languageserver_types_1.Range.create(comments[0].getRange().start, comments[comments.length - 1].getRange().end);\n        }\n        else {\n            const commentStart = comments[0].getRange().start;\n            const commentEnd = comments[comments.length - 1].getRange().end;\n            const instructionStart = instructions[0].getRange().start;\n            const instructionEnd = instructions[instructions.length - 1].getRange().end;\n            if (commentStart.line < instructionStart.line) {\n                if (commentEnd.line < instructionEnd.line) {\n                    range = vscode_languageserver_types_1.Range.create(commentStart, instructionEnd);\n                }\n                range = vscode_languageserver_types_1.Range.create(commentStart, commentEnd);\n            }\n            else if (commentEnd.line < instructionEnd.line) {\n                range = vscode_languageserver_types_1.Range.create(instructionStart, instructionEnd);\n            }\n            else {\n                range = vscode_languageserver_types_1.Range.create(instructionStart, commentEnd);\n            }\n        }\n        if (range === null) {\n            if (this.directives.length === 0) {\n                return null;\n            }\n            return this.directives[0].getRange();\n        }\n        else if (this.directives.length === 0) {\n            return range;\n        }\n        return vscode_languageserver_types_1.Range.create(this.directives[0].getRange().start, range.end);\n    }\n}\nexports.Dockerfile = Dockerfile;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/dockerfile.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/flag.js":
/*!*************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/flag.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Flag = void 0;\nconst vscode_languageserver_types_1 = __webpack_require__(/*! vscode-languageserver-types */ \"(rsc)/./node_modules/vscode-languageserver-types/lib/umd/main.js\");\nconst flagOption_1 = __webpack_require__(/*! ./flagOption */ \"(rsc)/./node_modules/dockerfile-ast/lib/flagOption.js\");\nclass Flag {\n    constructor(document, range, name, nameRange, value, valueRange) {\n        this.options = [];\n        this.range = range;\n        this.name = name;\n        this.nameRange = nameRange;\n        this.value = value;\n        this.valueRange = valueRange;\n        if (this.value !== null) {\n            let offset = document.offsetAt(valueRange.start);\n            let nameStart = -1;\n            let valueStart = -1;\n            let hasOptions = false;\n            for (let i = 0; i < value.length; i++) {\n                switch (value.charAt(i)) {\n                    case '=':\n                        hasOptions = true;\n                        if (valueStart === -1) {\n                            valueStart = i + 1;\n                            break;\n                        }\n                        break;\n                    case ',':\n                        this.options.push(this.createFlagOption(document, value, offset, nameStart, valueStart, i));\n                        nameStart = -1;\n                        valueStart = -1;\n                        break;\n                    default:\n                        if (nameStart === -1) {\n                            nameStart = i;\n                        }\n                        break;\n                }\n            }\n            if (hasOptions && nameStart !== -1) {\n                this.options.push(this.createFlagOption(document, value, offset, nameStart, valueStart, value.length));\n            }\n        }\n    }\n    createFlagOption(document, content, documentOffset, nameStart, valueStart, valueEnd) {\n        const optionRange = vscode_languageserver_types_1.Range.create(document.positionAt(documentOffset + nameStart), document.positionAt(documentOffset + valueEnd));\n        if (valueStart === -1) {\n            return new flagOption_1.FlagOption(optionRange, content.substring(nameStart, valueEnd), optionRange, null, null);\n        }\n        return new flagOption_1.FlagOption(optionRange, content.substring(nameStart, valueStart - 1), vscode_languageserver_types_1.Range.create(document.positionAt(documentOffset + nameStart), document.positionAt(documentOffset + valueStart - 1)), content.substring(valueStart, valueEnd), vscode_languageserver_types_1.Range.create(document.positionAt(documentOffset + valueStart), document.positionAt(documentOffset + valueEnd)));\n    }\n    toString() {\n        if (this.valueRange) {\n            return \"--\" + this.name + \"=\" + this.value;\n        }\n        return \"--\" + this.name;\n    }\n    /**\n     * Returns the range that encompasses this entire flag. This includes the\n     * -- prefix in the beginning to the last character of the flag's value (if\n     * it has been defined).\n     *\n     * @return the entire range of this flag\n     */\n    getRange() {\n        return this.range;\n    }\n    /**\n     * Returns the name of this flag. The name does not include the -- prefix.\n     * Thus, for HEALTHCHECK's --interval flag, interval is the flag's name and\n     * not --interval.\n     *\n     * @return this flag's name\n     */\n    getName() {\n        return this.name;\n    }\n    /**\n     * Returns the range that encompasses the flag's name\n     *\n     * @return the range containing the flag's name\n     */\n    getNameRange() {\n        return this.nameRange;\n    }\n    /**\n     * Returns the value that has been set to this flag. May be null if the\n     * flag is invalid and has no value set like a --start-period. If the flag\n     * is instead a --start-period= with an equals sign then the flag's value\n     * is the empty string.\n     *\n     * @return this flag's value if it has been defined, null otherwise\n     */\n    getValue() {\n        return this.value;\n    }\n    /**\n     * Returns the range that encompasses this flag's value. If no value has\n     * been set then null will be returned.\n     *\n     * @return the range containing this flag's value, or null if the flag\n     *         has no value defined\n     */\n    getValueRange() {\n        return this.valueRange;\n    }\n    getOption(name) {\n        for (const option of this.options) {\n            if (option.getName() === name) {\n                return option;\n            }\n        }\n        return null;\n    }\n    getOptions() {\n        return this.options;\n    }\n    hasOptions() {\n        return this.options.length > 0;\n    }\n}\nexports.Flag = Flag;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2ZsYWcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsWUFBWTtBQUNaLHNDQUFzQyxtQkFBTyxDQUFDLHFHQUE2QjtBQUMzRSxxQkFBcUIsbUJBQU8sQ0FBQywyRUFBYztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixrQkFBa0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpdmUtdmliZS1haS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2RvY2tlcmZpbGUtYXN0L2xpYi9mbGFnLmpzPzAyYzMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZsYWcgPSB2b2lkIDA7XG5jb25zdCB2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfdHlwZXNfMSA9IHJlcXVpcmUoXCJ2c2NvZGUtbGFuZ3VhZ2VzZXJ2ZXItdHlwZXNcIik7XG5jb25zdCBmbGFnT3B0aW9uXzEgPSByZXF1aXJlKFwiLi9mbGFnT3B0aW9uXCIpO1xuY2xhc3MgRmxhZyB7XG4gICAgY29uc3RydWN0b3IoZG9jdW1lbnQsIHJhbmdlLCBuYW1lLCBuYW1lUmFuZ2UsIHZhbHVlLCB2YWx1ZVJhbmdlKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IFtdO1xuICAgICAgICB0aGlzLnJhbmdlID0gcmFuZ2U7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMubmFtZVJhbmdlID0gbmFtZVJhbmdlO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMudmFsdWVSYW5nZSA9IHZhbHVlUmFuZ2U7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBsZXQgb2Zmc2V0ID0gZG9jdW1lbnQub2Zmc2V0QXQodmFsdWVSYW5nZS5zdGFydCk7XG4gICAgICAgICAgICBsZXQgbmFtZVN0YXJ0ID0gLTE7XG4gICAgICAgICAgICBsZXQgdmFsdWVTdGFydCA9IC0xO1xuICAgICAgICAgICAgbGV0IGhhc09wdGlvbnMgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHZhbHVlLmNoYXJBdChpKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlICc9JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc09wdGlvbnMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlU3RhcnQgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVTdGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJywnOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnB1c2godGhpcy5jcmVhdGVGbGFnT3B0aW9uKGRvY3VtZW50LCB2YWx1ZSwgb2Zmc2V0LCBuYW1lU3RhcnQsIHZhbHVlU3RhcnQsIGkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVTdGFydCA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVTdGFydCA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFtZVN0YXJ0ID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVTdGFydCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaGFzT3B0aW9ucyAmJiBuYW1lU3RhcnQgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnB1c2godGhpcy5jcmVhdGVGbGFnT3B0aW9uKGRvY3VtZW50LCB2YWx1ZSwgb2Zmc2V0LCBuYW1lU3RhcnQsIHZhbHVlU3RhcnQsIHZhbHVlLmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNyZWF0ZUZsYWdPcHRpb24oZG9jdW1lbnQsIGNvbnRlbnQsIGRvY3VtZW50T2Zmc2V0LCBuYW1lU3RhcnQsIHZhbHVlU3RhcnQsIHZhbHVlRW5kKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvblJhbmdlID0gdnNjb2RlX2xhbmd1YWdlc2VydmVyX3R5cGVzXzEuUmFuZ2UuY3JlYXRlKGRvY3VtZW50LnBvc2l0aW9uQXQoZG9jdW1lbnRPZmZzZXQgKyBuYW1lU3RhcnQpLCBkb2N1bWVudC5wb3NpdGlvbkF0KGRvY3VtZW50T2Zmc2V0ICsgdmFsdWVFbmQpKTtcbiAgICAgICAgaWYgKHZhbHVlU3RhcnQgPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IGZsYWdPcHRpb25fMS5GbGFnT3B0aW9uKG9wdGlvblJhbmdlLCBjb250ZW50LnN1YnN0cmluZyhuYW1lU3RhcnQsIHZhbHVlRW5kKSwgb3B0aW9uUmFuZ2UsIG51bGwsIG51bGwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgZmxhZ09wdGlvbl8xLkZsYWdPcHRpb24ob3B0aW9uUmFuZ2UsIGNvbnRlbnQuc3Vic3RyaW5nKG5hbWVTdGFydCwgdmFsdWVTdGFydCAtIDEpLCB2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfdHlwZXNfMS5SYW5nZS5jcmVhdGUoZG9jdW1lbnQucG9zaXRpb25BdChkb2N1bWVudE9mZnNldCArIG5hbWVTdGFydCksIGRvY3VtZW50LnBvc2l0aW9uQXQoZG9jdW1lbnRPZmZzZXQgKyB2YWx1ZVN0YXJ0IC0gMSkpLCBjb250ZW50LnN1YnN0cmluZyh2YWx1ZVN0YXJ0LCB2YWx1ZUVuZCksIHZzY29kZV9sYW5ndWFnZXNlcnZlcl90eXBlc18xLlJhbmdlLmNyZWF0ZShkb2N1bWVudC5wb3NpdGlvbkF0KGRvY3VtZW50T2Zmc2V0ICsgdmFsdWVTdGFydCksIGRvY3VtZW50LnBvc2l0aW9uQXQoZG9jdW1lbnRPZmZzZXQgKyB2YWx1ZUVuZCkpKTtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlUmFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiBcIi0tXCIgKyB0aGlzLm5hbWUgKyBcIj1cIiArIHRoaXMudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFwiLS1cIiArIHRoaXMubmFtZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcmFuZ2UgdGhhdCBlbmNvbXBhc3NlcyB0aGlzIGVudGlyZSBmbGFnLiBUaGlzIGluY2x1ZGVzIHRoZVxuICAgICAqIC0tIHByZWZpeCBpbiB0aGUgYmVnaW5uaW5nIHRvIHRoZSBsYXN0IGNoYXJhY3RlciBvZiB0aGUgZmxhZydzIHZhbHVlIChpZlxuICAgICAqIGl0IGhhcyBiZWVuIGRlZmluZWQpLlxuICAgICAqXG4gICAgICogQHJldHVybiB0aGUgZW50aXJlIHJhbmdlIG9mIHRoaXMgZmxhZ1xuICAgICAqL1xuICAgIGdldFJhbmdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYW5nZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbmFtZSBvZiB0aGlzIGZsYWcuIFRoZSBuYW1lIGRvZXMgbm90IGluY2x1ZGUgdGhlIC0tIHByZWZpeC5cbiAgICAgKiBUaHVzLCBmb3IgSEVBTFRIQ0hFQ0sncyAtLWludGVydmFsIGZsYWcsIGludGVydmFsIGlzIHRoZSBmbGFnJ3MgbmFtZSBhbmRcbiAgICAgKiBub3QgLS1pbnRlcnZhbC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gdGhpcyBmbGFnJ3MgbmFtZVxuICAgICAqL1xuICAgIGdldE5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHJhbmdlIHRoYXQgZW5jb21wYXNzZXMgdGhlIGZsYWcncyBuYW1lXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHRoZSByYW5nZSBjb250YWluaW5nIHRoZSBmbGFnJ3MgbmFtZVxuICAgICAqL1xuICAgIGdldE5hbWVSYW5nZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZVJhbmdlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSB0aGF0IGhhcyBiZWVuIHNldCB0byB0aGlzIGZsYWcuIE1heSBiZSBudWxsIGlmIHRoZVxuICAgICAqIGZsYWcgaXMgaW52YWxpZCBhbmQgaGFzIG5vIHZhbHVlIHNldCBsaWtlIGEgLS1zdGFydC1wZXJpb2QuIElmIHRoZSBmbGFnXG4gICAgICogaXMgaW5zdGVhZCBhIC0tc3RhcnQtcGVyaW9kPSB3aXRoIGFuIGVxdWFscyBzaWduIHRoZW4gdGhlIGZsYWcncyB2YWx1ZVxuICAgICAqIGlzIHRoZSBlbXB0eSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHRoaXMgZmxhZydzIHZhbHVlIGlmIGl0IGhhcyBiZWVuIGRlZmluZWQsIG51bGwgb3RoZXJ3aXNlXG4gICAgICovXG4gICAgZ2V0VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSByYW5nZSB0aGF0IGVuY29tcGFzc2VzIHRoaXMgZmxhZydzIHZhbHVlLiBJZiBubyB2YWx1ZSBoYXNcbiAgICAgKiBiZWVuIHNldCB0aGVuIG51bGwgd2lsbCBiZSByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gdGhlIHJhbmdlIGNvbnRhaW5pbmcgdGhpcyBmbGFnJ3MgdmFsdWUsIG9yIG51bGwgaWYgdGhlIGZsYWdcbiAgICAgKiAgICAgICAgIGhhcyBubyB2YWx1ZSBkZWZpbmVkXG4gICAgICovXG4gICAgZ2V0VmFsdWVSYW5nZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVSYW5nZTtcbiAgICB9XG4gICAgZ2V0T3B0aW9uKG5hbWUpIHtcbiAgICAgICAgZm9yIChjb25zdCBvcHRpb24gb2YgdGhpcy5vcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9uLmdldE5hbWUoKSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGdldE9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnM7XG4gICAgfVxuICAgIGhhc09wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMubGVuZ3RoID4gMDtcbiAgICB9XG59XG5leHBvcnRzLkZsYWcgPSBGbGFnO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/flag.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/flagOption.js":
/*!*******************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/flagOption.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FlagOption = void 0;\nclass FlagOption {\n    constructor(range, name, nameRange, value, valueRange) {\n        this.range = range;\n        this.name = name;\n        this.nameRange = nameRange;\n        this.value = value;\n        this.valueRange = valueRange;\n    }\n    toString() {\n        if (this.valueRange !== null) {\n            return this.name + \"=\" + this.value;\n        }\n        return this.name;\n    }\n    getRange() {\n        return this.range;\n    }\n    getName() {\n        return this.name;\n    }\n    getNameRange() {\n        return this.nameRange;\n    }\n    getValue() {\n        return this.value;\n    }\n    getValueRange() {\n        return this.valueRange;\n    }\n}\nexports.FlagOption = FlagOption;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2ZsYWdPcHRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpdmUtdmliZS1haS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2RvY2tlcmZpbGUtYXN0L2xpYi9mbGFnT3B0aW9uLmpzPzMxOTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkZsYWdPcHRpb24gPSB2b2lkIDA7XG5jbGFzcyBGbGFnT3B0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihyYW5nZSwgbmFtZSwgbmFtZVJhbmdlLCB2YWx1ZSwgdmFsdWVSYW5nZSkge1xuICAgICAgICB0aGlzLnJhbmdlID0gcmFuZ2U7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMubmFtZVJhbmdlID0gbmFtZVJhbmdlO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMudmFsdWVSYW5nZSA9IHZhbHVlUmFuZ2U7XG4gICAgfVxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBpZiAodGhpcy52YWx1ZVJhbmdlICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5uYW1lICsgXCI9XCIgKyB0aGlzLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XG4gICAgfVxuICAgIGdldFJhbmdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYW5nZTtcbiAgICB9XG4gICAgZ2V0TmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICB9XG4gICAgZ2V0TmFtZVJhbmdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lUmFuZ2U7XG4gICAgfVxuICAgIGdldFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgICB9XG4gICAgZ2V0VmFsdWVSYW5nZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVSYW5nZTtcbiAgICB9XG59XG5leHBvcnRzLkZsYWdPcHRpb24gPSBGbGFnT3B0aW9uO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/flagOption.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/heredoc.js":
/*!****************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/heredoc.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Heredoc = void 0;\n/**\n * Heredoc represents a here-document that has been embedded in a\n * Dockerfile.\n *\n * This API is experimental and subject to change.\n */\nclass Heredoc {\n    constructor(startRange, name, nameRange, contentRange, endRange) {\n        this.startRange = startRange;\n        this.name = name;\n        this.nameRange = nameRange;\n        this.contentRange = contentRange;\n        this.endRange = endRange;\n    }\n    /**\n     * Returns the name of the here-document.\n     *\n     * This API is experimental and subject to change.\n     */\n    getName() {\n        return this.name;\n    }\n    /**\n     * Returns the range of the start operator and the name. If the\n     * here-document is initialized with <<EOT then the start range would\n     * encompass all five characters.\n     *\n     * This API is experimental and subject to change.\n     */\n    getStartRange() {\n        return this.startRange;\n    }\n    /**\n     * Returns the range of this here-document's name that is declared at\n     * the beginning of the here-document with the operator. If the\n     * here-document is initialized with <<EOT then the name range would\n     * encompass the latter three \"EOT\" characters.\n     *\n     * This API is experimental and subject to change.\n     */\n    getNameRange() {\n        return this.nameRange;\n    }\n    /**\n     * Returns the range of the content of this here-document. This may\n     * be null if the here-document has no content because:\n     * - the start range is the only thing that was declared\n     * - the end range was declared immediately and there is no content\n     *\n     * This API is experimental and subject to change.\n     */\n    getContentRange() {\n        return this.contentRange;\n    }\n    /**\n     * Returns the range of the here-document's name on a line that\n     * represents the end of the here-document.\n     *\n     * This API is experimental and subject to change.\n     */\n    getDelimiterRange() {\n        return this.endRange;\n    }\n}\nexports.Heredoc = Heredoc;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2hlcmVkb2MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpdmUtdmliZS1haS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2RvY2tlcmZpbGUtYXN0L2xpYi9oZXJlZG9jLmpzPzVkZWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkhlcmVkb2MgPSB2b2lkIDA7XG4vKipcbiAqIEhlcmVkb2MgcmVwcmVzZW50cyBhIGhlcmUtZG9jdW1lbnQgdGhhdCBoYXMgYmVlbiBlbWJlZGRlZCBpbiBhXG4gKiBEb2NrZXJmaWxlLlxuICpcbiAqIFRoaXMgQVBJIGlzIGV4cGVyaW1lbnRhbCBhbmQgc3ViamVjdCB0byBjaGFuZ2UuXG4gKi9cbmNsYXNzIEhlcmVkb2Mge1xuICAgIGNvbnN0cnVjdG9yKHN0YXJ0UmFuZ2UsIG5hbWUsIG5hbWVSYW5nZSwgY29udGVudFJhbmdlLCBlbmRSYW5nZSkge1xuICAgICAgICB0aGlzLnN0YXJ0UmFuZ2UgPSBzdGFydFJhbmdlO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLm5hbWVSYW5nZSA9IG5hbWVSYW5nZTtcbiAgICAgICAgdGhpcy5jb250ZW50UmFuZ2UgPSBjb250ZW50UmFuZ2U7XG4gICAgICAgIHRoaXMuZW5kUmFuZ2UgPSBlbmRSYW5nZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbmFtZSBvZiB0aGUgaGVyZS1kb2N1bWVudC5cbiAgICAgKlxuICAgICAqIFRoaXMgQVBJIGlzIGV4cGVyaW1lbnRhbCBhbmQgc3ViamVjdCB0byBjaGFuZ2UuXG4gICAgICovXG4gICAgZ2V0TmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcmFuZ2Ugb2YgdGhlIHN0YXJ0IG9wZXJhdG9yIGFuZCB0aGUgbmFtZS4gSWYgdGhlXG4gICAgICogaGVyZS1kb2N1bWVudCBpcyBpbml0aWFsaXplZCB3aXRoIDw8RU9UIHRoZW4gdGhlIHN0YXJ0IHJhbmdlIHdvdWxkXG4gICAgICogZW5jb21wYXNzIGFsbCBmaXZlIGNoYXJhY3RlcnMuXG4gICAgICpcbiAgICAgKiBUaGlzIEFQSSBpcyBleHBlcmltZW50YWwgYW5kIHN1YmplY3QgdG8gY2hhbmdlLlxuICAgICAqL1xuICAgIGdldFN0YXJ0UmFuZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXJ0UmFuZ2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHJhbmdlIG9mIHRoaXMgaGVyZS1kb2N1bWVudCdzIG5hbWUgdGhhdCBpcyBkZWNsYXJlZCBhdFxuICAgICAqIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGhlcmUtZG9jdW1lbnQgd2l0aCB0aGUgb3BlcmF0b3IuIElmIHRoZVxuICAgICAqIGhlcmUtZG9jdW1lbnQgaXMgaW5pdGlhbGl6ZWQgd2l0aCA8PEVPVCB0aGVuIHRoZSBuYW1lIHJhbmdlIHdvdWxkXG4gICAgICogZW5jb21wYXNzIHRoZSBsYXR0ZXIgdGhyZWUgXCJFT1RcIiBjaGFyYWN0ZXJzLlxuICAgICAqXG4gICAgICogVGhpcyBBUEkgaXMgZXhwZXJpbWVudGFsIGFuZCBzdWJqZWN0IHRvIGNoYW5nZS5cbiAgICAgKi9cbiAgICBnZXROYW1lUmFuZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWVSYW5nZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcmFuZ2Ugb2YgdGhlIGNvbnRlbnQgb2YgdGhpcyBoZXJlLWRvY3VtZW50LiBUaGlzIG1heVxuICAgICAqIGJlIG51bGwgaWYgdGhlIGhlcmUtZG9jdW1lbnQgaGFzIG5vIGNvbnRlbnQgYmVjYXVzZTpcbiAgICAgKiAtIHRoZSBzdGFydCByYW5nZSBpcyB0aGUgb25seSB0aGluZyB0aGF0IHdhcyBkZWNsYXJlZFxuICAgICAqIC0gdGhlIGVuZCByYW5nZSB3YXMgZGVjbGFyZWQgaW1tZWRpYXRlbHkgYW5kIHRoZXJlIGlzIG5vIGNvbnRlbnRcbiAgICAgKlxuICAgICAqIFRoaXMgQVBJIGlzIGV4cGVyaW1lbnRhbCBhbmQgc3ViamVjdCB0byBjaGFuZ2UuXG4gICAgICovXG4gICAgZ2V0Q29udGVudFJhbmdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50UmFuZ2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHJhbmdlIG9mIHRoZSBoZXJlLWRvY3VtZW50J3MgbmFtZSBvbiBhIGxpbmUgdGhhdFxuICAgICAqIHJlcHJlc2VudHMgdGhlIGVuZCBvZiB0aGUgaGVyZS1kb2N1bWVudC5cbiAgICAgKlxuICAgICAqIFRoaXMgQVBJIGlzIGV4cGVyaW1lbnRhbCBhbmQgc3ViamVjdCB0byBjaGFuZ2UuXG4gICAgICovXG4gICAgZ2V0RGVsaW1pdGVyUmFuZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVuZFJhbmdlO1xuICAgIH1cbn1cbmV4cG9ydHMuSGVyZWRvYyA9IEhlcmVkb2M7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/heredoc.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/imageTemplate.js":
/*!**********************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/imageTemplate.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* --------------------------------------------------------------------------------------------\n * Copyright (c) Remy Suen. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ImageTemplate = void 0;\nconst vscode_languageserver_types_1 = __webpack_require__(/*! vscode-languageserver-types */ \"(rsc)/./node_modules/vscode-languageserver-types/lib/umd/main.js\");\nconst arg_1 = __webpack_require__(/*! ./instructions/arg */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/arg.js\");\nconst cmd_1 = __webpack_require__(/*! ./instructions/cmd */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/cmd.js\");\nconst copy_1 = __webpack_require__(/*! ./instructions/copy */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/copy.js\");\nconst env_1 = __webpack_require__(/*! ./instructions/env */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/env.js\");\nconst entrypoint_1 = __webpack_require__(/*! ./instructions/entrypoint */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/entrypoint.js\");\nconst from_1 = __webpack_require__(/*! ./instructions/from */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/from.js\");\nconst healthcheck_1 = __webpack_require__(/*! ./instructions/healthcheck */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/healthcheck.js\");\nconst onbuild_1 = __webpack_require__(/*! ./instructions/onbuild */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/onbuild.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/dockerfile-ast/lib/util.js\");\nconst workdir_1 = __webpack_require__(/*! ./instructions/workdir */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/workdir.js\");\nclass ImageTemplate {\n    constructor() {\n        this.comments = [];\n        this.instructions = [];\n    }\n    addComment(comment) {\n        this.comments.push(comment);\n    }\n    getComments() {\n        return this.comments;\n    }\n    addInstruction(instruction) {\n        this.instructions.push(instruction);\n    }\n    getInstructions() {\n        return this.instructions;\n    }\n    getInstructionAt(line) {\n        for (let instruction of this.instructions) {\n            if (util_1.Util.isInsideRange(vscode_languageserver_types_1.Position.create(line, 0), instruction.getRange())) {\n                return instruction;\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets all the ARG instructions that are defined in this image.\n     */\n    getARGs() {\n        let args = [];\n        for (let instruction of this.instructions) {\n            if (instruction instanceof arg_1.Arg) {\n                args.push(instruction);\n            }\n        }\n        return args;\n    }\n    /**\n     * Gets all the CMD instructions that are defined in this image.\n     */\n    getCMDs() {\n        let cmds = [];\n        for (let instruction of this.instructions) {\n            if (instruction instanceof cmd_1.Cmd) {\n                cmds.push(instruction);\n            }\n        }\n        return cmds;\n    }\n    /**\n     * Gets all the COPY instructions that are defined in this image.\n     */\n    getCOPYs() {\n        let copies = [];\n        for (let instruction of this.instructions) {\n            if (instruction instanceof copy_1.Copy) {\n                copies.push(instruction);\n            }\n        }\n        return copies;\n    }\n    /**\n     * Gets all the ENTRYPOINT instructions that are defined in this image.\n     */\n    getENTRYPOINTs() {\n        let froms = [];\n        for (let instruction of this.instructions) {\n            if (instruction instanceof entrypoint_1.Entrypoint) {\n                froms.push(instruction);\n            }\n        }\n        return froms;\n    }\n    /**\n     * Gets all the ENV instructions that are defined in this image.\n     */\n    getENVs() {\n        let args = [];\n        for (let instruction of this.instructions) {\n            if (instruction instanceof env_1.Env) {\n                args.push(instruction);\n            }\n        }\n        return args;\n    }\n    getFROM() {\n        for (const instruction of this.instructions) {\n            if (instruction instanceof from_1.From) {\n                return instruction;\n            }\n        }\n        return null;\n    }\n    /**\n     * Gets all the FROM instructions that are defined in this image.\n     */\n    getFROMs() {\n        let froms = [];\n        for (let instruction of this.instructions) {\n            if (instruction instanceof from_1.From) {\n                froms.push(instruction);\n            }\n        }\n        return froms;\n    }\n    /**\n     * Gets all the HEALTHCHECK instructions that are defined in this image.\n     */\n    getHEALTHCHECKs() {\n        let froms = [];\n        for (let instruction of this.instructions) {\n            if (instruction instanceof healthcheck_1.Healthcheck) {\n                froms.push(instruction);\n            }\n        }\n        return froms;\n    }\n    getWORKDIRs() {\n        const workdirs = [];\n        for (const instruction of this.instructions) {\n            if (instruction instanceof workdir_1.Workdir) {\n                workdirs.push(instruction);\n            }\n        }\n        return workdirs;\n    }\n    getOnbuildTriggers() {\n        let triggers = [];\n        for (let instruction of this.instructions) {\n            if (instruction instanceof onbuild_1.Onbuild) {\n                let trigger = instruction.getTriggerInstruction();\n                if (trigger) {\n                    triggers.push(trigger);\n                }\n            }\n        }\n        return triggers;\n    }\n    getAvailableVariables(currentLine) {\n        const variables = [];\n        for (const arg of this.getARGs()) {\n            if (arg.isBefore(currentLine)) {\n                const property = arg.getProperty();\n                if (property) {\n                    const variable = property.getName();\n                    if (variables.indexOf(variable) === -1) {\n                        variables.push(variable);\n                    }\n                }\n            }\n        }\n        for (const env of this.getENVs()) {\n            if (env.isBefore(currentLine)) {\n                for (const property of env.getProperties()) {\n                    const variable = property.getName();\n                    if (variables.indexOf(variable) === -1) {\n                        variables.push(variable);\n                    }\n                }\n            }\n        }\n        return variables;\n    }\n    /**\n     * Resolves a variable with the given name at the specified line\n     * to its value. If null is returned, then the variable has been\n     * defined but no value was given. If undefined is returned, then\n     * a variable with the given name has not been defined yet as of\n     * the given line.\n     *\n     * @param variable the name of the variable to resolve\n     * @param line the line number that the variable is on, zero-based\n     * @return the value of the variable as defined by an ARG or ENV\n     *         instruction, or null if no value has been specified, or\n     *         undefined if a variable with the given name has not\n     *         been defined\n     */\n    resolveVariable(variable, line) {\n        let envs = this.getENVs();\n        for (let i = envs.length - 1; i >= 0; i--) {\n            if (envs[i].isBefore(line)) {\n                for (let property of envs[i].getProperties()) {\n                    if (property.getName() === variable) {\n                        return property.getValue();\n                    }\n                }\n            }\n        }\n        let args = this.getARGs();\n        for (let i = args.length - 1; i >= 0; i--) {\n            if (args[i].isBefore(line)) {\n                let property = args[i].getProperty();\n                if (property && property.getName() === variable) {\n                    return property.getValue();\n                }\n            }\n        }\n        return undefined;\n    }\n    getRange() {\n        const instructions = this.getInstructions();\n        if (instructions.length === 0) {\n            // all templates should have instructions, this only happens for\n            // the initial set of instruction\n            return vscode_languageserver_types_1.Range.create(0, 0, 0, 0);\n        }\n        const instructionStart = instructions[0].getRange().start;\n        const instructionEnd = instructions[instructions.length - 1].getRange().end;\n        return vscode_languageserver_types_1.Range.create(instructionStart, instructionEnd);\n    }\n    contains(position) {\n        const range = this.getRange();\n        if (range === null) {\n            return false;\n        }\n        return util_1.Util.isInsideRange(position, range);\n    }\n}\nexports.ImageTemplate = ImageTemplate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/imageTemplate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/instruction.js":
/*!********************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/instruction.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Instruction = void 0;\nconst vscode_languageserver_types_1 = __webpack_require__(/*! vscode-languageserver-types */ \"(rsc)/./node_modules/vscode-languageserver-types/lib/umd/main.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/dockerfile-ast/lib/util.js\");\nconst line_1 = __webpack_require__(/*! ./line */ \"(rsc)/./node_modules/dockerfile-ast/lib/line.js\");\nconst argument_1 = __webpack_require__(/*! ./argument */ \"(rsc)/./node_modules/dockerfile-ast/lib/argument.js\");\nconst heredoc_1 = __webpack_require__(/*! ./heredoc */ \"(rsc)/./node_modules/dockerfile-ast/lib/heredoc.js\");\nconst variable_1 = __webpack_require__(/*! ./variable */ \"(rsc)/./node_modules/dockerfile-ast/lib/variable.js\");\nconst main_1 = __webpack_require__(/*! ./main */ \"(rsc)/./node_modules/dockerfile-ast/lib/main.js\");\nclass Instruction extends line_1.Line {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range);\n        this.dockerfile = dockerfile;\n        this.escapeChar = escapeChar;\n        this.instruction = instruction;\n        this.instructionRange = instructionRange;\n    }\n    toString() {\n        let value = this.getKeyword();\n        for (let arg of this.getRawArguments()) {\n            value += ' ';\n            value += arg.getValue();\n        }\n        return value;\n    }\n    getRangeContent(range) {\n        if (range === null) {\n            return null;\n        }\n        return this.document.getText().substring(this.document.offsetAt(range.start), this.document.offsetAt(range.end));\n    }\n    getInstructionRange() {\n        return this.instructionRange;\n    }\n    getInstruction() {\n        return this.instruction;\n    }\n    getKeyword() {\n        return this.getInstruction().toUpperCase();\n    }\n    getArgumentsRange() {\n        let args = this.getArguments();\n        if (args.length === 0) {\n            return null;\n        }\n        return vscode_languageserver_types_1.Range.create(args[0].getRange().start, args[args.length - 1].getRange().end);\n    }\n    getArgumentsRanges() {\n        let args = this.getArguments();\n        if (args.length === 0) {\n            return [];\n        }\n        if (args[0].getRange().start.line === args[args.length - 1].getRange().end.line) {\n            return [vscode_languageserver_types_1.Range.create(args[0].getRange().start, args[args.length - 1].getRange().end)];\n        }\n        let ranges = [];\n        let end = -1;\n        let startPosition = args[0].getRange().start;\n        let range = this.getInstructionRange();\n        let extra = this.document.offsetAt(startPosition) - this.document.offsetAt(range.start);\n        let content = this.getTextContent();\n        let fullArgs = content.substring(extra, this.document.offsetAt(args[args.length - 1].getRange().end) - this.document.offsetAt(range.start));\n        let offset = this.document.offsetAt(range.start) + extra;\n        let start = false;\n        let comment = false;\n        for (let i = 0; i < fullArgs.length; i++) {\n            let char = fullArgs.charAt(i);\n            if (char === this.escapeChar) {\n                let next = fullArgs.charAt(i + 1);\n                if (next === ' ' || next === '\\t') {\n                    whitespaceCheck: for (let j = i + 2; j < fullArgs.length; j++) {\n                        switch (fullArgs.charAt(j)) {\n                            case ' ':\n                            case '\\t':\n                                continue;\n                            case '\\r':\n                                j++;\n                            case '\\n':\n                                if (startPosition !== null) {\n                                    ranges.push(vscode_languageserver_types_1.Range.create(startPosition, this.document.positionAt(offset + end + 1)));\n                                }\n                                startPosition = null;\n                                start = true;\n                                comment = false;\n                                i = j;\n                                break whitespaceCheck;\n                            default:\n                                break whitespaceCheck;\n                        }\n                    }\n                }\n                else if (next === '\\r') {\n                    if (startPosition !== null) {\n                        ranges.push(vscode_languageserver_types_1.Range.create(startPosition, this.document.positionAt(offset + end + 1)));\n                        startPosition = null;\n                    }\n                    start = true;\n                    comment = false;\n                    i += 2;\n                }\n                else if (next === '\\n') {\n                    if (startPosition !== null) {\n                        ranges.push(vscode_languageserver_types_1.Range.create(startPosition, this.document.positionAt(offset + end + 1)));\n                    }\n                    startPosition = null;\n                    start = true;\n                    comment = false;\n                    i++;\n                }\n                else {\n                    i++;\n                }\n            }\n            else if (util_1.Util.isNewline(char)) {\n                if (comment) {\n                    startPosition = null;\n                    start = true;\n                    comment = false;\n                }\n            }\n            else {\n                if (!comment) {\n                    if (startPosition === null) {\n                        if (char === '#') {\n                            comment = true;\n                            continue;\n                        }\n                        let position = this.document.positionAt(offset + i);\n                        if (position.character !== 0) {\n                            startPosition = vscode_languageserver_types_1.Position.create(position.line, 0);\n                        }\n                    }\n                    end = i;\n                }\n            }\n        }\n        if (startPosition === null) {\n            // should only happen if the last argument is on its own line with\n            // no leading whitespace\n            ranges.push(vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + end), this.document.positionAt(offset + end + 1)));\n        }\n        else {\n            ranges.push(vscode_languageserver_types_1.Range.create(startPosition, this.document.positionAt(offset + end + 1)));\n        }\n        return ranges;\n    }\n    getRawArgumentsContent() {\n        let args = this.getArguments();\n        if (args.length === 0) {\n            return null;\n        }\n        return this.getRangeContent(vscode_languageserver_types_1.Range.create(args[0].getRange().start, args[args.length - 1].getRange().end));\n    }\n    getArgumentsContent() {\n        let args = this.getArguments();\n        if (args.length === 0) {\n            return null;\n        }\n        let content = \"\";\n        let ranges = this.getArgumentsRanges();\n        let documentText = this.document.getText();\n        for (let range of ranges) {\n            content += documentText.substring(this.document.offsetAt(range.start), this.document.offsetAt(range.end));\n        }\n        return content;\n    }\n    getArguments() {\n        return this.getRawArguments();\n    }\n    getRawArguments() {\n        let args = [];\n        let range = this.getInstructionRange();\n        let extra = this.document.offsetAt(range.end) - this.document.offsetAt(range.start);\n        let content = this.getTextContent();\n        let fullArgs = content.substring(extra);\n        let offset = this.document.offsetAt(range.start) + extra;\n        let start = false;\n        let comment = false;\n        let found = -1;\n        // determines whether the parser has found a space or tab\n        // whitespace character that's a part of an escaped newline sequence\n        let escapedWhitespaceDetected = false;\n        // determines if the parser is currently in an escaped newline sequence\n        let escaping = false;\n        let escapeMarker = -1;\n        let escapedArg = \"\";\n        for (let i = 0; i < fullArgs.length; i++) {\n            let char = fullArgs.charAt(i);\n            if (util_1.Util.isWhitespace(char)) {\n                if (escaping) {\n                    escapedWhitespaceDetected = true;\n                    if (util_1.Util.isNewline(char)) {\n                        // reached a newline, any previously\n                        // detected whitespace should be ignored\n                        escapedWhitespaceDetected = false;\n                        if (comment) {\n                            // reached a newline, no longer in a comment\n                            comment = false;\n                            start = true;\n                        }\n                    }\n                    continue;\n                }\n                else if (found !== -1) {\n                    if (escapeMarker === -1) {\n                        args.push(new argument_1.Argument(escapedArg, vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + found), this.document.positionAt(offset + i))));\n                    }\n                    else {\n                        args.push(new argument_1.Argument(escapedArg, vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + found), this.document.positionAt(offset + escapeMarker))));\n                    }\n                    escapeMarker = -1;\n                    escapedArg = \"\";\n                    found = -1;\n                }\n            }\n            else if (char === this.escapeChar) {\n                let next = fullArgs.charAt(i + 1);\n                if (next === ' ' || next === '\\t') {\n                    whitespaceCheck: for (let j = i + 2; j < fullArgs.length; j++) {\n                        let newlineCheck = fullArgs.charAt(j);\n                        switch (newlineCheck) {\n                            case ' ':\n                            case '\\t':\n                                continue;\n                            case '\\r':\n                                j++;\n                            case '\\n':\n                                comment = false;\n                                escaping = true;\n                                start = true;\n                                if (found !== -1) {\n                                    escapeMarker = i;\n                                }\n                                i = j;\n                                break whitespaceCheck;\n                            default:\n                                escapeMarker = i;\n                                if (found === -1) {\n                                    i = j - 1;\n                                }\n                                break whitespaceCheck;\n                        }\n                    }\n                }\n                else if (next === '\\r') {\n                    comment = false;\n                    escaping = true;\n                    start = true;\n                    if (found !== -1 && escapeMarker === -1) {\n                        escapeMarker = i;\n                    }\n                    i += 2;\n                }\n                else if (next === '\\n') {\n                    comment = false;\n                    escaping = true;\n                    start = true;\n                    if (found !== -1 && escapeMarker === -1) {\n                        escapeMarker = i;\n                    }\n                    i++;\n                }\n                else {\n                    if (escapedWhitespaceDetected && escapeMarker !== -1) {\n                        args.push(new argument_1.Argument(escapedArg, vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + found), this.document.positionAt(offset + escapeMarker))));\n                        escapedArg = \"\";\n                        found = -1;\n                    }\n                    escapeMarker = -1;\n                    escapedWhitespaceDetected = false;\n                    escaping = false;\n                    if (next === '$') {\n                        escapedArg = escapedArg + char + next;\n                    }\n                    else if (next === '') {\n                        // reached EOF, stop processing\n                        break;\n                    }\n                    else {\n                        escapedArg = escapedArg + next;\n                    }\n                    if (found === -1) {\n                        found = i;\n                    }\n                    i++;\n                }\n            }\n            else if (!comment) {\n                if (start && char === '#') {\n                    comment = true;\n                }\n                else {\n                    if (escapedWhitespaceDetected && escapeMarker !== -1) {\n                        args.push(new argument_1.Argument(escapedArg, vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + found), this.document.positionAt(offset + escapeMarker))));\n                        escapedArg = \"\";\n                        found = -1;\n                    }\n                    escapedWhitespaceDetected = false;\n                    escaping = false;\n                    escapeMarker = -1;\n                    escapedArg = escapedArg + char;\n                    if (found === -1) {\n                        found = i;\n                    }\n                }\n                // non-whitespace character detected, reset\n                start = false;\n            }\n        }\n        if (found !== -1) {\n            if (escapeMarker === -1) {\n                args.push(new argument_1.Argument(escapedArg, vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + found), this.document.positionAt(offset + fullArgs.length))));\n            }\n            else {\n                args.push(new argument_1.Argument(escapedArg, vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + found), this.document.positionAt(offset + escapeMarker))));\n            }\n        }\n        return args;\n    }\n    getExpandedArguments() {\n        let args = this.getArguments();\n        for (let i = 0; i < args.length; i++) {\n            const argRange = args[i].getRange();\n            let offset = this.document.offsetAt(argRange.start);\n            const variables = this.parseVariables(offset, args[i].getValue());\n            const swaps = [];\n            let requiresExpansion = false;\n            for (let variable of variables) {\n                const value = this.dockerfile.resolveVariable(variable.getName(), variable.getNameRange().start.line);\n                swaps.push(value);\n                requiresExpansion = requiresExpansion || value !== undefined;\n            }\n            if (requiresExpansion) {\n                let expanded = \"\";\n                for (let j = 0; j < swaps.length; j++) {\n                    const variableRange = variables[j].getRange();\n                    const start = this.document.offsetAt(variableRange.start);\n                    const end = this.document.offsetAt(variableRange.end);\n                    if (swaps[j]) {\n                        // replace variable with its resolved value\n                        expanded += this.document.getText().substring(offset, start);\n                        expanded += swaps[j];\n                        offset = end;\n                    }\n                    else {\n                        expanded += this.document.getText().substring(offset, end);\n                        offset = end;\n                    }\n                }\n                const argEnd = this.document.offsetAt(argRange.end);\n                if (argEnd !== offset) {\n                    // if the variable's range doesn't match the argument,\n                    // append the remaining text\n                    expanded += this.document.getText().substring(offset, argEnd);\n                }\n                args[i] = new argument_1.Argument(expanded, argRange);\n            }\n        }\n        return args;\n    }\n    getVariables() {\n        const variables = [];\n        const args = this.getRawArguments();\n        for (const arg of args) {\n            let range = arg.getRange();\n            let rawValue = this.document.getText().substring(this.document.offsetAt(range.start), this.document.offsetAt(range.end));\n            const parsedVariables = this.parseVariables(this.document.offsetAt(arg.getRange().start), rawValue);\n            for (const parsedVariable of parsedVariables) {\n                variables.push(parsedVariable);\n            }\n        }\n        return variables;\n    }\n    parseVariables(offset, arg) {\n        let variables = [];\n        variableLoop: for (let i = 0; i < arg.length; i++) {\n            switch (arg.charAt(i)) {\n                case this.escapeChar:\n                    if (arg.charAt(i + 1) === '$') {\n                        i++;\n                    }\n                    break;\n                case '$':\n                    if (arg.charAt(i + 1) === '{') {\n                        let escapedString = \"${\";\n                        let escapedName = \"\";\n                        let nameEnd = -1;\n                        let escapedSubstitutionParameter = \"\";\n                        let substitutionStart = -1;\n                        let substitutionEnd = -1;\n                        let modifierRead = -1;\n                        nameLoop: for (let j = i + 2; j < arg.length; j++) {\n                            let char = arg.charAt(j);\n                            switch (char) {\n                                case this.escapeChar:\n                                    for (let k = j + 1; k < arg.length; k++) {\n                                        switch (arg.charAt(k)) {\n                                            case ' ':\n                                            case '\\t':\n                                            case '\\r':\n                                                // ignore whitespace\n                                                continue;\n                                            case '\\n':\n                                                // escape this newline\n                                                j = k;\n                                                continue nameLoop;\n                                        }\n                                    }\n                                    break;\n                                case '}':\n                                    escapedString += '}';\n                                    let modifier = null;\n                                    let modifierRange = null;\n                                    let substitutionParameter = modifierRead !== -1 ? escapedSubstitutionParameter : null;\n                                    let substitutionRange = null;\n                                    if (nameEnd === -1) {\n                                        nameEnd = j;\n                                    }\n                                    else if (nameEnd + 1 === j) {\n                                        modifier = \"\";\n                                        modifierRange = vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + nameEnd + 1), this.document.positionAt(offset + nameEnd + 1));\n                                    }\n                                    else {\n                                        if (substitutionStart === -1) {\n                                            // no substitution parameter found,\n                                            // but a modifier character existed,\n                                            // just offset the range by 1 from\n                                            // the modifier character\n                                            substitutionStart = modifierRead + 1;\n                                            substitutionEnd = modifierRead + 1;\n                                        }\n                                        else {\n                                            // offset one more from the last\n                                            // character found\n                                            substitutionEnd = substitutionEnd + 1;\n                                        }\n                                        modifier = arg.substring(modifierRead, modifierRead + 1);\n                                        modifierRange = vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + modifierRead), this.document.positionAt(offset + modifierRead + 1));\n                                        substitutionRange = vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + substitutionStart), this.document.positionAt(offset + substitutionEnd));\n                                    }\n                                    let start = this.document.positionAt(offset + i);\n                                    variables.push(new variable_1.Variable(escapedName, vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + i + 2), this.document.positionAt(offset + nameEnd)), vscode_languageserver_types_1.Range.create(start, this.document.positionAt(offset + j + 1)), modifier, modifierRange, substitutionParameter, substitutionRange, this.dockerfile.resolveVariable(escapedName, start.line) !== undefined, this.isBuildVariable(escapedName, start.line), escapedString));\n                                    i = j;\n                                    continue variableLoop;\n                                case ':':\n                                    if (nameEnd === -1) {\n                                        nameEnd = j;\n                                    }\n                                    else if (modifierRead !== -1) {\n                                        if (substitutionStart === -1) {\n                                            substitutionStart = j;\n                                            substitutionEnd = j;\n                                        }\n                                        else {\n                                            substitutionEnd = j;\n                                        }\n                                        escapedSubstitutionParameter += ':';\n                                    }\n                                    else {\n                                        modifierRead = j;\n                                    }\n                                    escapedString += ':';\n                                    break;\n                                case '\\n':\n                                case '\\r':\n                                case ' ':\n                                case '\\t':\n                                    break;\n                                default:\n                                    if (nameEnd === -1) {\n                                        escapedName += char;\n                                    }\n                                    else if (modifierRead !== -1) {\n                                        if (substitutionStart === -1) {\n                                            substitutionStart = j;\n                                            substitutionEnd = j;\n                                        }\n                                        else {\n                                            substitutionEnd = j;\n                                        }\n                                        escapedSubstitutionParameter += char;\n                                    }\n                                    else {\n                                        modifierRead = j;\n                                    }\n                                    escapedString += char;\n                                    break;\n                            }\n                        }\n                        // no } found, not a valid variable, stop processing\n                        break variableLoop;\n                    }\n                    else if (util_1.Util.isWhitespace(arg.charAt(i + 1)) || i === arg.length - 1) {\n                        // $ followed by whitespace or EOF, ignore this variable\n                        continue;\n                    }\n                    else {\n                        let escapedName = \"\";\n                        nameLoop: for (let j = i + 1; j < arg.length; j++) {\n                            let char = arg.charAt(j);\n                            switch (char) {\n                                case '\\r':\n                                case '\\n':\n                                case ' ':\n                                case '\\t':\n                                    continue;\n                                case '$':\n                                case '\\'':\n                                case '\"':\n                                    let varStart = this.document.positionAt(offset + i);\n                                    variables.push(new variable_1.Variable(escapedName, vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + i + 1), this.document.positionAt(offset + j)), vscode_languageserver_types_1.Range.create(varStart, this.document.positionAt(offset + j)), null, null, null, null, this.dockerfile.resolveVariable(escapedName, varStart.line) !== undefined, this.isBuildVariable(escapedName, varStart.line), '$' + escapedName));\n                                    i = j - 1;\n                                    continue variableLoop;\n                                case this.escapeChar:\n                                    for (let k = j + 1; k < arg.length; k++) {\n                                        switch (arg.charAt(k)) {\n                                            case ' ':\n                                            case '\\t':\n                                            case '\\r':\n                                                // ignore whitespace\n                                                continue;\n                                            case '\\n':\n                                                // escape this newline\n                                                j = k;\n                                                continue nameLoop;\n                                        }\n                                    }\n                                    // reached EOF after an escape character\n                                    let start = this.document.positionAt(offset + i);\n                                    variables.push(new variable_1.Variable(escapedName, vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + i + 1), this.document.positionAt(offset + j)), vscode_languageserver_types_1.Range.create(start, this.document.positionAt(offset + j)), null, null, null, null, this.dockerfile.resolveVariable(escapedName, start.line) !== undefined, this.isBuildVariable(escapedName, start.line), '$' + escapedName));\n                                    break variableLoop;\n                            }\n                            if (char.match(/^[a-z0-9_]+$/i) === null) {\n                                let varStart = this.document.positionAt(offset + i);\n                                variables.push(new variable_1.Variable(escapedName, vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + i + 1), this.document.positionAt(offset + j)), vscode_languageserver_types_1.Range.create(varStart, this.document.positionAt(offset + j)), null, null, null, null, this.dockerfile.resolveVariable(escapedName, varStart.line) !== undefined, this.isBuildVariable(escapedName, varStart.line), '$' + escapedName));\n                                i = j - 1;\n                                continue variableLoop;\n                            }\n                            escapedName += char;\n                        }\n                        let start = this.document.positionAt(offset + i);\n                        variables.push(new variable_1.Variable(escapedName, vscode_languageserver_types_1.Range.create(this.document.positionAt(offset + i + 1), this.document.positionAt(offset + arg.length)), vscode_languageserver_types_1.Range.create(start, this.document.positionAt(offset + arg.length)), null, null, null, null, this.dockerfile.resolveVariable(escapedName, start.line) !== undefined, this.isBuildVariable(escapedName, start.line), '$' + escapedName));\n                    }\n                    break variableLoop;\n            }\n        }\n        return variables;\n    }\n    isBuildVariable(variable, line) {\n        if (this.getKeyword() === main_1.Keyword.FROM) {\n            for (const initialArg of this.dockerfile.getInitialARGs()) {\n                const arg = initialArg;\n                const property = arg.getProperty();\n                if (property && variable === property.getName()) {\n                    return true;\n                }\n            }\n            return undefined;\n        }\n        let image = this.dockerfile.getContainingImage(vscode_languageserver_types_1.Position.create(line, 0));\n        let envs = image.getENVs();\n        for (let i = envs.length - 1; i >= 0; i--) {\n            if (envs[i].isBefore(line)) {\n                for (let property of envs[i].getProperties()) {\n                    if (property.getName() === variable) {\n                        return false;\n                    }\n                }\n            }\n        }\n        let args = image.getARGs();\n        for (let i = args.length - 1; i >= 0; i--) {\n            if (args[i].isBefore(line)) {\n                let property = args[i].getProperty();\n                if (property && property.getName() === variable) {\n                    return true;\n                }\n            }\n        }\n        return undefined;\n    }\n    createSingleLineHeredocs(args) {\n        const heredocs = [];\n        // instruction only on one line, if heredocs exist they would be incomplete\n        for (const arg of args) {\n            const value = arg.getValue();\n            if (value.startsWith(\"<<\") && util_1.Util.parseHeredocName(value) !== null) {\n                const startRange = arg.getRange();\n                const nameRange = this.getNameRange(startRange);\n                const name = this.getName(nameRange);\n                heredocs.push(new heredoc_1.Heredoc(startRange, name, nameRange, null, null));\n            }\n        }\n        return heredocs;\n    }\n    getName(nameRange) {\n        const content = this.document.getText(nameRange);\n        let escaping = false;\n        let name = \"\";\n        nameLoop: for (let i = 0; i < content.length; i++) {\n            const ch = content.charAt(i);\n            switch (ch) {\n                case this.escapeChar:\n                    escaping = true;\n                    for (let j = i + 1; j < content.length; j++) {\n                        switch (content.charAt(j)) {\n                            case ' ':\n                            case '\\t':\n                                break;\n                            case '\\r':\n                                i = j + 1;\n                                continue nameLoop;\n                            case '\\n':\n                                i = j;\n                                continue nameLoop;\n                            default:\n                                name += content.charAt(j);\n                                i = j;\n                                continue nameLoop;\n                        }\n                    }\n                    break;\n                case '#':\n                    if (escaping) {\n                        for (let j = i + 1; j < content.length; j++) {\n                            switch (content.charAt(j)) {\n                                case '\\n':\n                                    i = j;\n                                    continue nameLoop;\n                            }\n                        }\n                    }\n                case ' ':\n                case '\\t':\n                case '\\r':\n                case '\\n':\n                    if (escaping) {\n                        break;\n                    }\n                default:\n                    name += ch;\n                    break;\n            }\n        }\n        return name;\n    }\n    getNameRange(startRange) {\n        const content = this.document.getText(startRange);\n        let endFound = false;\n        let searchHyphen = false;\n        let start = -1;\n        let end = -1;\n        let escaping = false;\n        let quote = null;\n        contentLoop: for (let i = 0; i < content.length; i++) {\n            const ch = content.charAt(i);\n            switch (ch) {\n                case '\"':\n                case '\\'':\n                    if (quote === ch) {\n                        break contentLoop;\n                    }\n                    quote = ch;\n                    continue;\n                case this.escapeChar:\n                    for (let j = i + 1; j < content.length; j++) {\n                        switch (content.charAt(j)) {\n                            case '\\n':\n                                escaping = true;\n                                j = i;\n                                continue contentLoop;\n                        }\n                    }\n                    break;\n                case ' ':\n                case '\\t':\n                case '\\r':\n                case '\\n':\n                    break;\n                case '<':\n                    if (endFound) {\n                        searchHyphen = true;\n                    }\n                    else {\n                        endFound = true;\n                    }\n                    break;\n                case '-':\n                    if (searchHyphen) {\n                        searchHyphen = false;\n                        break;\n                    }\n                case '#':\n                    if (escaping) {\n                        for (let j = i + 1; j < content.length; j++) {\n                            switch (content.charAt(j)) {\n                                case '\\n':\n                                    i = j;\n                                    continue contentLoop;\n                            }\n                        }\n                    }\n                default:\n                    if (start === -1) {\n                        start = i;\n                    }\n                    if (quote !== null) {\n                        end = i + 1;\n                        break;\n                    }\n                    break contentLoop;\n            }\n        }\n        if (start === -1) {\n            return vscode_languageserver_types_1.Range.create(startRange.end, startRange.end);\n        }\n        const nameStart = this.document.positionAt(this.document.offsetAt(startRange.start) + start);\n        const nameEnd = quote !== null ? this.document.positionAt(this.document.offsetAt(startRange.start) + end) : startRange.end;\n        return vscode_languageserver_types_1.Range.create(nameStart, nameEnd);\n    }\n    getHeredocs() {\n        const args = this.getArguments();\n        if (args.length === 0) {\n            return [];\n        }\n        const heredocs = [];\n        const range = this.getRange();\n        if (range.start.line === range.end.line) {\n            // instruction only on one line, if heredocs exist they would be incomplete\n            return this.createSingleLineHeredocs(args);\n        }\n        const heredocDefinitions = [];\n        let heredocsProcessed = false;\n        let escaping = false;\n        let contentStart = -1;\n        let contentEnd = -1;\n        let lineStart = -1;\n        let currentHeredoc = 0;\n        const startOffset = this.document.offsetAt(args[0].getRange().start);\n        const content = this.getRangeContent(vscode_languageserver_types_1.Range.create(args[0].getRange().start, this.getRange().end));\n        contentLoop: for (let i = 0; i < content.length; i++) {\n            switch (content.charAt(i)) {\n                case this.escapeChar:\n                    escaping = true;\n                    for (let j = i + 1; j < content.length; j++) {\n                        switch (content.charAt(j)) {\n                            case ' ':\n                            case '\\t':\n                                break;\n                            case '\\r':\n                                j++;\n                            case '\\n':\n                                i = j;\n                                continue contentLoop;\n                            default:\n                                i = j;\n                                continue contentLoop;\n                        }\n                    }\n                    break;\n                case '\\r':\n                    break;\n                case '\\n':\n                    if (escaping) {\n                        break;\n                    }\n                    if (heredocsProcessed) {\n                        if (contentStart === -1) {\n                            contentStart = i;\n                        }\n                        contentEnd = i;\n                        const arg = heredocDefinitions[currentHeredoc];\n                        const startRange = arg.getRange();\n                        const nameRange = this.getNameRange(startRange);\n                        const name = this.getName(nameRange);\n                        const delimiterRange = this.getDelimiterRange(arg, name, vscode_languageserver_types_1.Range.create(this.document.positionAt(startOffset + lineStart), this.document.positionAt(startOffset + i)));\n                        if (delimiterRange !== null) {\n                            const contentRange = vscode_languageserver_types_1.Range.create(this.document.positionAt(startOffset + contentStart), this.document.positionAt(startOffset + lineStart - 1));\n                            heredocs.push(new heredoc_1.Heredoc(startRange, name, nameRange, contentRange, delimiterRange));\n                            contentStart = -1;\n                            currentHeredoc++;\n                        }\n                        lineStart = -1;\n                    }\n                    else {\n                        // found a newline that hasn't been escaped,\n                        // must be in a heredoc\n                        const offsetLimit = startOffset + i;\n                        for (const arg of args) {\n                            // check if this argument is on the initial line of the instruction,\n                            // note that it may not all be on the same line due to escaped newlines,\n                            // because of that we need to use offset checks instead of line checks\n                            // as an argument being on a different line in the document does not\n                            // imply it is on a different line from the Dockerfile's point of view\n                            if (this.document.offsetAt(arg.getRange().start) < offsetLimit) {\n                                if (arg.getValue().startsWith(\"<<\")) {\n                                    heredocDefinitions.push(arg);\n                                }\n                            }\n                            else {\n                                break;\n                            }\n                        }\n                        heredocsProcessed = true;\n                        lineStart = -1;\n                        continue contentLoop;\n                    }\n                    break;\n                case ' ':\n                case '\\t':\n                    if (escaping) {\n                        break;\n                    }\n                case '#':\n                    if (escaping) {\n                        for (let j = i + 1; j < content.length; j++) {\n                            switch (content.charAt(j)) {\n                                case '\\n':\n                                    i = j;\n                                    continue contentLoop;\n                            }\n                        }\n                    }\n                default:\n                    if (escaping) {\n                        escaping = false;\n                    }\n                    if (heredocsProcessed) {\n                        if (contentStart === -1) {\n                            contentStart = i;\n                        }\n                        if (lineStart === -1) {\n                            lineStart = i;\n                        }\n                    }\n                    break;\n            }\n        }\n        if (heredocsProcessed) {\n            const arg = heredocDefinitions[currentHeredoc];\n            const startRange = arg.getRange();\n            const nameRange = this.getNameRange(startRange);\n            const name = this.getName(nameRange);\n            let contentRange = null;\n            // check if the last line of this instruction matches the name of the last heredoc\n            const delimiterRange = this.getDelimiterRange(arg, name, vscode_languageserver_types_1.Range.create(this.document.positionAt(startOffset + lineStart), range.end));\n            if (delimiterRange === null) {\n                contentRange = vscode_languageserver_types_1.Range.create(this.document.positionAt(startOffset + contentStart), range.end);\n            }\n            else if (contentEnd !== -1) {\n                contentRange = vscode_languageserver_types_1.Range.create(this.document.positionAt(startOffset + contentStart), this.document.positionAt(startOffset + contentEnd));\n            }\n            heredocs.push(new heredoc_1.Heredoc(startRange, name, nameRange, contentRange, delimiterRange));\n            currentHeredoc++;\n            for (let i = currentHeredoc; i < heredocDefinitions.length; i++) {\n                const arg = heredocDefinitions[currentHeredoc];\n                const startRange = arg.getRange();\n                const nameRange = this.getNameRange(startRange);\n                const name = this.getName(nameRange);\n                heredocs.push(new heredoc_1.Heredoc(startRange, name, nameRange, null, null));\n                currentHeredoc++;\n            }\n        }\n        else {\n            // instruction only on one line, if heredocs exist they would be incomplete\n            return this.createSingleLineHeredocs(args);\n        }\n        return heredocs;\n    }\n    getDelimiterRange(startArg, name, candidateRange) {\n        const text = this.document.getText(candidateRange);\n        if (startArg.getValue().startsWith(\"<<-\")) {\n            // remove tabs in the front\n            let index = 0;\n            while (text.charAt(index) === '\\t') {\n                index++;\n            }\n            if (text.substring(index) === name) {\n                return vscode_languageserver_types_1.Range.create(vscode_languageserver_types_1.Position.create(candidateRange.start.line, index), candidateRange.end);\n            }\n            return null;\n        }\n        return text === name ? candidateRange : null;\n    }\n}\nexports.Instruction = Instruction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/instruction.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/instructions/add.js":
/*!*************************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/instructions/add.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Add = void 0;\nconst jsonInstruction_1 = __webpack_require__(/*! ../jsonInstruction */ \"(rsc)/./node_modules/dockerfile-ast/lib/jsonInstruction.js\");\nclass Add extends jsonInstruction_1.JSONInstruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n    stopSearchingForFlags(argument) {\n        return argument.indexOf(\"--\") === -1;\n    }\n}\nexports.Add = Add;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2luc3RydWN0aW9ucy9hZGQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsV0FBVztBQUNYLDBCQUEwQixtQkFBTyxDQUFDLHNGQUFvQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpdmUtdmliZS1haS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2RvY2tlcmZpbGUtYXN0L2xpYi9pbnN0cnVjdGlvbnMvYWRkLmpzPzk5OWEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFkZCA9IHZvaWQgMDtcbmNvbnN0IGpzb25JbnN0cnVjdGlvbl8xID0gcmVxdWlyZShcIi4uL2pzb25JbnN0cnVjdGlvblwiKTtcbmNsYXNzIEFkZCBleHRlbmRzIGpzb25JbnN0cnVjdGlvbl8xLkpTT05JbnN0cnVjdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZG9jdW1lbnQsIHJhbmdlLCBkb2NrZXJmaWxlLCBlc2NhcGVDaGFyLCBpbnN0cnVjdGlvbiwgaW5zdHJ1Y3Rpb25SYW5nZSkge1xuICAgICAgICBzdXBlcihkb2N1bWVudCwgcmFuZ2UsIGRvY2tlcmZpbGUsIGVzY2FwZUNoYXIsIGluc3RydWN0aW9uLCBpbnN0cnVjdGlvblJhbmdlKTtcbiAgICB9XG4gICAgc3RvcFNlYXJjaGluZ0ZvckZsYWdzKGFyZ3VtZW50KSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudC5pbmRleE9mKFwiLS1cIikgPT09IC0xO1xuICAgIH1cbn1cbmV4cG9ydHMuQWRkID0gQWRkO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/instructions/add.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/instructions/arg.js":
/*!*************************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/instructions/arg.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Arg = void 0;\nconst property_1 = __webpack_require__(/*! ../property */ \"(rsc)/./node_modules/dockerfile-ast/lib/property.js\");\nconst propertyInstruction_1 = __webpack_require__(/*! ../propertyInstruction */ \"(rsc)/./node_modules/dockerfile-ast/lib/propertyInstruction.js\");\nclass Arg extends propertyInstruction_1.PropertyInstruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n        this.property = null;\n        const args = this.getPropertyArguments();\n        if (args.length === 1) {\n            this.property = new property_1.Property(this.document, this.escapeChar, args[0]);\n        }\n        else {\n            this.property = null;\n        }\n    }\n    /**\n     * Returns the variable defined by this ARG. This may be null if\n     * this ARG instruction is malformed and has no variable\n     * declaration.\n     */\n    getProperty() {\n        return this.property;\n    }\n}\nexports.Arg = Arg;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2luc3RydWN0aW9ucy9hcmcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsV0FBVztBQUNYLG1CQUFtQixtQkFBTyxDQUFDLHdFQUFhO0FBQ3hDLDhCQUE4QixtQkFBTyxDQUFDLDhGQUF3QjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdml2ZS12aWJlLWFpLW5leHQvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2luc3RydWN0aW9ucy9hcmcuanM/NWIyZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXJnID0gdm9pZCAwO1xuY29uc3QgcHJvcGVydHlfMSA9IHJlcXVpcmUoXCIuLi9wcm9wZXJ0eVwiKTtcbmNvbnN0IHByb3BlcnR5SW5zdHJ1Y3Rpb25fMSA9IHJlcXVpcmUoXCIuLi9wcm9wZXJ0eUluc3RydWN0aW9uXCIpO1xuY2xhc3MgQXJnIGV4dGVuZHMgcHJvcGVydHlJbnN0cnVjdGlvbl8xLlByb3BlcnR5SW5zdHJ1Y3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRvY3VtZW50LCByYW5nZSwgZG9ja2VyZmlsZSwgZXNjYXBlQ2hhciwgaW5zdHJ1Y3Rpb24sIGluc3RydWN0aW9uUmFuZ2UpIHtcbiAgICAgICAgc3VwZXIoZG9jdW1lbnQsIHJhbmdlLCBkb2NrZXJmaWxlLCBlc2NhcGVDaGFyLCBpbnN0cnVjdGlvbiwgaW5zdHJ1Y3Rpb25SYW5nZSk7XG4gICAgICAgIHRoaXMucHJvcGVydHkgPSBudWxsO1xuICAgICAgICBjb25zdCBhcmdzID0gdGhpcy5nZXRQcm9wZXJ0eUFyZ3VtZW50cygpO1xuICAgICAgICBpZiAoYXJncy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcGVydHkgPSBuZXcgcHJvcGVydHlfMS5Qcm9wZXJ0eSh0aGlzLmRvY3VtZW50LCB0aGlzLmVzY2FwZUNoYXIsIGFyZ3NbMF0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wcm9wZXJ0eSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdmFyaWFibGUgZGVmaW5lZCBieSB0aGlzIEFSRy4gVGhpcyBtYXkgYmUgbnVsbCBpZlxuICAgICAqIHRoaXMgQVJHIGluc3RydWN0aW9uIGlzIG1hbGZvcm1lZCBhbmQgaGFzIG5vIHZhcmlhYmxlXG4gICAgICogZGVjbGFyYXRpb24uXG4gICAgICovXG4gICAgZ2V0UHJvcGVydHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb3BlcnR5O1xuICAgIH1cbn1cbmV4cG9ydHMuQXJnID0gQXJnO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/instructions/arg.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/instructions/cmd.js":
/*!*************************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/instructions/cmd.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Cmd = void 0;\nconst jsonInstruction_1 = __webpack_require__(/*! ../jsonInstruction */ \"(rsc)/./node_modules/dockerfile-ast/lib/jsonInstruction.js\");\nclass Cmd extends jsonInstruction_1.JSONInstruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n}\nexports.Cmd = Cmd;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2luc3RydWN0aW9ucy9jbWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsV0FBVztBQUNYLDBCQUEwQixtQkFBTyxDQUFDLHNGQUFvQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpdmUtdmliZS1haS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2RvY2tlcmZpbGUtYXN0L2xpYi9pbnN0cnVjdGlvbnMvY21kLmpzPzBhNDYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNtZCA9IHZvaWQgMDtcbmNvbnN0IGpzb25JbnN0cnVjdGlvbl8xID0gcmVxdWlyZShcIi4uL2pzb25JbnN0cnVjdGlvblwiKTtcbmNsYXNzIENtZCBleHRlbmRzIGpzb25JbnN0cnVjdGlvbl8xLkpTT05JbnN0cnVjdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZG9jdW1lbnQsIHJhbmdlLCBkb2NrZXJmaWxlLCBlc2NhcGVDaGFyLCBpbnN0cnVjdGlvbiwgaW5zdHJ1Y3Rpb25SYW5nZSkge1xuICAgICAgICBzdXBlcihkb2N1bWVudCwgcmFuZ2UsIGRvY2tlcmZpbGUsIGVzY2FwZUNoYXIsIGluc3RydWN0aW9uLCBpbnN0cnVjdGlvblJhbmdlKTtcbiAgICB9XG59XG5leHBvcnRzLkNtZCA9IENtZDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/instructions/cmd.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/instructions/copy.js":
/*!**************************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/instructions/copy.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Copy = void 0;\nconst jsonInstruction_1 = __webpack_require__(/*! ../jsonInstruction */ \"(rsc)/./node_modules/dockerfile-ast/lib/jsonInstruction.js\");\nclass Copy extends jsonInstruction_1.JSONInstruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n    stopSearchingForFlags(argument) {\n        return argument.indexOf(\"--\") === -1;\n    }\n    getFromFlag() {\n        let flags = super.getFlags();\n        return flags.length === 1 && flags[0].getName() === \"from\" ? flags[0] : null;\n    }\n    /**\n     * Returns there here-documents that are defined in this RUN\n     * instruction.\n     *\n     * This API is experimental and subject to change.\n     */\n    getHeredocs() {\n        return super.getHeredocs();\n    }\n}\nexports.Copy = Copy;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2luc3RydWN0aW9ucy9jb3B5LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELFlBQVk7QUFDWiwwQkFBMEIsbUJBQU8sQ0FBQyxzRkFBb0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpdmUtdmliZS1haS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2RvY2tlcmZpbGUtYXN0L2xpYi9pbnN0cnVjdGlvbnMvY29weS5qcz8xNzQwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db3B5ID0gdm9pZCAwO1xuY29uc3QganNvbkluc3RydWN0aW9uXzEgPSByZXF1aXJlKFwiLi4vanNvbkluc3RydWN0aW9uXCIpO1xuY2xhc3MgQ29weSBleHRlbmRzIGpzb25JbnN0cnVjdGlvbl8xLkpTT05JbnN0cnVjdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZG9jdW1lbnQsIHJhbmdlLCBkb2NrZXJmaWxlLCBlc2NhcGVDaGFyLCBpbnN0cnVjdGlvbiwgaW5zdHJ1Y3Rpb25SYW5nZSkge1xuICAgICAgICBzdXBlcihkb2N1bWVudCwgcmFuZ2UsIGRvY2tlcmZpbGUsIGVzY2FwZUNoYXIsIGluc3RydWN0aW9uLCBpbnN0cnVjdGlvblJhbmdlKTtcbiAgICB9XG4gICAgc3RvcFNlYXJjaGluZ0ZvckZsYWdzKGFyZ3VtZW50KSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudC5pbmRleE9mKFwiLS1cIikgPT09IC0xO1xuICAgIH1cbiAgICBnZXRGcm9tRmxhZygpIHtcbiAgICAgICAgbGV0IGZsYWdzID0gc3VwZXIuZ2V0RmxhZ3MoKTtcbiAgICAgICAgcmV0dXJuIGZsYWdzLmxlbmd0aCA9PT0gMSAmJiBmbGFnc1swXS5nZXROYW1lKCkgPT09IFwiZnJvbVwiID8gZmxhZ3NbMF0gOiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZXJlIGhlcmUtZG9jdW1lbnRzIHRoYXQgYXJlIGRlZmluZWQgaW4gdGhpcyBSVU5cbiAgICAgKiBpbnN0cnVjdGlvbi5cbiAgICAgKlxuICAgICAqIFRoaXMgQVBJIGlzIGV4cGVyaW1lbnRhbCBhbmQgc3ViamVjdCB0byBjaGFuZ2UuXG4gICAgICovXG4gICAgZ2V0SGVyZWRvY3MoKSB7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXRIZXJlZG9jcygpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29weSA9IENvcHk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/instructions/copy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/instructions/entrypoint.js":
/*!********************************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/instructions/entrypoint.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Entrypoint = void 0;\nconst jsonInstruction_1 = __webpack_require__(/*! ../jsonInstruction */ \"(rsc)/./node_modules/dockerfile-ast/lib/jsonInstruction.js\");\nclass Entrypoint extends jsonInstruction_1.JSONInstruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n}\nexports.Entrypoint = Entrypoint;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2luc3RydWN0aW9ucy9lbnRyeXBvaW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQiwwQkFBMEIsbUJBQU8sQ0FBQyxzRkFBb0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpdmUtdmliZS1haS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2RvY2tlcmZpbGUtYXN0L2xpYi9pbnN0cnVjdGlvbnMvZW50cnlwb2ludC5qcz8zZTZlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5FbnRyeXBvaW50ID0gdm9pZCAwO1xuY29uc3QganNvbkluc3RydWN0aW9uXzEgPSByZXF1aXJlKFwiLi4vanNvbkluc3RydWN0aW9uXCIpO1xuY2xhc3MgRW50cnlwb2ludCBleHRlbmRzIGpzb25JbnN0cnVjdGlvbl8xLkpTT05JbnN0cnVjdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZG9jdW1lbnQsIHJhbmdlLCBkb2NrZXJmaWxlLCBlc2NhcGVDaGFyLCBpbnN0cnVjdGlvbiwgaW5zdHJ1Y3Rpb25SYW5nZSkge1xuICAgICAgICBzdXBlcihkb2N1bWVudCwgcmFuZ2UsIGRvY2tlcmZpbGUsIGVzY2FwZUNoYXIsIGluc3RydWN0aW9uLCBpbnN0cnVjdGlvblJhbmdlKTtcbiAgICB9XG59XG5leHBvcnRzLkVudHJ5cG9pbnQgPSBFbnRyeXBvaW50O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/instructions/entrypoint.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/instructions/env.js":
/*!*************************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/instructions/env.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Env = void 0;\nconst propertyInstruction_1 = __webpack_require__(/*! ../propertyInstruction */ \"(rsc)/./node_modules/dockerfile-ast/lib/propertyInstruction.js\");\nclass Env extends propertyInstruction_1.PropertyInstruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n    getProperties() {\n        return super.getProperties();\n    }\n}\nexports.Env = Env;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2luc3RydWN0aW9ucy9lbnYuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsV0FBVztBQUNYLDhCQUE4QixtQkFBTyxDQUFDLDhGQUF3QjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpdmUtdmliZS1haS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2RvY2tlcmZpbGUtYXN0L2xpYi9pbnN0cnVjdGlvbnMvZW52LmpzPzc5YmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkVudiA9IHZvaWQgMDtcbmNvbnN0IHByb3BlcnR5SW5zdHJ1Y3Rpb25fMSA9IHJlcXVpcmUoXCIuLi9wcm9wZXJ0eUluc3RydWN0aW9uXCIpO1xuY2xhc3MgRW52IGV4dGVuZHMgcHJvcGVydHlJbnN0cnVjdGlvbl8xLlByb3BlcnR5SW5zdHJ1Y3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRvY3VtZW50LCByYW5nZSwgZG9ja2VyZmlsZSwgZXNjYXBlQ2hhciwgaW5zdHJ1Y3Rpb24sIGluc3RydWN0aW9uUmFuZ2UpIHtcbiAgICAgICAgc3VwZXIoZG9jdW1lbnQsIHJhbmdlLCBkb2NrZXJmaWxlLCBlc2NhcGVDaGFyLCBpbnN0cnVjdGlvbiwgaW5zdHJ1Y3Rpb25SYW5nZSk7XG4gICAgfVxuICAgIGdldFByb3BlcnRpZXMoKSB7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXRQcm9wZXJ0aWVzKCk7XG4gICAgfVxufVxuZXhwb3J0cy5FbnYgPSBFbnY7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/instructions/env.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/instructions/from.js":
/*!**************************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/instructions/from.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.From = void 0;\nconst vscode_languageserver_types_1 = __webpack_require__(/*! vscode-languageserver-types */ \"(rsc)/./node_modules/vscode-languageserver-types/lib/umd/main.js\");\nconst modifiableInstruction_1 = __webpack_require__(/*! ../modifiableInstruction */ \"(rsc)/./node_modules/dockerfile-ast/lib/modifiableInstruction.js\");\nclass From extends modifiableInstruction_1.ModifiableInstruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n    stopSearchingForFlags(argument) {\n        return argument.indexOf(\"--\") === -1;\n    }\n    getImage() {\n        const args = this.getArguments();\n        return args.length > 0 ? args[0].getValue() : null;\n    }\n    /**\n     * Returns the name of the image that will be used as the base image.\n     *\n     * @return the base image's name, or null if unspecified\n     */\n    getImageName() {\n        const imageName = this.getRangeContent(this.getImageNameRange());\n        if (imageName === null) {\n            return null;\n        }\n        let commented = false;\n        let escaped = false;\n        let name = \"\";\n        for (let i = 0; i < imageName.length; i++) {\n            const ch = imageName.charAt(i);\n            switch (ch) {\n                case this.escapeChar:\n                    escaped = true;\n                    break;\n                case '\\r':\n                    continue;\n                case '\\n':\n                    commented = false;\n                    break;\n                case ' ':\n                case '\\t':\n                    break;\n                case '#':\n                    if (escaped) {\n                        commented = true;\n                    }\n                    else {\n                        name = name + ch;\n                        escaped = false;\n                    }\n                    break;\n                default:\n                    if (!commented) {\n                        name = name + ch;\n                        escaped = false;\n                    }\n                    break;\n            }\n        }\n        return name;\n    }\n    /**\n     * Returns the range that covers the name of the image used by\n     * this instruction.\n     *\n     * @return the range of the name of this instruction's argument,\n     *         or null if no image has been specified\n     */\n    getImageNameRange() {\n        let range = this.getImageRange();\n        if (range) {\n            let registryRange = this.getRegistryRange();\n            if (registryRange) {\n                range.start = this.document.positionAt(this.document.offsetAt(registryRange.end) + 1);\n            }\n            let tagRange = this.getImageTagRange();\n            let digestRange = this.getImageDigestRange();\n            if (tagRange === null) {\n                if (digestRange !== null) {\n                    range.end = this.document.positionAt(this.document.offsetAt(digestRange.start) - 1);\n                }\n            }\n            else {\n                range.end = this.document.positionAt(this.document.offsetAt(tagRange.start) - 1);\n            }\n            return range;\n        }\n        return null;\n    }\n    /**\n     * Returns the range that covers the image argument of this\n     * instruction. This includes the tag or digest of the image if\n     * it has been specified by the instruction.\n     *\n     * @return the range of the image argument, or null if no image\n     *         has been specified\n     */\n    getImageRange() {\n        let args = this.getArguments();\n        return args.length !== 0 ? args[0].getRange() : null;\n    }\n    getImageTag() {\n        return this.getRangeContent(this.getImageTagRange());\n    }\n    /**\n     * Returns the range in the document that the tag of the base\n     * image encompasses.\n     *\n     * @return the base image's tag's range in the document, or null\n     *         if no tag has been specified\n     */\n    getImageTagRange() {\n        const range = this.getImageRange();\n        if (range) {\n            const rangeStartOffset = this.document.offsetAt(range.start);\n            const content = this.getRangeContent(range);\n            const atIndex = this.indexOf(rangeStartOffset, content, '@');\n            const slashIndex = content.indexOf('/');\n            if (atIndex === -1) {\n                const colonIndex = this.lastIndexOf(rangeStartOffset, content, ':');\n                if (colonIndex > slashIndex) {\n                    return vscode_languageserver_types_1.Range.create(this.document.positionAt(rangeStartOffset + colonIndex + 1), range.end);\n                }\n            }\n            const subcontent = content.substring(0, atIndex);\n            const subcolonIndex = subcontent.indexOf(':');\n            if (subcolonIndex === -1) {\n                return null;\n            }\n            if (slashIndex === -1) {\n                // slash not found suggests no registry and no namespace defined\n                return vscode_languageserver_types_1.Range.create(this.document.positionAt(rangeStartOffset + subcolonIndex + 1), this.document.positionAt(rangeStartOffset + atIndex));\n            }\n            // both colon and slash found, check if it is a port\n            if (subcolonIndex < slashIndex) {\n                return null;\n            }\n            return vscode_languageserver_types_1.Range.create(this.document.positionAt(rangeStartOffset + subcolonIndex + 1), this.document.positionAt(rangeStartOffset + subcontent.length));\n        }\n        return null;\n    }\n    getImageDigest() {\n        return this.getRangeContent(this.getImageDigestRange());\n    }\n    /**\n     * Returns the range in the document that the digest of the base\n     * image encompasses.\n     *\n     * @return the base image's digest's range in the document, or null\n     *         if no digest has been specified\n     */\n    getImageDigestRange() {\n        let range = this.getImageRange();\n        if (range) {\n            let content = this.getRangeContent(range);\n            let index = this.lastIndexOf(this.document.offsetAt(range.start), content, '@');\n            if (index !== -1) {\n                return vscode_languageserver_types_1.Range.create(range.start.line, range.start.character + index + 1, range.end.line, range.end.character);\n            }\n        }\n        return null;\n    }\n    indexOf(documentOffset, content, searchString) {\n        let index = content.indexOf(searchString);\n        const variables = this.getVariables();\n        for (let i = 0; i < variables.length; i++) {\n            const position = documentOffset + index;\n            const variableRange = variables[i].getRange();\n            if (this.document.offsetAt(variableRange.start) < position && position < this.document.offsetAt(variableRange.end)) {\n                const offset = this.document.offsetAt(variableRange.end) - documentOffset;\n                const substring = content.substring(offset);\n                const subIndex = substring.indexOf(searchString);\n                if (subIndex === -1) {\n                    return -1;\n                }\n                index = subIndex + offset;\n                i = -1;\n                continue;\n            }\n        }\n        return index;\n    }\n    lastIndexOf(documentOffset, content, searchString) {\n        let index = content.lastIndexOf(searchString);\n        const variables = this.getVariables();\n        for (let i = 0; i < variables.length; i++) {\n            const position = documentOffset + index;\n            const variableRange = variables[i].getRange();\n            if (this.document.offsetAt(variableRange.start) < position && position < this.document.offsetAt(variableRange.end)) {\n                index = content.substring(0, index).lastIndexOf(searchString);\n                if (index === -1) {\n                    return -1;\n                }\n                i = -1;\n                continue;\n            }\n        }\n        return index;\n    }\n    getRegistry() {\n        return this.getRangeContent(this.getRegistryRange());\n    }\n    getRegistryRange() {\n        const range = this.getImageRange();\n        if (range) {\n            const tagRange = this.getImageTagRange();\n            const digestRange = this.getImageDigestRange();\n            if (tagRange === null) {\n                if (digestRange !== null) {\n                    range.end = this.document.positionAt(this.document.offsetAt(digestRange.start) - 1);\n                }\n            }\n            else {\n                range.end = this.document.positionAt(this.document.offsetAt(tagRange.start) - 1);\n            }\n            const content = this.getRangeContent(range);\n            const rangeStart = this.document.offsetAt(range.start);\n            const startingSlashIndex = this.indexOf(rangeStart, content, '/');\n            if (startingSlashIndex === -1) {\n                return null;\n            }\n            const portIndex = this.indexOf(rangeStart, content, ':');\n            const dotIndex = this.indexOf(rangeStart, content, '.');\n            // hostname detected\n            if (portIndex !== -1 || dotIndex !== -1) {\n                return vscode_languageserver_types_1.Range.create(range.start, this.document.positionAt(rangeStart + startingSlashIndex));\n            }\n            const registry = content.substring(0, startingSlashIndex);\n            // localhost registry detected\n            if (registry === 'localhost') {\n                return vscode_languageserver_types_1.Range.create(range.start, this.document.positionAt(rangeStart + startingSlashIndex));\n            }\n        }\n        return null;\n    }\n    getBuildStage() {\n        let range = this.getBuildStageRange();\n        return range === null ? null : this.getRangeContent(range);\n    }\n    getBuildStageRange() {\n        let args = this.getArguments();\n        if (args.length > 2 && args[1].getValue().toUpperCase() === \"AS\") {\n            return args[2].getRange();\n        }\n        return null;\n    }\n    getPlatformFlag() {\n        let flags = super.getFlags();\n        return flags.length === 1 && flags[0].getName() === \"platform\" ? flags[0] : null;\n    }\n}\nexports.From = From;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2luc3RydWN0aW9ucy9mcm9tLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELFlBQVk7QUFDWixzQ0FBc0MsbUJBQU8sQ0FBQyxxR0FBNkI7QUFDM0UsZ0NBQWdDLG1CQUFPLENBQUMsa0dBQTBCO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixzQkFBc0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isc0JBQXNCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHNCQUFzQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpdmUtdmliZS1haS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2RvY2tlcmZpbGUtYXN0L2xpYi9pbnN0cnVjdGlvbnMvZnJvbS5qcz80ZGM1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Gcm9tID0gdm9pZCAwO1xuY29uc3QgdnNjb2RlX2xhbmd1YWdlc2VydmVyX3R5cGVzXzEgPSByZXF1aXJlKFwidnNjb2RlLWxhbmd1YWdlc2VydmVyLXR5cGVzXCIpO1xuY29uc3QgbW9kaWZpYWJsZUluc3RydWN0aW9uXzEgPSByZXF1aXJlKFwiLi4vbW9kaWZpYWJsZUluc3RydWN0aW9uXCIpO1xuY2xhc3MgRnJvbSBleHRlbmRzIG1vZGlmaWFibGVJbnN0cnVjdGlvbl8xLk1vZGlmaWFibGVJbnN0cnVjdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZG9jdW1lbnQsIHJhbmdlLCBkb2NrZXJmaWxlLCBlc2NhcGVDaGFyLCBpbnN0cnVjdGlvbiwgaW5zdHJ1Y3Rpb25SYW5nZSkge1xuICAgICAgICBzdXBlcihkb2N1bWVudCwgcmFuZ2UsIGRvY2tlcmZpbGUsIGVzY2FwZUNoYXIsIGluc3RydWN0aW9uLCBpbnN0cnVjdGlvblJhbmdlKTtcbiAgICB9XG4gICAgc3RvcFNlYXJjaGluZ0ZvckZsYWdzKGFyZ3VtZW50KSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudC5pbmRleE9mKFwiLS1cIikgPT09IC0xO1xuICAgIH1cbiAgICBnZXRJbWFnZSgpIHtcbiAgICAgICAgY29uc3QgYXJncyA9IHRoaXMuZ2V0QXJndW1lbnRzKCk7XG4gICAgICAgIHJldHVybiBhcmdzLmxlbmd0aCA+IDAgPyBhcmdzWzBdLmdldFZhbHVlKCkgOiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBuYW1lIG9mIHRoZSBpbWFnZSB0aGF0IHdpbGwgYmUgdXNlZCBhcyB0aGUgYmFzZSBpbWFnZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gdGhlIGJhc2UgaW1hZ2UncyBuYW1lLCBvciBudWxsIGlmIHVuc3BlY2lmaWVkXG4gICAgICovXG4gICAgZ2V0SW1hZ2VOYW1lKCkge1xuICAgICAgICBjb25zdCBpbWFnZU5hbWUgPSB0aGlzLmdldFJhbmdlQ29udGVudCh0aGlzLmdldEltYWdlTmFtZVJhbmdlKCkpO1xuICAgICAgICBpZiAoaW1hZ2VOYW1lID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY29tbWVudGVkID0gZmFsc2U7XG4gICAgICAgIGxldCBlc2NhcGVkID0gZmFsc2U7XG4gICAgICAgIGxldCBuYW1lID0gXCJcIjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbWFnZU5hbWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNoID0gaW1hZ2VOYW1lLmNoYXJBdChpKTtcbiAgICAgICAgICAgIHN3aXRjaCAoY2gpIHtcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMuZXNjYXBlQ2hhcjpcbiAgICAgICAgICAgICAgICAgICAgZXNjYXBlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1xccic6XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1xcbic6XG4gICAgICAgICAgICAgICAgICAgIGNvbW1lbnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICcgJzpcbiAgICAgICAgICAgICAgICBjYXNlICdcXHQnOlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICcjJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lID0gbmFtZSArIGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXNjYXBlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghY29tbWVudGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lID0gbmFtZSArIGNoO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXNjYXBlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSByYW5nZSB0aGF0IGNvdmVycyB0aGUgbmFtZSBvZiB0aGUgaW1hZ2UgdXNlZCBieVxuICAgICAqIHRoaXMgaW5zdHJ1Y3Rpb24uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHRoZSByYW5nZSBvZiB0aGUgbmFtZSBvZiB0aGlzIGluc3RydWN0aW9uJ3MgYXJndW1lbnQsXG4gICAgICogICAgICAgICBvciBudWxsIGlmIG5vIGltYWdlIGhhcyBiZWVuIHNwZWNpZmllZFxuICAgICAqL1xuICAgIGdldEltYWdlTmFtZVJhbmdlKCkge1xuICAgICAgICBsZXQgcmFuZ2UgPSB0aGlzLmdldEltYWdlUmFuZ2UoKTtcbiAgICAgICAgaWYgKHJhbmdlKSB7XG4gICAgICAgICAgICBsZXQgcmVnaXN0cnlSYW5nZSA9IHRoaXMuZ2V0UmVnaXN0cnlSYW5nZSgpO1xuICAgICAgICAgICAgaWYgKHJlZ2lzdHJ5UmFuZ2UpIHtcbiAgICAgICAgICAgICAgICByYW5nZS5zdGFydCA9IHRoaXMuZG9jdW1lbnQucG9zaXRpb25BdCh0aGlzLmRvY3VtZW50Lm9mZnNldEF0KHJlZ2lzdHJ5UmFuZ2UuZW5kKSArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHRhZ1JhbmdlID0gdGhpcy5nZXRJbWFnZVRhZ1JhbmdlKCk7XG4gICAgICAgICAgICBsZXQgZGlnZXN0UmFuZ2UgPSB0aGlzLmdldEltYWdlRGlnZXN0UmFuZ2UoKTtcbiAgICAgICAgICAgIGlmICh0YWdSYW5nZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChkaWdlc3RSYW5nZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByYW5nZS5lbmQgPSB0aGlzLmRvY3VtZW50LnBvc2l0aW9uQXQodGhpcy5kb2N1bWVudC5vZmZzZXRBdChkaWdlc3RSYW5nZS5zdGFydCkgLSAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByYW5nZS5lbmQgPSB0aGlzLmRvY3VtZW50LnBvc2l0aW9uQXQodGhpcy5kb2N1bWVudC5vZmZzZXRBdCh0YWdSYW5nZS5zdGFydCkgLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByYW5nZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcmFuZ2UgdGhhdCBjb3ZlcnMgdGhlIGltYWdlIGFyZ3VtZW50IG9mIHRoaXNcbiAgICAgKiBpbnN0cnVjdGlvbi4gVGhpcyBpbmNsdWRlcyB0aGUgdGFnIG9yIGRpZ2VzdCBvZiB0aGUgaW1hZ2UgaWZcbiAgICAgKiBpdCBoYXMgYmVlbiBzcGVjaWZpZWQgYnkgdGhlIGluc3RydWN0aW9uLlxuICAgICAqXG4gICAgICogQHJldHVybiB0aGUgcmFuZ2Ugb2YgdGhlIGltYWdlIGFyZ3VtZW50LCBvciBudWxsIGlmIG5vIGltYWdlXG4gICAgICogICAgICAgICBoYXMgYmVlbiBzcGVjaWZpZWRcbiAgICAgKi9cbiAgICBnZXRJbWFnZVJhbmdlKCkge1xuICAgICAgICBsZXQgYXJncyA9IHRoaXMuZ2V0QXJndW1lbnRzKCk7XG4gICAgICAgIHJldHVybiBhcmdzLmxlbmd0aCAhPT0gMCA/IGFyZ3NbMF0uZ2V0UmFuZ2UoKSA6IG51bGw7XG4gICAgfVxuICAgIGdldEltYWdlVGFnKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRSYW5nZUNvbnRlbnQodGhpcy5nZXRJbWFnZVRhZ1JhbmdlKCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSByYW5nZSBpbiB0aGUgZG9jdW1lbnQgdGhhdCB0aGUgdGFnIG9mIHRoZSBiYXNlXG4gICAgICogaW1hZ2UgZW5jb21wYXNzZXMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHRoZSBiYXNlIGltYWdlJ3MgdGFnJ3MgcmFuZ2UgaW4gdGhlIGRvY3VtZW50LCBvciBudWxsXG4gICAgICogICAgICAgICBpZiBubyB0YWcgaGFzIGJlZW4gc3BlY2lmaWVkXG4gICAgICovXG4gICAgZ2V0SW1hZ2VUYWdSYW5nZSgpIHtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLmdldEltYWdlUmFuZ2UoKTtcbiAgICAgICAgaWYgKHJhbmdlKSB7XG4gICAgICAgICAgICBjb25zdCByYW5nZVN0YXJ0T2Zmc2V0ID0gdGhpcy5kb2N1bWVudC5vZmZzZXRBdChyYW5nZS5zdGFydCk7XG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gdGhpcy5nZXRSYW5nZUNvbnRlbnQocmFuZ2UpO1xuICAgICAgICAgICAgY29uc3QgYXRJbmRleCA9IHRoaXMuaW5kZXhPZihyYW5nZVN0YXJ0T2Zmc2V0LCBjb250ZW50LCAnQCcpO1xuICAgICAgICAgICAgY29uc3Qgc2xhc2hJbmRleCA9IGNvbnRlbnQuaW5kZXhPZignLycpO1xuICAgICAgICAgICAgaWYgKGF0SW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29sb25JbmRleCA9IHRoaXMubGFzdEluZGV4T2YocmFuZ2VTdGFydE9mZnNldCwgY29udGVudCwgJzonKTtcbiAgICAgICAgICAgICAgICBpZiAoY29sb25JbmRleCA+IHNsYXNoSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZzY29kZV9sYW5ndWFnZXNlcnZlcl90eXBlc18xLlJhbmdlLmNyZWF0ZSh0aGlzLmRvY3VtZW50LnBvc2l0aW9uQXQocmFuZ2VTdGFydE9mZnNldCArIGNvbG9uSW5kZXggKyAxKSwgcmFuZ2UuZW5kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzdWJjb250ZW50ID0gY29udGVudC5zdWJzdHJpbmcoMCwgYXRJbmRleCk7XG4gICAgICAgICAgICBjb25zdCBzdWJjb2xvbkluZGV4ID0gc3ViY29udGVudC5pbmRleE9mKCc6Jyk7XG4gICAgICAgICAgICBpZiAoc3ViY29sb25JbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzbGFzaEluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIC8vIHNsYXNoIG5vdCBmb3VuZCBzdWdnZXN0cyBubyByZWdpc3RyeSBhbmQgbm8gbmFtZXNwYWNlIGRlZmluZWRcbiAgICAgICAgICAgICAgICByZXR1cm4gdnNjb2RlX2xhbmd1YWdlc2VydmVyX3R5cGVzXzEuUmFuZ2UuY3JlYXRlKHRoaXMuZG9jdW1lbnQucG9zaXRpb25BdChyYW5nZVN0YXJ0T2Zmc2V0ICsgc3ViY29sb25JbmRleCArIDEpLCB0aGlzLmRvY3VtZW50LnBvc2l0aW9uQXQocmFuZ2VTdGFydE9mZnNldCArIGF0SW5kZXgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGJvdGggY29sb24gYW5kIHNsYXNoIGZvdW5kLCBjaGVjayBpZiBpdCBpcyBhIHBvcnRcbiAgICAgICAgICAgIGlmIChzdWJjb2xvbkluZGV4IDwgc2xhc2hJbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHZzY29kZV9sYW5ndWFnZXNlcnZlcl90eXBlc18xLlJhbmdlLmNyZWF0ZSh0aGlzLmRvY3VtZW50LnBvc2l0aW9uQXQocmFuZ2VTdGFydE9mZnNldCArIHN1YmNvbG9uSW5kZXggKyAxKSwgdGhpcy5kb2N1bWVudC5wb3NpdGlvbkF0KHJhbmdlU3RhcnRPZmZzZXQgKyBzdWJjb250ZW50Lmxlbmd0aCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBnZXRJbWFnZURpZ2VzdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmFuZ2VDb250ZW50KHRoaXMuZ2V0SW1hZ2VEaWdlc3RSYW5nZSgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcmFuZ2UgaW4gdGhlIGRvY3VtZW50IHRoYXQgdGhlIGRpZ2VzdCBvZiB0aGUgYmFzZVxuICAgICAqIGltYWdlIGVuY29tcGFzc2VzLlxuICAgICAqXG4gICAgICogQHJldHVybiB0aGUgYmFzZSBpbWFnZSdzIGRpZ2VzdCdzIHJhbmdlIGluIHRoZSBkb2N1bWVudCwgb3IgbnVsbFxuICAgICAqICAgICAgICAgaWYgbm8gZGlnZXN0IGhhcyBiZWVuIHNwZWNpZmllZFxuICAgICAqL1xuICAgIGdldEltYWdlRGlnZXN0UmFuZ2UoKSB7XG4gICAgICAgIGxldCByYW5nZSA9IHRoaXMuZ2V0SW1hZ2VSYW5nZSgpO1xuICAgICAgICBpZiAocmFuZ2UpIHtcbiAgICAgICAgICAgIGxldCBjb250ZW50ID0gdGhpcy5nZXRSYW5nZUNvbnRlbnQocmFuZ2UpO1xuICAgICAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5sYXN0SW5kZXhPZih0aGlzLmRvY3VtZW50Lm9mZnNldEF0KHJhbmdlLnN0YXJ0KSwgY29udGVudCwgJ0AnKTtcbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdnNjb2RlX2xhbmd1YWdlc2VydmVyX3R5cGVzXzEuUmFuZ2UuY3JlYXRlKHJhbmdlLnN0YXJ0LmxpbmUsIHJhbmdlLnN0YXJ0LmNoYXJhY3RlciArIGluZGV4ICsgMSwgcmFuZ2UuZW5kLmxpbmUsIHJhbmdlLmVuZC5jaGFyYWN0ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpbmRleE9mKGRvY3VtZW50T2Zmc2V0LCBjb250ZW50LCBzZWFyY2hTdHJpbmcpIHtcbiAgICAgICAgbGV0IGluZGV4ID0gY29udGVudC5pbmRleE9mKHNlYXJjaFN0cmluZyk7XG4gICAgICAgIGNvbnN0IHZhcmlhYmxlcyA9IHRoaXMuZ2V0VmFyaWFibGVzKCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFyaWFibGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGRvY3VtZW50T2Zmc2V0ICsgaW5kZXg7XG4gICAgICAgICAgICBjb25zdCB2YXJpYWJsZVJhbmdlID0gdmFyaWFibGVzW2ldLmdldFJhbmdlKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5kb2N1bWVudC5vZmZzZXRBdCh2YXJpYWJsZVJhbmdlLnN0YXJ0KSA8IHBvc2l0aW9uICYmIHBvc2l0aW9uIDwgdGhpcy5kb2N1bWVudC5vZmZzZXRBdCh2YXJpYWJsZVJhbmdlLmVuZCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSB0aGlzLmRvY3VtZW50Lm9mZnNldEF0KHZhcmlhYmxlUmFuZ2UuZW5kKSAtIGRvY3VtZW50T2Zmc2V0O1xuICAgICAgICAgICAgICAgIGNvbnN0IHN1YnN0cmluZyA9IGNvbnRlbnQuc3Vic3RyaW5nKG9mZnNldCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3ViSW5kZXggPSBzdWJzdHJpbmcuaW5kZXhPZihzZWFyY2hTdHJpbmcpO1xuICAgICAgICAgICAgICAgIGlmIChzdWJJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpbmRleCA9IHN1YkluZGV4ICsgb2Zmc2V0O1xuICAgICAgICAgICAgICAgIGkgPSAtMTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxuICAgIGxhc3RJbmRleE9mKGRvY3VtZW50T2Zmc2V0LCBjb250ZW50LCBzZWFyY2hTdHJpbmcpIHtcbiAgICAgICAgbGV0IGluZGV4ID0gY29udGVudC5sYXN0SW5kZXhPZihzZWFyY2hTdHJpbmcpO1xuICAgICAgICBjb25zdCB2YXJpYWJsZXMgPSB0aGlzLmdldFZhcmlhYmxlcygpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhcmlhYmxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBkb2N1bWVudE9mZnNldCArIGluZGV4O1xuICAgICAgICAgICAgY29uc3QgdmFyaWFibGVSYW5nZSA9IHZhcmlhYmxlc1tpXS5nZXRSYW5nZSgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnQub2Zmc2V0QXQodmFyaWFibGVSYW5nZS5zdGFydCkgPCBwb3NpdGlvbiAmJiBwb3NpdGlvbiA8IHRoaXMuZG9jdW1lbnQub2Zmc2V0QXQodmFyaWFibGVSYW5nZS5lbmQpKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBjb250ZW50LnN1YnN0cmluZygwLCBpbmRleCkubGFzdEluZGV4T2Yoc2VhcmNoU3RyaW5nKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaSA9IC0xO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICB9XG4gICAgZ2V0UmVnaXN0cnkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFJhbmdlQ29udGVudCh0aGlzLmdldFJlZ2lzdHJ5UmFuZ2UoKSk7XG4gICAgfVxuICAgIGdldFJlZ2lzdHJ5UmFuZ2UoKSB7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gdGhpcy5nZXRJbWFnZVJhbmdlKCk7XG4gICAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICAgICAgY29uc3QgdGFnUmFuZ2UgPSB0aGlzLmdldEltYWdlVGFnUmFuZ2UoKTtcbiAgICAgICAgICAgIGNvbnN0IGRpZ2VzdFJhbmdlID0gdGhpcy5nZXRJbWFnZURpZ2VzdFJhbmdlKCk7XG4gICAgICAgICAgICBpZiAodGFnUmFuZ2UgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGlnZXN0UmFuZ2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UuZW5kID0gdGhpcy5kb2N1bWVudC5wb3NpdGlvbkF0KHRoaXMuZG9jdW1lbnQub2Zmc2V0QXQoZGlnZXN0UmFuZ2Uuc3RhcnQpIC0gMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmFuZ2UuZW5kID0gdGhpcy5kb2N1bWVudC5wb3NpdGlvbkF0KHRoaXMuZG9jdW1lbnQub2Zmc2V0QXQodGFnUmFuZ2Uuc3RhcnQpIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gdGhpcy5nZXRSYW5nZUNvbnRlbnQocmFuZ2UpO1xuICAgICAgICAgICAgY29uc3QgcmFuZ2VTdGFydCA9IHRoaXMuZG9jdW1lbnQub2Zmc2V0QXQocmFuZ2Uuc3RhcnQpO1xuICAgICAgICAgICAgY29uc3Qgc3RhcnRpbmdTbGFzaEluZGV4ID0gdGhpcy5pbmRleE9mKHJhbmdlU3RhcnQsIGNvbnRlbnQsICcvJyk7XG4gICAgICAgICAgICBpZiAoc3RhcnRpbmdTbGFzaEluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcG9ydEluZGV4ID0gdGhpcy5pbmRleE9mKHJhbmdlU3RhcnQsIGNvbnRlbnQsICc6Jyk7XG4gICAgICAgICAgICBjb25zdCBkb3RJbmRleCA9IHRoaXMuaW5kZXhPZihyYW5nZVN0YXJ0LCBjb250ZW50LCAnLicpO1xuICAgICAgICAgICAgLy8gaG9zdG5hbWUgZGV0ZWN0ZWRcbiAgICAgICAgICAgIGlmIChwb3J0SW5kZXggIT09IC0xIHx8IGRvdEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfdHlwZXNfMS5SYW5nZS5jcmVhdGUocmFuZ2Uuc3RhcnQsIHRoaXMuZG9jdW1lbnQucG9zaXRpb25BdChyYW5nZVN0YXJ0ICsgc3RhcnRpbmdTbGFzaEluZGV4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZWdpc3RyeSA9IGNvbnRlbnQuc3Vic3RyaW5nKDAsIHN0YXJ0aW5nU2xhc2hJbmRleCk7XG4gICAgICAgICAgICAvLyBsb2NhbGhvc3QgcmVnaXN0cnkgZGV0ZWN0ZWRcbiAgICAgICAgICAgIGlmIChyZWdpc3RyeSA9PT0gJ2xvY2FsaG9zdCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdnNjb2RlX2xhbmd1YWdlc2VydmVyX3R5cGVzXzEuUmFuZ2UuY3JlYXRlKHJhbmdlLnN0YXJ0LCB0aGlzLmRvY3VtZW50LnBvc2l0aW9uQXQocmFuZ2VTdGFydCArIHN0YXJ0aW5nU2xhc2hJbmRleCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBnZXRCdWlsZFN0YWdlKCkge1xuICAgICAgICBsZXQgcmFuZ2UgPSB0aGlzLmdldEJ1aWxkU3RhZ2VSYW5nZSgpO1xuICAgICAgICByZXR1cm4gcmFuZ2UgPT09IG51bGwgPyBudWxsIDogdGhpcy5nZXRSYW5nZUNvbnRlbnQocmFuZ2UpO1xuICAgIH1cbiAgICBnZXRCdWlsZFN0YWdlUmFuZ2UoKSB7XG4gICAgICAgIGxldCBhcmdzID0gdGhpcy5nZXRBcmd1bWVudHMoKTtcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMiAmJiBhcmdzWzFdLmdldFZhbHVlKCkudG9VcHBlckNhc2UoKSA9PT0gXCJBU1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJnc1syXS5nZXRSYW5nZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBnZXRQbGF0Zm9ybUZsYWcoKSB7XG4gICAgICAgIGxldCBmbGFncyA9IHN1cGVyLmdldEZsYWdzKCk7XG4gICAgICAgIHJldHVybiBmbGFncy5sZW5ndGggPT09IDEgJiYgZmxhZ3NbMF0uZ2V0TmFtZSgpID09PSBcInBsYXRmb3JtXCIgPyBmbGFnc1swXSA6IG51bGw7XG4gICAgfVxufVxuZXhwb3J0cy5Gcm9tID0gRnJvbTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/instructions/from.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/instructions/healthcheck.js":
/*!*********************************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/instructions/healthcheck.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Healthcheck = void 0;\nconst modifiableInstruction_1 = __webpack_require__(/*! ../modifiableInstruction */ \"(rsc)/./node_modules/dockerfile-ast/lib/modifiableInstruction.js\");\nclass Healthcheck extends modifiableInstruction_1.ModifiableInstruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n    stopSearchingForFlags(argument) {\n        argument = argument.toUpperCase();\n        return argument === \"CMD\" || argument === \"NONE\";\n    }\n    getSubcommand() {\n        let args = this.getArguments();\n        return args.length !== 0 ? args[0] : null;\n    }\n}\nexports.Healthcheck = Healthcheck;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2luc3RydWN0aW9ucy9oZWFsdGhjaGVjay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUI7QUFDbkIsZ0NBQWdDLG1CQUFPLENBQUMsa0dBQTBCO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdml2ZS12aWJlLWFpLW5leHQvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2luc3RydWN0aW9ucy9oZWFsdGhjaGVjay5qcz85MjgxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5IZWFsdGhjaGVjayA9IHZvaWQgMDtcbmNvbnN0IG1vZGlmaWFibGVJbnN0cnVjdGlvbl8xID0gcmVxdWlyZShcIi4uL21vZGlmaWFibGVJbnN0cnVjdGlvblwiKTtcbmNsYXNzIEhlYWx0aGNoZWNrIGV4dGVuZHMgbW9kaWZpYWJsZUluc3RydWN0aW9uXzEuTW9kaWZpYWJsZUluc3RydWN0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihkb2N1bWVudCwgcmFuZ2UsIGRvY2tlcmZpbGUsIGVzY2FwZUNoYXIsIGluc3RydWN0aW9uLCBpbnN0cnVjdGlvblJhbmdlKSB7XG4gICAgICAgIHN1cGVyKGRvY3VtZW50LCByYW5nZSwgZG9ja2VyZmlsZSwgZXNjYXBlQ2hhciwgaW5zdHJ1Y3Rpb24sIGluc3RydWN0aW9uUmFuZ2UpO1xuICAgIH1cbiAgICBzdG9wU2VhcmNoaW5nRm9yRmxhZ3MoYXJndW1lbnQpIHtcbiAgICAgICAgYXJndW1lbnQgPSBhcmd1bWVudC50b1VwcGVyQ2FzZSgpO1xuICAgICAgICByZXR1cm4gYXJndW1lbnQgPT09IFwiQ01EXCIgfHwgYXJndW1lbnQgPT09IFwiTk9ORVwiO1xuICAgIH1cbiAgICBnZXRTdWJjb21tYW5kKCkge1xuICAgICAgICBsZXQgYXJncyA9IHRoaXMuZ2V0QXJndW1lbnRzKCk7XG4gICAgICAgIHJldHVybiBhcmdzLmxlbmd0aCAhPT0gMCA/IGFyZ3NbMF0gOiBudWxsO1xuICAgIH1cbn1cbmV4cG9ydHMuSGVhbHRoY2hlY2sgPSBIZWFsdGhjaGVjaztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/instructions/healthcheck.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/instructions/label.js":
/*!***************************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/instructions/label.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Label = void 0;\nconst propertyInstruction_1 = __webpack_require__(/*! ../propertyInstruction */ \"(rsc)/./node_modules/dockerfile-ast/lib/propertyInstruction.js\");\nconst util_1 = __webpack_require__(/*! ../util */ \"(rsc)/./node_modules/dockerfile-ast/lib/util.js\");\nclass Label extends propertyInstruction_1.PropertyInstruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n    getVariables() {\n        const variables = super.getVariables();\n        const properties = this.getProperties();\n        // iterate over all of this LABEL's properties\n        for (const property of properties) {\n            const value = property.getUnescapedValue();\n            // check if the value is contained in single quotes,\n            // single quotes would indicate a literal value\n            if (value !== null && value.length > 2 && value.charAt(0) === '\\'' && value.charAt(value.length - 1) === '\\'') {\n                const range = property.getValueRange();\n                for (let i = 0; i < variables.length; i++) {\n                    // if a variable is in a single quote, remove it from the list\n                    if (util_1.Util.isInsideRange(variables[i].getRange().start, range)) {\n                        variables.splice(i, 1);\n                        i--;\n                    }\n                }\n            }\n        }\n        return variables;\n    }\n    getProperties() {\n        return super.getProperties();\n    }\n}\nexports.Label = Label;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2luc3RydWN0aW9ucy9sYWJlbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhO0FBQ2IsOEJBQThCLG1CQUFPLENBQUMsOEZBQXdCO0FBQzlELGVBQWUsbUJBQU8sQ0FBQyxnRUFBUztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHNCQUFzQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpdmUtdmliZS1haS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2RvY2tlcmZpbGUtYXN0L2xpYi9pbnN0cnVjdGlvbnMvbGFiZWwuanM/OTI2YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTGFiZWwgPSB2b2lkIDA7XG5jb25zdCBwcm9wZXJ0eUluc3RydWN0aW9uXzEgPSByZXF1aXJlKFwiLi4vcHJvcGVydHlJbnN0cnVjdGlvblwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi91dGlsXCIpO1xuY2xhc3MgTGFiZWwgZXh0ZW5kcyBwcm9wZXJ0eUluc3RydWN0aW9uXzEuUHJvcGVydHlJbnN0cnVjdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZG9jdW1lbnQsIHJhbmdlLCBkb2NrZXJmaWxlLCBlc2NhcGVDaGFyLCBpbnN0cnVjdGlvbiwgaW5zdHJ1Y3Rpb25SYW5nZSkge1xuICAgICAgICBzdXBlcihkb2N1bWVudCwgcmFuZ2UsIGRvY2tlcmZpbGUsIGVzY2FwZUNoYXIsIGluc3RydWN0aW9uLCBpbnN0cnVjdGlvblJhbmdlKTtcbiAgICB9XG4gICAgZ2V0VmFyaWFibGVzKCkge1xuICAgICAgICBjb25zdCB2YXJpYWJsZXMgPSBzdXBlci5nZXRWYXJpYWJsZXMoKTtcbiAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IHRoaXMuZ2V0UHJvcGVydGllcygpO1xuICAgICAgICAvLyBpdGVyYXRlIG92ZXIgYWxsIG9mIHRoaXMgTEFCRUwncyBwcm9wZXJ0aWVzXG4gICAgICAgIGZvciAoY29uc3QgcHJvcGVydHkgb2YgcHJvcGVydGllcykge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBwcm9wZXJ0eS5nZXRVbmVzY2FwZWRWYWx1ZSgpO1xuICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlIHZhbHVlIGlzIGNvbnRhaW5lZCBpbiBzaW5nbGUgcXVvdGVzLFxuICAgICAgICAgICAgLy8gc2luZ2xlIHF1b3RlcyB3b3VsZCBpbmRpY2F0ZSBhIGxpdGVyYWwgdmFsdWVcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZS5sZW5ndGggPiAyICYmIHZhbHVlLmNoYXJBdCgwKSA9PT0gJ1xcJycgJiYgdmFsdWUuY2hhckF0KHZhbHVlLmxlbmd0aCAtIDEpID09PSAnXFwnJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gcHJvcGVydHkuZ2V0VmFsdWVSYW5nZSgpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFyaWFibGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIGEgdmFyaWFibGUgaXMgaW4gYSBzaW5nbGUgcXVvdGUsIHJlbW92ZSBpdCBmcm9tIHRoZSBsaXN0XG4gICAgICAgICAgICAgICAgICAgIGlmICh1dGlsXzEuVXRpbC5pc0luc2lkZVJhbmdlKHZhcmlhYmxlc1tpXS5nZXRSYW5nZSgpLnN0YXJ0LCByYW5nZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpLS07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhcmlhYmxlcztcbiAgICB9XG4gICAgZ2V0UHJvcGVydGllcygpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmdldFByb3BlcnRpZXMoKTtcbiAgICB9XG59XG5leHBvcnRzLkxhYmVsID0gTGFiZWw7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/instructions/label.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/instructions/onbuild.js":
/*!*****************************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/instructions/onbuild.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Onbuild = void 0;\nconst vscode_languageserver_types_1 = __webpack_require__(/*! vscode-languageserver-types */ \"(rsc)/./node_modules/vscode-languageserver-types/lib/umd/main.js\");\nconst parser_1 = __webpack_require__(/*! ../parser */ \"(rsc)/./node_modules/dockerfile-ast/lib/parser.js\");\nconst instruction_1 = __webpack_require__(/*! ../instruction */ \"(rsc)/./node_modules/dockerfile-ast/lib/instruction.js\");\nclass Onbuild extends instruction_1.Instruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n    getTrigger() {\n        let trigger = this.getTriggerWord();\n        return trigger === null ? null : trigger.toUpperCase();\n    }\n    getTriggerWord() {\n        return this.getRangeContent(this.getTriggerRange());\n    }\n    getTriggerRange() {\n        let args = this.getArguments();\n        return args.length > 0 ? args[0].getRange() : null;\n    }\n    getTriggerInstruction() {\n        let triggerRange = this.getTriggerRange();\n        if (triggerRange === null) {\n            return null;\n        }\n        let args = this.getArguments();\n        return parser_1.Parser.createInstruction(this.document, this.dockerfile, this.escapeChar, vscode_languageserver_types_1.Range.create(args[0].getRange().start, this.getRange().end), this.getTriggerWord(), triggerRange);\n    }\n}\nexports.Onbuild = Onbuild;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2luc3RydWN0aW9ucy9vbmJ1aWxkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWU7QUFDZixzQ0FBc0MsbUJBQU8sQ0FBQyxxR0FBNkI7QUFDM0UsaUJBQWlCLG1CQUFPLENBQUMsb0VBQVc7QUFDcEMsc0JBQXNCLG1CQUFPLENBQUMsOEVBQWdCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aXZlLXZpYmUtYWktbmV4dC8uL25vZGVfbW9kdWxlcy9kb2NrZXJmaWxlLWFzdC9saWIvaW5zdHJ1Y3Rpb25zL29uYnVpbGQuanM/MmU5YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT25idWlsZCA9IHZvaWQgMDtcbmNvbnN0IHZzY29kZV9sYW5ndWFnZXNlcnZlcl90eXBlc18xID0gcmVxdWlyZShcInZzY29kZS1sYW5ndWFnZXNlcnZlci10eXBlc1wiKTtcbmNvbnN0IHBhcnNlcl8xID0gcmVxdWlyZShcIi4uL3BhcnNlclwiKTtcbmNvbnN0IGluc3RydWN0aW9uXzEgPSByZXF1aXJlKFwiLi4vaW5zdHJ1Y3Rpb25cIik7XG5jbGFzcyBPbmJ1aWxkIGV4dGVuZHMgaW5zdHJ1Y3Rpb25fMS5JbnN0cnVjdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZG9jdW1lbnQsIHJhbmdlLCBkb2NrZXJmaWxlLCBlc2NhcGVDaGFyLCBpbnN0cnVjdGlvbiwgaW5zdHJ1Y3Rpb25SYW5nZSkge1xuICAgICAgICBzdXBlcihkb2N1bWVudCwgcmFuZ2UsIGRvY2tlcmZpbGUsIGVzY2FwZUNoYXIsIGluc3RydWN0aW9uLCBpbnN0cnVjdGlvblJhbmdlKTtcbiAgICB9XG4gICAgZ2V0VHJpZ2dlcigpIHtcbiAgICAgICAgbGV0IHRyaWdnZXIgPSB0aGlzLmdldFRyaWdnZXJXb3JkKCk7XG4gICAgICAgIHJldHVybiB0cmlnZ2VyID09PSBudWxsID8gbnVsbCA6IHRyaWdnZXIudG9VcHBlckNhc2UoKTtcbiAgICB9XG4gICAgZ2V0VHJpZ2dlcldvcmQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFJhbmdlQ29udGVudCh0aGlzLmdldFRyaWdnZXJSYW5nZSgpKTtcbiAgICB9XG4gICAgZ2V0VHJpZ2dlclJhbmdlKCkge1xuICAgICAgICBsZXQgYXJncyA9IHRoaXMuZ2V0QXJndW1lbnRzKCk7XG4gICAgICAgIHJldHVybiBhcmdzLmxlbmd0aCA+IDAgPyBhcmdzWzBdLmdldFJhbmdlKCkgOiBudWxsO1xuICAgIH1cbiAgICBnZXRUcmlnZ2VySW5zdHJ1Y3Rpb24oKSB7XG4gICAgICAgIGxldCB0cmlnZ2VyUmFuZ2UgPSB0aGlzLmdldFRyaWdnZXJSYW5nZSgpO1xuICAgICAgICBpZiAodHJpZ2dlclJhbmdlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgYXJncyA9IHRoaXMuZ2V0QXJndW1lbnRzKCk7XG4gICAgICAgIHJldHVybiBwYXJzZXJfMS5QYXJzZXIuY3JlYXRlSW5zdHJ1Y3Rpb24odGhpcy5kb2N1bWVudCwgdGhpcy5kb2NrZXJmaWxlLCB0aGlzLmVzY2FwZUNoYXIsIHZzY29kZV9sYW5ndWFnZXNlcnZlcl90eXBlc18xLlJhbmdlLmNyZWF0ZShhcmdzWzBdLmdldFJhbmdlKCkuc3RhcnQsIHRoaXMuZ2V0UmFuZ2UoKS5lbmQpLCB0aGlzLmdldFRyaWdnZXJXb3JkKCksIHRyaWdnZXJSYW5nZSk7XG4gICAgfVxufVxuZXhwb3J0cy5PbmJ1aWxkID0gT25idWlsZDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/instructions/onbuild.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/instructions/run.js":
/*!*************************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/instructions/run.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Run = void 0;\nconst jsonInstruction_1 = __webpack_require__(/*! ../jsonInstruction */ \"(rsc)/./node_modules/dockerfile-ast/lib/jsonInstruction.js\");\nclass Run extends jsonInstruction_1.JSONInstruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n    stopSearchingForFlags(argument) {\n        return argument.indexOf(\"--\") === -1;\n    }\n    /**\n     * Returns there here-documents that are defined in this RUN\n     * instruction.\n     *\n     * This API is experimental and subject to change.\n     */\n    getHeredocs() {\n        return super.getHeredocs();\n    }\n}\nexports.Run = Run;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2luc3RydWN0aW9ucy9ydW4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsV0FBVztBQUNYLDBCQUEwQixtQkFBTyxDQUFDLHNGQUFvQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpdmUtdmliZS1haS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2RvY2tlcmZpbGUtYXN0L2xpYi9pbnN0cnVjdGlvbnMvcnVuLmpzP2E1NDkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJ1biA9IHZvaWQgMDtcbmNvbnN0IGpzb25JbnN0cnVjdGlvbl8xID0gcmVxdWlyZShcIi4uL2pzb25JbnN0cnVjdGlvblwiKTtcbmNsYXNzIFJ1biBleHRlbmRzIGpzb25JbnN0cnVjdGlvbl8xLkpTT05JbnN0cnVjdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZG9jdW1lbnQsIHJhbmdlLCBkb2NrZXJmaWxlLCBlc2NhcGVDaGFyLCBpbnN0cnVjdGlvbiwgaW5zdHJ1Y3Rpb25SYW5nZSkge1xuICAgICAgICBzdXBlcihkb2N1bWVudCwgcmFuZ2UsIGRvY2tlcmZpbGUsIGVzY2FwZUNoYXIsIGluc3RydWN0aW9uLCBpbnN0cnVjdGlvblJhbmdlKTtcbiAgICB9XG4gICAgc3RvcFNlYXJjaGluZ0ZvckZsYWdzKGFyZ3VtZW50KSB7XG4gICAgICAgIHJldHVybiBhcmd1bWVudC5pbmRleE9mKFwiLS1cIikgPT09IC0xO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZXJlIGhlcmUtZG9jdW1lbnRzIHRoYXQgYXJlIGRlZmluZWQgaW4gdGhpcyBSVU5cbiAgICAgKiBpbnN0cnVjdGlvbi5cbiAgICAgKlxuICAgICAqIFRoaXMgQVBJIGlzIGV4cGVyaW1lbnRhbCBhbmQgc3ViamVjdCB0byBjaGFuZ2UuXG4gICAgICovXG4gICAgZ2V0SGVyZWRvY3MoKSB7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXRIZXJlZG9jcygpO1xuICAgIH1cbn1cbmV4cG9ydHMuUnVuID0gUnVuO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/instructions/run.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/instructions/shell.js":
/*!***************************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/instructions/shell.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Shell = void 0;\nconst jsonInstruction_1 = __webpack_require__(/*! ../jsonInstruction */ \"(rsc)/./node_modules/dockerfile-ast/lib/jsonInstruction.js\");\nclass Shell extends jsonInstruction_1.JSONInstruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n}\nexports.Shell = Shell;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2luc3RydWN0aW9ucy9zaGVsbC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhO0FBQ2IsMEJBQTBCLG1CQUFPLENBQUMsc0ZBQW9CO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdml2ZS12aWJlLWFpLW5leHQvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2luc3RydWN0aW9ucy9zaGVsbC5qcz9lMWVhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TaGVsbCA9IHZvaWQgMDtcbmNvbnN0IGpzb25JbnN0cnVjdGlvbl8xID0gcmVxdWlyZShcIi4uL2pzb25JbnN0cnVjdGlvblwiKTtcbmNsYXNzIFNoZWxsIGV4dGVuZHMganNvbkluc3RydWN0aW9uXzEuSlNPTkluc3RydWN0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihkb2N1bWVudCwgcmFuZ2UsIGRvY2tlcmZpbGUsIGVzY2FwZUNoYXIsIGluc3RydWN0aW9uLCBpbnN0cnVjdGlvblJhbmdlKSB7XG4gICAgICAgIHN1cGVyKGRvY3VtZW50LCByYW5nZSwgZG9ja2VyZmlsZSwgZXNjYXBlQ2hhciwgaW5zdHJ1Y3Rpb24sIGluc3RydWN0aW9uUmFuZ2UpO1xuICAgIH1cbn1cbmV4cG9ydHMuU2hlbGwgPSBTaGVsbDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/instructions/shell.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/instructions/stopsignal.js":
/*!********************************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/instructions/stopsignal.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Stopsignal = void 0;\nconst instruction_1 = __webpack_require__(/*! ../instruction */ \"(rsc)/./node_modules/dockerfile-ast/lib/instruction.js\");\nclass Stopsignal extends instruction_1.Instruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n}\nexports.Stopsignal = Stopsignal;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2luc3RydWN0aW9ucy9zdG9wc2lnbmFsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQixzQkFBc0IsbUJBQU8sQ0FBQyw4RUFBZ0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpdmUtdmliZS1haS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2RvY2tlcmZpbGUtYXN0L2xpYi9pbnN0cnVjdGlvbnMvc3RvcHNpZ25hbC5qcz8zNmNiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TdG9wc2lnbmFsID0gdm9pZCAwO1xuY29uc3QgaW5zdHJ1Y3Rpb25fMSA9IHJlcXVpcmUoXCIuLi9pbnN0cnVjdGlvblwiKTtcbmNsYXNzIFN0b3BzaWduYWwgZXh0ZW5kcyBpbnN0cnVjdGlvbl8xLkluc3RydWN0aW9uIHtcbiAgICBjb25zdHJ1Y3Rvcihkb2N1bWVudCwgcmFuZ2UsIGRvY2tlcmZpbGUsIGVzY2FwZUNoYXIsIGluc3RydWN0aW9uLCBpbnN0cnVjdGlvblJhbmdlKSB7XG4gICAgICAgIHN1cGVyKGRvY3VtZW50LCByYW5nZSwgZG9ja2VyZmlsZSwgZXNjYXBlQ2hhciwgaW5zdHJ1Y3Rpb24sIGluc3RydWN0aW9uUmFuZ2UpO1xuICAgIH1cbn1cbmV4cG9ydHMuU3RvcHNpZ25hbCA9IFN0b3BzaWduYWw7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/instructions/stopsignal.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/instructions/user.js":
/*!**************************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/instructions/user.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.User = void 0;\nconst instruction_1 = __webpack_require__(/*! ../instruction */ \"(rsc)/./node_modules/dockerfile-ast/lib/instruction.js\");\nclass User extends instruction_1.Instruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n}\nexports.User = User;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2luc3RydWN0aW9ucy91c2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELFlBQVk7QUFDWixzQkFBc0IsbUJBQU8sQ0FBQyw4RUFBZ0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aXZlLXZpYmUtYWktbmV4dC8uL25vZGVfbW9kdWxlcy9kb2NrZXJmaWxlLWFzdC9saWIvaW5zdHJ1Y3Rpb25zL3VzZXIuanM/NTBjNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVXNlciA9IHZvaWQgMDtcbmNvbnN0IGluc3RydWN0aW9uXzEgPSByZXF1aXJlKFwiLi4vaW5zdHJ1Y3Rpb25cIik7XG5jbGFzcyBVc2VyIGV4dGVuZHMgaW5zdHJ1Y3Rpb25fMS5JbnN0cnVjdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZG9jdW1lbnQsIHJhbmdlLCBkb2NrZXJmaWxlLCBlc2NhcGVDaGFyLCBpbnN0cnVjdGlvbiwgaW5zdHJ1Y3Rpb25SYW5nZSkge1xuICAgICAgICBzdXBlcihkb2N1bWVudCwgcmFuZ2UsIGRvY2tlcmZpbGUsIGVzY2FwZUNoYXIsIGluc3RydWN0aW9uLCBpbnN0cnVjdGlvblJhbmdlKTtcbiAgICB9XG59XG5leHBvcnRzLlVzZXIgPSBVc2VyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/instructions/user.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/instructions/volume.js":
/*!****************************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/instructions/volume.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Volume = void 0;\nconst jsonInstruction_1 = __webpack_require__(/*! ../jsonInstruction */ \"(rsc)/./node_modules/dockerfile-ast/lib/jsonInstruction.js\");\nclass Volume extends jsonInstruction_1.JSONInstruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n}\nexports.Volume = Volume;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2luc3RydWN0aW9ucy92b2x1bWUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYztBQUNkLDBCQUEwQixtQkFBTyxDQUFDLHNGQUFvQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpdmUtdmliZS1haS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2RvY2tlcmZpbGUtYXN0L2xpYi9pbnN0cnVjdGlvbnMvdm9sdW1lLmpzP2YzYzEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlZvbHVtZSA9IHZvaWQgMDtcbmNvbnN0IGpzb25JbnN0cnVjdGlvbl8xID0gcmVxdWlyZShcIi4uL2pzb25JbnN0cnVjdGlvblwiKTtcbmNsYXNzIFZvbHVtZSBleHRlbmRzIGpzb25JbnN0cnVjdGlvbl8xLkpTT05JbnN0cnVjdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZG9jdW1lbnQsIHJhbmdlLCBkb2NrZXJmaWxlLCBlc2NhcGVDaGFyLCBpbnN0cnVjdGlvbiwgaW5zdHJ1Y3Rpb25SYW5nZSkge1xuICAgICAgICBzdXBlcihkb2N1bWVudCwgcmFuZ2UsIGRvY2tlcmZpbGUsIGVzY2FwZUNoYXIsIGluc3RydWN0aW9uLCBpbnN0cnVjdGlvblJhbmdlKTtcbiAgICB9XG59XG5leHBvcnRzLlZvbHVtZSA9IFZvbHVtZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/instructions/volume.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/instructions/workdir.js":
/*!*****************************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/instructions/workdir.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Workdir = void 0;\nconst instruction_1 = __webpack_require__(/*! ../instruction */ \"(rsc)/./node_modules/dockerfile-ast/lib/instruction.js\");\nclass Workdir extends instruction_1.Instruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n    /**\n     * Returns the path that has been defined. Note that this path may\n     * be absolute or relative depending on what was written in the\n     * instruction.\n     *\n     * @return the working directory's path, or null if this\n     *         instruction has no arguments\n     */\n    getPath() {\n        return this.getArgumentsContent();\n    }\n    /**\n     * Returns the absolute path that this instruction resolves to. The\n     * function will inspect prior WORKDIR instructions in the current\n     * image or another build stage in the Dockerfile to try to\n     * determine this.\n     *\n     * @return the absolute path of the working directory, or null if\n     *         this instruction has no arguments, or undefined if it\n     *         cannot be determined because only relative paths could be\n     *         found\n     */\n    getAbsolutePath() {\n        const path = this.getPath();\n        if (path === null || path.startsWith(\"/\")) {\n            return path;\n        }\n        const startLine = this.getRange().start.line;\n        const hierarchy = this.dockerfile.getStageHierarchy(startLine);\n        for (let i = hierarchy.length - 1; i >= 0; i--) {\n            const workdirs = hierarchy[i].getWORKDIRs();\n            for (let j = workdirs.length - 1; j >= 0; j--) {\n                if (workdirs[j].getRange().start.line < startLine) {\n                    const parent = workdirs[j].getAbsolutePath();\n                    if (parent === undefined || parent === null) {\n                        return undefined;\n                    }\n                    return parent.endsWith(\"/\") ? parent + path : parent + \"/\" + path;\n                }\n            }\n        }\n        return undefined;\n    }\n}\nexports.Workdir = Workdir;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2luc3RydWN0aW9ucy93b3JrZGlyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWU7QUFDZixzQkFBc0IsbUJBQU8sQ0FBQyw4RUFBZ0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLFFBQVE7QUFDbkQ7QUFDQSw4Q0FBOEMsUUFBUTtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdml2ZS12aWJlLWFpLW5leHQvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2luc3RydWN0aW9ucy93b3JrZGlyLmpzPzUwZTYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLldvcmtkaXIgPSB2b2lkIDA7XG5jb25zdCBpbnN0cnVjdGlvbl8xID0gcmVxdWlyZShcIi4uL2luc3RydWN0aW9uXCIpO1xuY2xhc3MgV29ya2RpciBleHRlbmRzIGluc3RydWN0aW9uXzEuSW5zdHJ1Y3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKGRvY3VtZW50LCByYW5nZSwgZG9ja2VyZmlsZSwgZXNjYXBlQ2hhciwgaW5zdHJ1Y3Rpb24sIGluc3RydWN0aW9uUmFuZ2UpIHtcbiAgICAgICAgc3VwZXIoZG9jdW1lbnQsIHJhbmdlLCBkb2NrZXJmaWxlLCBlc2NhcGVDaGFyLCBpbnN0cnVjdGlvbiwgaW5zdHJ1Y3Rpb25SYW5nZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHBhdGggdGhhdCBoYXMgYmVlbiBkZWZpbmVkLiBOb3RlIHRoYXQgdGhpcyBwYXRoIG1heVxuICAgICAqIGJlIGFic29sdXRlIG9yIHJlbGF0aXZlIGRlcGVuZGluZyBvbiB3aGF0IHdhcyB3cml0dGVuIGluIHRoZVxuICAgICAqIGluc3RydWN0aW9uLlxuICAgICAqXG4gICAgICogQHJldHVybiB0aGUgd29ya2luZyBkaXJlY3RvcnkncyBwYXRoLCBvciBudWxsIGlmIHRoaXNcbiAgICAgKiAgICAgICAgIGluc3RydWN0aW9uIGhhcyBubyBhcmd1bWVudHNcbiAgICAgKi9cbiAgICBnZXRQYXRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRBcmd1bWVudHNDb250ZW50KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGFic29sdXRlIHBhdGggdGhhdCB0aGlzIGluc3RydWN0aW9uIHJlc29sdmVzIHRvLiBUaGVcbiAgICAgKiBmdW5jdGlvbiB3aWxsIGluc3BlY3QgcHJpb3IgV09SS0RJUiBpbnN0cnVjdGlvbnMgaW4gdGhlIGN1cnJlbnRcbiAgICAgKiBpbWFnZSBvciBhbm90aGVyIGJ1aWxkIHN0YWdlIGluIHRoZSBEb2NrZXJmaWxlIHRvIHRyeSB0b1xuICAgICAqIGRldGVybWluZSB0aGlzLlxuICAgICAqXG4gICAgICogQHJldHVybiB0aGUgYWJzb2x1dGUgcGF0aCBvZiB0aGUgd29ya2luZyBkaXJlY3RvcnksIG9yIG51bGwgaWZcbiAgICAgKiAgICAgICAgIHRoaXMgaW5zdHJ1Y3Rpb24gaGFzIG5vIGFyZ3VtZW50cywgb3IgdW5kZWZpbmVkIGlmIGl0XG4gICAgICogICAgICAgICBjYW5ub3QgYmUgZGV0ZXJtaW5lZCBiZWNhdXNlIG9ubHkgcmVsYXRpdmUgcGF0aHMgY291bGQgYmVcbiAgICAgKiAgICAgICAgIGZvdW5kXG4gICAgICovXG4gICAgZ2V0QWJzb2x1dGVQYXRoKCkge1xuICAgICAgICBjb25zdCBwYXRoID0gdGhpcy5nZXRQYXRoKCk7XG4gICAgICAgIGlmIChwYXRoID09PSBudWxsIHx8IHBhdGguc3RhcnRzV2l0aChcIi9cIikpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0YXJ0TGluZSA9IHRoaXMuZ2V0UmFuZ2UoKS5zdGFydC5saW5lO1xuICAgICAgICBjb25zdCBoaWVyYXJjaHkgPSB0aGlzLmRvY2tlcmZpbGUuZ2V0U3RhZ2VIaWVyYXJjaHkoc3RhcnRMaW5lKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IGhpZXJhcmNoeS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgY29uc3Qgd29ya2RpcnMgPSBoaWVyYXJjaHlbaV0uZ2V0V09SS0RJUnMoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSB3b3JrZGlycy5sZW5ndGggLSAxOyBqID49IDA7IGotLSkge1xuICAgICAgICAgICAgICAgIGlmICh3b3JrZGlyc1tqXS5nZXRSYW5nZSgpLnN0YXJ0LmxpbmUgPCBzdGFydExpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gd29ya2RpcnNbal0uZ2V0QWJzb2x1dGVQYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnQgPT09IHVuZGVmaW5lZCB8fCBwYXJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudC5lbmRzV2l0aChcIi9cIikgPyBwYXJlbnQgKyBwYXRoIDogcGFyZW50ICsgXCIvXCIgKyBwYXRoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cbmV4cG9ydHMuV29ya2RpciA9IFdvcmtkaXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/instructions/workdir.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/jsonArgument.js":
/*!*********************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/jsonArgument.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.JSONArgument = void 0;\nconst argument_1 = __webpack_require__(/*! ./argument */ \"(rsc)/./node_modules/dockerfile-ast/lib/argument.js\");\nclass JSONArgument extends argument_1.Argument {\n    constructor(value, range, jsonRange) {\n        super(value, range);\n        this.jsonRange = jsonRange;\n    }\n    getJSONRange() {\n        return this.jsonRange;\n    }\n    getJSONValue() {\n        let value = super.getValue();\n        value = value.substring(1, value.length - 1);\n        return value;\n    }\n}\nexports.JSONArgument = JSONArgument;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2pzb25Bcmd1bWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0I7QUFDcEIsbUJBQW1CLG1CQUFPLENBQUMsdUVBQVk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpdmUtdmliZS1haS1uZXh0Ly4vbm9kZV9tb2R1bGVzL2RvY2tlcmZpbGUtYXN0L2xpYi9qc29uQXJndW1lbnQuanM/YjI1OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSlNPTkFyZ3VtZW50ID0gdm9pZCAwO1xuY29uc3QgYXJndW1lbnRfMSA9IHJlcXVpcmUoXCIuL2FyZ3VtZW50XCIpO1xuY2xhc3MgSlNPTkFyZ3VtZW50IGV4dGVuZHMgYXJndW1lbnRfMS5Bcmd1bWVudCB7XG4gICAgY29uc3RydWN0b3IodmFsdWUsIHJhbmdlLCBqc29uUmFuZ2UpIHtcbiAgICAgICAgc3VwZXIodmFsdWUsIHJhbmdlKTtcbiAgICAgICAgdGhpcy5qc29uUmFuZ2UgPSBqc29uUmFuZ2U7XG4gICAgfVxuICAgIGdldEpTT05SYW5nZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuanNvblJhbmdlO1xuICAgIH1cbiAgICBnZXRKU09OVmFsdWUoKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IHN1cGVyLmdldFZhbHVlKCk7XG4gICAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKDEsIHZhbHVlLmxlbmd0aCAtIDEpO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufVxuZXhwb3J0cy5KU09OQXJndW1lbnQgPSBKU09OQXJndW1lbnQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/jsonArgument.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/jsonInstruction.js":
/*!************************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/jsonInstruction.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.JSONInstruction = void 0;\nconst vscode_languageserver_types_1 = __webpack_require__(/*! vscode-languageserver-types */ \"(rsc)/./node_modules/vscode-languageserver-types/lib/umd/main.js\");\nconst argument_1 = __webpack_require__(/*! ./argument */ \"(rsc)/./node_modules/dockerfile-ast/lib/argument.js\");\nconst jsonArgument_1 = __webpack_require__(/*! ./jsonArgument */ \"(rsc)/./node_modules/dockerfile-ast/lib/jsonArgument.js\");\nconst modifiableInstruction_1 = __webpack_require__(/*! ./modifiableInstruction */ \"(rsc)/./node_modules/dockerfile-ast/lib/modifiableInstruction.js\");\nclass JSONInstruction extends modifiableInstruction_1.ModifiableInstruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n        this.openingBracket = null;\n        this.closingBracket = null;\n        this.jsonStrings = [];\n        const argsContent = this.getRawArgumentsContent();\n        if (argsContent === null) {\n            return;\n        }\n        const args = this.getArguments();\n        if (args.length === 1 && args[0].getValue() === \"[]\") {\n            let argRange = args[0].getRange();\n            this.openingBracket = new argument_1.Argument(\"[\", vscode_languageserver_types_1.Range.create(argRange.start.line, argRange.start.character, argRange.start.line, argRange.start.character + 1));\n            this.closingBracket = new argument_1.Argument(\"]\", vscode_languageserver_types_1.Range.create(argRange.start.line, argRange.start.character + 1, argRange.end.line, argRange.end.character));\n            return;\n        }\n        else if (args.length === 2 && args[0].getValue() === '[' && args[1].getValue() === ']') {\n            this.openingBracket = args[0];\n            this.closingBracket = args[1];\n            return;\n        }\n        const argsOffset = document.offsetAt(this.getArgumentsRange().start);\n        let start = -1;\n        let last = \"\";\n        let quoted = false;\n        let escapedArg = \"\";\n        argsCheck: for (let i = 0; i < argsContent.length; i++) {\n            let char = argsContent.charAt(i);\n            switch (char) {\n                case '[':\n                    if (last === \"\") {\n                        this.openingBracket = new argument_1.Argument(\"[\", vscode_languageserver_types_1.Range.create(document.positionAt(argsOffset + i), document.positionAt(argsOffset + i + 1)));\n                        last = '[';\n                    }\n                    else if (quoted) {\n                        escapedArg = escapedArg + char;\n                    }\n                    else {\n                        break argsCheck;\n                    }\n                    break;\n                case '\"':\n                    if (last === '[' || last === ',') {\n                        start = i;\n                        quoted = true;\n                        last = '\"';\n                        escapedArg = escapedArg + char;\n                        continue;\n                    }\n                    else if (last === '\"') {\n                        if (quoted) {\n                            escapedArg = escapedArg + char;\n                            // quoted string done\n                            quoted = false;\n                            this.jsonStrings.push(new jsonArgument_1.JSONArgument(escapedArg, vscode_languageserver_types_1.Range.create(document.positionAt(argsOffset + start), document.positionAt(argsOffset + i + 1)), vscode_languageserver_types_1.Range.create(document.positionAt(argsOffset + start + 1), document.positionAt(argsOffset + i))));\n                            escapedArg = \"\";\n                        }\n                        else {\n                            // should be a , or a ]\n                            break argsCheck;\n                        }\n                    }\n                    else {\n                        break argsCheck;\n                    }\n                    break;\n                case ',':\n                    if (quoted) {\n                        escapedArg = escapedArg + char;\n                    }\n                    else {\n                        if (last === '\"') {\n                            last = ',';\n                        }\n                        else {\n                            break argsCheck;\n                        }\n                    }\n                    break;\n                case ']':\n                    if (quoted) {\n                        escapedArg = escapedArg + char;\n                    }\n                    else if (last !== \"\") {\n                        this.closingBracket = new argument_1.Argument(\"]\", vscode_languageserver_types_1.Range.create(document.positionAt(argsOffset + i), document.positionAt(argsOffset + i + 1)));\n                        break argsCheck;\n                    }\n                    break;\n                case ' ':\n                case '\\t':\n                    break;\n                case '\\\\':\n                    if (quoted) {\n                        switch (argsContent.charAt(i + 1)) {\n                            case '\"':\n                            case '\\\\':\n                                escapedArg = escapedArg + argsContent.charAt(i + 1);\n                                i++;\n                                continue;\n                            case ' ':\n                            case '\\t':\n                                escapeCheck: for (let j = i + 2; j < argsContent.length; j++) {\n                                    switch (argsContent.charAt(j)) {\n                                        case '\\r':\n                                            // offset one more for \\r\\n\n                                            j++;\n                                        case '\\n':\n                                            i = j;\n                                            continue argsCheck;\n                                        case ' ':\n                                        case '\\t':\n                                            break;\n                                        default:\n                                            break escapeCheck;\n                                    }\n                                }\n                                break;\n                            case '\\r':\n                                // offset one more for \\r\\n\n                                i++;\n                            default:\n                                i++;\n                                continue;\n                        }\n                    }\n                    else {\n                        escapeCheck: for (let j = i + 1; j < argsContent.length; j++) {\n                            switch (argsContent.charAt(j)) {\n                                case '\\r':\n                                    // offset one more for \\r\\n\n                                    j++;\n                                case '\\n':\n                                    i = j;\n                                    continue argsCheck;\n                                case ' ':\n                                case '\\t':\n                                    break;\n                                default:\n                                    break escapeCheck;\n                            }\n                        }\n                    }\n                    break argsCheck;\n                default:\n                    if (!quoted) {\n                        break argsCheck;\n                    }\n                    escapedArg = escapedArg + char;\n                    break;\n            }\n        }\n    }\n    stopSearchingForFlags(_value) {\n        return true;\n    }\n    getOpeningBracket() {\n        return this.openingBracket;\n    }\n    getJSONStrings() {\n        return this.jsonStrings;\n    }\n    getClosingBracket() {\n        return this.closingBracket;\n    }\n}\nexports.JSONInstruction = JSONInstruction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/jsonInstruction.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/line.js":
/*!*************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/line.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Line = void 0;\nclass Line {\n    constructor(document, range) {\n        this.document = document;\n        this.range = range;\n    }\n    getRange() {\n        return this.range;\n    }\n    getTextContent() {\n        return this.document.getText().substring(this.document.offsetAt(this.range.start), this.document.offsetAt(this.range.end));\n    }\n    isAfter(line) {\n        return this.range.start.line > line.range.start.line;\n    }\n    isBefore(line) {\n        return this.range.start.line < line;\n    }\n}\nexports.Line = Line;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL2xpbmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aXZlLXZpYmUtYWktbmV4dC8uL25vZGVfbW9kdWxlcy9kb2NrZXJmaWxlLWFzdC9saWIvbGluZS5qcz9iMjg0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5MaW5lID0gdm9pZCAwO1xuY2xhc3MgTGluZSB7XG4gICAgY29uc3RydWN0b3IoZG9jdW1lbnQsIHJhbmdlKSB7XG4gICAgICAgIHRoaXMuZG9jdW1lbnQgPSBkb2N1bWVudDtcbiAgICAgICAgdGhpcy5yYW5nZSA9IHJhbmdlO1xuICAgIH1cbiAgICBnZXRSYW5nZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmFuZ2U7XG4gICAgfVxuICAgIGdldFRleHRDb250ZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kb2N1bWVudC5nZXRUZXh0KCkuc3Vic3RyaW5nKHRoaXMuZG9jdW1lbnQub2Zmc2V0QXQodGhpcy5yYW5nZS5zdGFydCksIHRoaXMuZG9jdW1lbnQub2Zmc2V0QXQodGhpcy5yYW5nZS5lbmQpKTtcbiAgICB9XG4gICAgaXNBZnRlcihsaW5lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJhbmdlLnN0YXJ0LmxpbmUgPiBsaW5lLnJhbmdlLnN0YXJ0LmxpbmU7XG4gICAgfVxuICAgIGlzQmVmb3JlKGxpbmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmFuZ2Uuc3RhcnQubGluZSA8IGxpbmU7XG4gICAgfVxufVxuZXhwb3J0cy5MaW5lID0gTGluZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/line.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/main.js":
/*!*************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/main.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DockerfileParser = exports.DefaultVariables = exports.Directive = exports.Keyword = exports.Workdir = exports.Volume = exports.User = exports.Stopsignal = exports.Shell = exports.Run = exports.PropertyInstruction = exports.Onbuild = exports.ModifiableInstruction = exports.Label = exports.JSONInstruction = exports.Heredoc = exports.Healthcheck = exports.From = exports.Env = exports.Entrypoint = exports.Copy = exports.Cmd = exports.Arg = exports.Add = exports.Variable = exports.Property = exports.ParserDirective = exports.Line = exports.Instruction = exports.Flag = exports.Comment = exports.JSONArgument = exports.Argument = void 0;\nvar argument_1 = __webpack_require__(/*! ./argument */ \"(rsc)/./node_modules/dockerfile-ast/lib/argument.js\");\nObject.defineProperty(exports, \"Argument\", ({ enumerable: true, get: function () { return argument_1.Argument; } }));\nvar jsonArgument_1 = __webpack_require__(/*! ./jsonArgument */ \"(rsc)/./node_modules/dockerfile-ast/lib/jsonArgument.js\");\nObject.defineProperty(exports, \"JSONArgument\", ({ enumerable: true, get: function () { return jsonArgument_1.JSONArgument; } }));\nconst comment_1 = __webpack_require__(/*! ./comment */ \"(rsc)/./node_modules/dockerfile-ast/lib/comment.js\");\nObject.defineProperty(exports, \"Comment\", ({ enumerable: true, get: function () { return comment_1.Comment; } }));\nconst parser_1 = __webpack_require__(/*! ./parser */ \"(rsc)/./node_modules/dockerfile-ast/lib/parser.js\");\nvar flag_1 = __webpack_require__(/*! ./flag */ \"(rsc)/./node_modules/dockerfile-ast/lib/flag.js\");\nObject.defineProperty(exports, \"Flag\", ({ enumerable: true, get: function () { return flag_1.Flag; } }));\nconst instruction_1 = __webpack_require__(/*! ./instruction */ \"(rsc)/./node_modules/dockerfile-ast/lib/instruction.js\");\nObject.defineProperty(exports, \"Instruction\", ({ enumerable: true, get: function () { return instruction_1.Instruction; } }));\nvar line_1 = __webpack_require__(/*! ./line */ \"(rsc)/./node_modules/dockerfile-ast/lib/line.js\");\nObject.defineProperty(exports, \"Line\", ({ enumerable: true, get: function () { return line_1.Line; } }));\nconst parserDirective_1 = __webpack_require__(/*! ./parserDirective */ \"(rsc)/./node_modules/dockerfile-ast/lib/parserDirective.js\");\nObject.defineProperty(exports, \"ParserDirective\", ({ enumerable: true, get: function () { return parserDirective_1.ParserDirective; } }));\nvar property_1 = __webpack_require__(/*! ./property */ \"(rsc)/./node_modules/dockerfile-ast/lib/property.js\");\nObject.defineProperty(exports, \"Property\", ({ enumerable: true, get: function () { return property_1.Property; } }));\nvar variable_1 = __webpack_require__(/*! ./variable */ \"(rsc)/./node_modules/dockerfile-ast/lib/variable.js\");\nObject.defineProperty(exports, \"Variable\", ({ enumerable: true, get: function () { return variable_1.Variable; } }));\nvar add_1 = __webpack_require__(/*! ./instructions/add */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/add.js\");\nObject.defineProperty(exports, \"Add\", ({ enumerable: true, get: function () { return add_1.Add; } }));\nconst arg_1 = __webpack_require__(/*! ./instructions/arg */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/arg.js\");\nObject.defineProperty(exports, \"Arg\", ({ enumerable: true, get: function () { return arg_1.Arg; } }));\nconst cmd_1 = __webpack_require__(/*! ./instructions/cmd */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/cmd.js\");\nObject.defineProperty(exports, \"Cmd\", ({ enumerable: true, get: function () { return cmd_1.Cmd; } }));\nconst copy_1 = __webpack_require__(/*! ./instructions/copy */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/copy.js\");\nObject.defineProperty(exports, \"Copy\", ({ enumerable: true, get: function () { return copy_1.Copy; } }));\nconst entrypoint_1 = __webpack_require__(/*! ./instructions/entrypoint */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/entrypoint.js\");\nObject.defineProperty(exports, \"Entrypoint\", ({ enumerable: true, get: function () { return entrypoint_1.Entrypoint; } }));\nconst env_1 = __webpack_require__(/*! ./instructions/env */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/env.js\");\nObject.defineProperty(exports, \"Env\", ({ enumerable: true, get: function () { return env_1.Env; } }));\nconst from_1 = __webpack_require__(/*! ./instructions/from */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/from.js\");\nObject.defineProperty(exports, \"From\", ({ enumerable: true, get: function () { return from_1.From; } }));\nconst healthcheck_1 = __webpack_require__(/*! ./instructions/healthcheck */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/healthcheck.js\");\nObject.defineProperty(exports, \"Healthcheck\", ({ enumerable: true, get: function () { return healthcheck_1.Healthcheck; } }));\nvar heredoc_1 = __webpack_require__(/*! ./heredoc */ \"(rsc)/./node_modules/dockerfile-ast/lib/heredoc.js\");\nObject.defineProperty(exports, \"Heredoc\", ({ enumerable: true, get: function () { return heredoc_1.Heredoc; } }));\nvar jsonInstruction_1 = __webpack_require__(/*! ./jsonInstruction */ \"(rsc)/./node_modules/dockerfile-ast/lib/jsonInstruction.js\");\nObject.defineProperty(exports, \"JSONInstruction\", ({ enumerable: true, get: function () { return jsonInstruction_1.JSONInstruction; } }));\nvar label_1 = __webpack_require__(/*! ./instructions/label */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/label.js\");\nObject.defineProperty(exports, \"Label\", ({ enumerable: true, get: function () { return label_1.Label; } }));\nvar modifiableInstruction_1 = __webpack_require__(/*! ./modifiableInstruction */ \"(rsc)/./node_modules/dockerfile-ast/lib/modifiableInstruction.js\");\nObject.defineProperty(exports, \"ModifiableInstruction\", ({ enumerable: true, get: function () { return modifiableInstruction_1.ModifiableInstruction; } }));\nvar onbuild_1 = __webpack_require__(/*! ./instructions/onbuild */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/onbuild.js\");\nObject.defineProperty(exports, \"Onbuild\", ({ enumerable: true, get: function () { return onbuild_1.Onbuild; } }));\nvar propertyInstruction_1 = __webpack_require__(/*! ./propertyInstruction */ \"(rsc)/./node_modules/dockerfile-ast/lib/propertyInstruction.js\");\nObject.defineProperty(exports, \"PropertyInstruction\", ({ enumerable: true, get: function () { return propertyInstruction_1.PropertyInstruction; } }));\nvar run_1 = __webpack_require__(/*! ./instructions/run */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/run.js\");\nObject.defineProperty(exports, \"Run\", ({ enumerable: true, get: function () { return run_1.Run; } }));\nvar shell_1 = __webpack_require__(/*! ./instructions/shell */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/shell.js\");\nObject.defineProperty(exports, \"Shell\", ({ enumerable: true, get: function () { return shell_1.Shell; } }));\nvar stopsignal_1 = __webpack_require__(/*! ./instructions/stopsignal */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/stopsignal.js\");\nObject.defineProperty(exports, \"Stopsignal\", ({ enumerable: true, get: function () { return stopsignal_1.Stopsignal; } }));\nvar user_1 = __webpack_require__(/*! ./instructions/user */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/user.js\");\nObject.defineProperty(exports, \"User\", ({ enumerable: true, get: function () { return user_1.User; } }));\nvar volume_1 = __webpack_require__(/*! ./instructions/volume */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/volume.js\");\nObject.defineProperty(exports, \"Volume\", ({ enumerable: true, get: function () { return volume_1.Volume; } }));\nconst workdir_1 = __webpack_require__(/*! ./instructions/workdir */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/workdir.js\");\nObject.defineProperty(exports, \"Workdir\", ({ enumerable: true, get: function () { return workdir_1.Workdir; } }));\nvar Keyword;\n(function (Keyword) {\n    Keyword[\"ADD\"] = \"ADD\";\n    Keyword[\"ARG\"] = \"ARG\";\n    Keyword[\"CMD\"] = \"CMD\";\n    Keyword[\"COPY\"] = \"COPY\";\n    Keyword[\"ENTRYPOINT\"] = \"ENTRYPOINT\";\n    Keyword[\"ENV\"] = \"ENV\";\n    Keyword[\"EXPOSE\"] = \"EXPOSE\";\n    Keyword[\"FROM\"] = \"FROM\";\n    Keyword[\"HEALTHCHECK\"] = \"HEALTHCHECK\";\n    Keyword[\"LABEL\"] = \"LABEL\";\n    Keyword[\"MAINTAINER\"] = \"MAINTAINER\";\n    Keyword[\"ONBUILD\"] = \"ONBUILD\";\n    Keyword[\"RUN\"] = \"RUN\";\n    Keyword[\"SHELL\"] = \"SHELL\";\n    Keyword[\"STOPSIGNAL\"] = \"STOPSIGNAL\";\n    Keyword[\"USER\"] = \"USER\";\n    Keyword[\"VOLUME\"] = \"VOLUME\";\n    Keyword[\"WORKDIR\"] = \"WORKDIR\";\n})(Keyword || (exports.Keyword = Keyword = {}));\nvar Directive;\n(function (Directive) {\n    Directive[\"escape\"] = \"escape\";\n    Directive[\"syntax\"] = \"syntax\";\n})(Directive || (exports.Directive = Directive = {}));\nexports.DefaultVariables = [\n    \"ALL_PROXY\", \"all_proxy\",\n    \"FTP_PROXY\", \"ftp_proxy\",\n    \"HTTP_PROXY\", \"http_proxy\",\n    \"HTTPS_PROXY\", \"https_proxy\",\n    \"NO_PROXY\", \"no_proxy\"\n];\nvar DockerfileParser;\n(function (DockerfileParser) {\n    function parse(content) {\n        let parser = new parser_1.Parser();\n        return parser.parse(content);\n    }\n    DockerfileParser.parse = parse;\n})(DockerfileParser || (exports.DockerfileParser = DockerfileParser = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/main.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/modifiableInstruction.js":
/*!******************************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/modifiableInstruction.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ModifiableInstruction = void 0;\nconst vscode_languageserver_types_1 = __webpack_require__(/*! vscode-languageserver-types */ \"(rsc)/./node_modules/vscode-languageserver-types/lib/umd/main.js\");\nconst flag_1 = __webpack_require__(/*! ./flag */ \"(rsc)/./node_modules/dockerfile-ast/lib/flag.js\");\nconst instruction_1 = __webpack_require__(/*! ./instruction */ \"(rsc)/./node_modules/dockerfile-ast/lib/instruction.js\");\nclass ModifiableInstruction extends instruction_1.Instruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n    }\n    getFlags() {\n        if (!this.flags) {\n            this.flags = [];\n            for (let arg of this.getArguments()) {\n                let value = arg.getValue();\n                if (this.stopSearchingForFlags(value)) {\n                    return this.flags;\n                }\n                else if (value.indexOf(\"--\") === 0) {\n                    let range = arg.getRange();\n                    let rawValue = this.document.getText().substring(this.document.offsetAt(range.start), this.document.offsetAt(range.end));\n                    let nameIndex = value.indexOf('=');\n                    let index = rawValue.indexOf('=');\n                    let firstMatch = false;\n                    let secondMatch = false;\n                    let startIndex = -1;\n                    nameSearchLoop: for (let i = 0; i < rawValue.length; i++) {\n                        switch (rawValue.charAt(i)) {\n                            case '\\\\':\n                            case ' ':\n                            case '\\t':\n                            case '\\r':\n                            case '\\n':\n                                break;\n                            case '-':\n                                if (secondMatch) {\n                                    startIndex = i;\n                                    break nameSearchLoop;\n                                }\n                                else if (firstMatch) {\n                                    secondMatch = true;\n                                }\n                                else {\n                                    firstMatch = true;\n                                }\n                                break;\n                            default:\n                                startIndex = i;\n                                break nameSearchLoop;\n                        }\n                    }\n                    let nameStart = this.document.positionAt(this.document.offsetAt(range.start) + startIndex);\n                    if (index === -1) {\n                        this.flags.push(new flag_1.Flag(this.document, range, value.substring(2), vscode_languageserver_types_1.Range.create(nameStart, range.end), null, null));\n                    }\n                    else if (index === value.length - 1) {\n                        let nameEnd = this.document.positionAt(this.document.offsetAt(range.start) + index);\n                        this.flags.push(new flag_1.Flag(this.document, range, value.substring(2, index), vscode_languageserver_types_1.Range.create(nameStart, nameEnd), \"\", vscode_languageserver_types_1.Range.create(range.end, range.end)));\n                    }\n                    else {\n                        let nameEnd = this.document.positionAt(this.document.offsetAt(range.start) + index);\n                        this.flags.push(new flag_1.Flag(this.document, range, value.substring(2, nameIndex), vscode_languageserver_types_1.Range.create(nameStart, nameEnd), value.substring(nameIndex + 1), vscode_languageserver_types_1.Range.create(this.document.positionAt(this.document.offsetAt(range.start) + index + 1), range.end)));\n                    }\n                }\n            }\n        }\n        return this.flags;\n    }\n    getArguments() {\n        const args = super.getArguments();\n        const flags = this.getFlags();\n        if (flags.length === 0) {\n            return args;\n        }\n        for (let i = 0; i < flags.length; i++) {\n            args.shift();\n        }\n        return args;\n    }\n}\nexports.ModifiableInstruction = ModifiableInstruction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL21vZGlmaWFibGVJbnN0cnVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw2QkFBNkI7QUFDN0Isc0NBQXNDLG1CQUFPLENBQUMscUdBQTZCO0FBQzNFLGVBQWUsbUJBQU8sQ0FBQywrREFBUTtBQUMvQixzQkFBc0IsbUJBQU8sQ0FBQyw2RUFBZTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELHFCQUFxQjtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGtCQUFrQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdml2ZS12aWJlLWFpLW5leHQvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL21vZGlmaWFibGVJbnN0cnVjdGlvbi5qcz9hM2M5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Nb2RpZmlhYmxlSW5zdHJ1Y3Rpb24gPSB2b2lkIDA7XG5jb25zdCB2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfdHlwZXNfMSA9IHJlcXVpcmUoXCJ2c2NvZGUtbGFuZ3VhZ2VzZXJ2ZXItdHlwZXNcIik7XG5jb25zdCBmbGFnXzEgPSByZXF1aXJlKFwiLi9mbGFnXCIpO1xuY29uc3QgaW5zdHJ1Y3Rpb25fMSA9IHJlcXVpcmUoXCIuL2luc3RydWN0aW9uXCIpO1xuY2xhc3MgTW9kaWZpYWJsZUluc3RydWN0aW9uIGV4dGVuZHMgaW5zdHJ1Y3Rpb25fMS5JbnN0cnVjdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZG9jdW1lbnQsIHJhbmdlLCBkb2NrZXJmaWxlLCBlc2NhcGVDaGFyLCBpbnN0cnVjdGlvbiwgaW5zdHJ1Y3Rpb25SYW5nZSkge1xuICAgICAgICBzdXBlcihkb2N1bWVudCwgcmFuZ2UsIGRvY2tlcmZpbGUsIGVzY2FwZUNoYXIsIGluc3RydWN0aW9uLCBpbnN0cnVjdGlvblJhbmdlKTtcbiAgICB9XG4gICAgZ2V0RmxhZ3MoKSB7XG4gICAgICAgIGlmICghdGhpcy5mbGFncykge1xuICAgICAgICAgICAgdGhpcy5mbGFncyA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgYXJnIG9mIHRoaXMuZ2V0QXJndW1lbnRzKCkpIHtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBhcmcuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdG9wU2VhcmNoaW5nRm9yRmxhZ3ModmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZsYWdzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2YWx1ZS5pbmRleE9mKFwiLS1cIikgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJhbmdlID0gYXJnLmdldFJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCByYXdWYWx1ZSA9IHRoaXMuZG9jdW1lbnQuZ2V0VGV4dCgpLnN1YnN0cmluZyh0aGlzLmRvY3VtZW50Lm9mZnNldEF0KHJhbmdlLnN0YXJ0KSwgdGhpcy5kb2N1bWVudC5vZmZzZXRBdChyYW5nZS5lbmQpKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5hbWVJbmRleCA9IHZhbHVlLmluZGV4T2YoJz0nKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gcmF3VmFsdWUuaW5kZXhPZignPScpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZmlyc3RNYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc2Vjb25kTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXJ0SW5kZXggPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgbmFtZVNlYXJjaExvb3A6IGZvciAobGV0IGkgPSAwOyBpIDwgcmF3VmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAocmF3VmFsdWUuY2hhckF0KGkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnXFxcXCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnICc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnXFx0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdcXHInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1xcbic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJy0nOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2Vjb25kTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0SW5kZXggPSBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsgbmFtZVNlYXJjaExvb3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZmlyc3RNYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RNYXRjaCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRJbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIG5hbWVTZWFyY2hMb29wO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxldCBuYW1lU3RhcnQgPSB0aGlzLmRvY3VtZW50LnBvc2l0aW9uQXQodGhpcy5kb2N1bWVudC5vZmZzZXRBdChyYW5nZS5zdGFydCkgKyBzdGFydEluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mbGFncy5wdXNoKG5ldyBmbGFnXzEuRmxhZyh0aGlzLmRvY3VtZW50LCByYW5nZSwgdmFsdWUuc3Vic3RyaW5nKDIpLCB2c2NvZGVfbGFuZ3VhZ2VzZXJ2ZXJfdHlwZXNfMS5SYW5nZS5jcmVhdGUobmFtZVN0YXJ0LCByYW5nZS5lbmQpLCBudWxsLCBudWxsKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaW5kZXggPT09IHZhbHVlLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuYW1lRW5kID0gdGhpcy5kb2N1bWVudC5wb3NpdGlvbkF0KHRoaXMuZG9jdW1lbnQub2Zmc2V0QXQocmFuZ2Uuc3RhcnQpICsgaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mbGFncy5wdXNoKG5ldyBmbGFnXzEuRmxhZyh0aGlzLmRvY3VtZW50LCByYW5nZSwgdmFsdWUuc3Vic3RyaW5nKDIsIGluZGV4KSwgdnNjb2RlX2xhbmd1YWdlc2VydmVyX3R5cGVzXzEuUmFuZ2UuY3JlYXRlKG5hbWVTdGFydCwgbmFtZUVuZCksIFwiXCIsIHZzY29kZV9sYW5ndWFnZXNlcnZlcl90eXBlc18xLlJhbmdlLmNyZWF0ZShyYW5nZS5lbmQsIHJhbmdlLmVuZCkpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuYW1lRW5kID0gdGhpcy5kb2N1bWVudC5wb3NpdGlvbkF0KHRoaXMuZG9jdW1lbnQub2Zmc2V0QXQocmFuZ2Uuc3RhcnQpICsgaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mbGFncy5wdXNoKG5ldyBmbGFnXzEuRmxhZyh0aGlzLmRvY3VtZW50LCByYW5nZSwgdmFsdWUuc3Vic3RyaW5nKDIsIG5hbWVJbmRleCksIHZzY29kZV9sYW5ndWFnZXNlcnZlcl90eXBlc18xLlJhbmdlLmNyZWF0ZShuYW1lU3RhcnQsIG5hbWVFbmQpLCB2YWx1ZS5zdWJzdHJpbmcobmFtZUluZGV4ICsgMSksIHZzY29kZV9sYW5ndWFnZXNlcnZlcl90eXBlc18xLlJhbmdlLmNyZWF0ZSh0aGlzLmRvY3VtZW50LnBvc2l0aW9uQXQodGhpcy5kb2N1bWVudC5vZmZzZXRBdChyYW5nZS5zdGFydCkgKyBpbmRleCArIDEpLCByYW5nZS5lbmQpKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZmxhZ3M7XG4gICAgfVxuICAgIGdldEFyZ3VtZW50cygpIHtcbiAgICAgICAgY29uc3QgYXJncyA9IHN1cGVyLmdldEFyZ3VtZW50cygpO1xuICAgICAgICBjb25zdCBmbGFncyA9IHRoaXMuZ2V0RmxhZ3MoKTtcbiAgICAgICAgaWYgKGZsYWdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3M7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmbGFncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJncy5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcmdzO1xuICAgIH1cbn1cbmV4cG9ydHMuTW9kaWZpYWJsZUluc3RydWN0aW9uID0gTW9kaWZpYWJsZUluc3RydWN0aW9uO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/modifiableInstruction.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/parser.js":
/*!***************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/parser.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* --------------------------------------------------------------------------------------------\n * Copyright (c) Remy Suen. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Parser = void 0;\nconst vscode_languageserver_textdocument_1 = __webpack_require__(/*! vscode-languageserver-textdocument */ \"(rsc)/./node_modules/vscode-languageserver-textdocument/lib/esm/main.js\");\nconst vscode_languageserver_types_1 = __webpack_require__(/*! vscode-languageserver-types */ \"(rsc)/./node_modules/vscode-languageserver-types/lib/umd/main.js\");\nconst comment_1 = __webpack_require__(/*! ./comment */ \"(rsc)/./node_modules/dockerfile-ast/lib/comment.js\");\nconst parserDirective_1 = __webpack_require__(/*! ./parserDirective */ \"(rsc)/./node_modules/dockerfile-ast/lib/parserDirective.js\");\nconst instruction_1 = __webpack_require__(/*! ./instruction */ \"(rsc)/./node_modules/dockerfile-ast/lib/instruction.js\");\nconst add_1 = __webpack_require__(/*! ./instructions/add */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/add.js\");\nconst arg_1 = __webpack_require__(/*! ./instructions/arg */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/arg.js\");\nconst cmd_1 = __webpack_require__(/*! ./instructions/cmd */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/cmd.js\");\nconst copy_1 = __webpack_require__(/*! ./instructions/copy */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/copy.js\");\nconst env_1 = __webpack_require__(/*! ./instructions/env */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/env.js\");\nconst entrypoint_1 = __webpack_require__(/*! ./instructions/entrypoint */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/entrypoint.js\");\nconst from_1 = __webpack_require__(/*! ./instructions/from */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/from.js\");\nconst healthcheck_1 = __webpack_require__(/*! ./instructions/healthcheck */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/healthcheck.js\");\nconst label_1 = __webpack_require__(/*! ./instructions/label */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/label.js\");\nconst onbuild_1 = __webpack_require__(/*! ./instructions/onbuild */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/onbuild.js\");\nconst run_1 = __webpack_require__(/*! ./instructions/run */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/run.js\");\nconst shell_1 = __webpack_require__(/*! ./instructions/shell */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/shell.js\");\nconst stopsignal_1 = __webpack_require__(/*! ./instructions/stopsignal */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/stopsignal.js\");\nconst workdir_1 = __webpack_require__(/*! ./instructions/workdir */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/workdir.js\");\nconst user_1 = __webpack_require__(/*! ./instructions/user */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/user.js\");\nconst volume_1 = __webpack_require__(/*! ./instructions/volume */ \"(rsc)/./node_modules/dockerfile-ast/lib/instructions/volume.js\");\nconst dockerfile_1 = __webpack_require__(/*! ./dockerfile */ \"(rsc)/./node_modules/dockerfile-ast/lib/dockerfile.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/dockerfile-ast/lib/util.js\");\nconst main_1 = __webpack_require__(/*! ./main */ \"(rsc)/./node_modules/dockerfile-ast/lib/main.js\");\nclass Parser {\n    constructor() {\n        this.escapeChar = null;\n    }\n    static createInstruction(document, dockerfile, escapeChar, lineRange, instruction, instructionRange) {\n        switch (instruction.toUpperCase()) {\n            case \"ADD\":\n                return new add_1.Add(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"ARG\":\n                return new arg_1.Arg(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"CMD\":\n                return new cmd_1.Cmd(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"COPY\":\n                return new copy_1.Copy(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"ENTRYPOINT\":\n                return new entrypoint_1.Entrypoint(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"ENV\":\n                return new env_1.Env(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"FROM\":\n                return new from_1.From(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"HEALTHCHECK\":\n                return new healthcheck_1.Healthcheck(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"LABEL\":\n                return new label_1.Label(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"ONBUILD\":\n                return new onbuild_1.Onbuild(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"RUN\":\n                return new run_1.Run(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"SHELL\":\n                return new shell_1.Shell(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"STOPSIGNAL\":\n                return new stopsignal_1.Stopsignal(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"WORKDIR\":\n                return new workdir_1.Workdir(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"USER\":\n                return new user_1.User(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n            case \"VOLUME\":\n                return new volume_1.Volume(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n        }\n        return new instruction_1.Instruction(document, lineRange, dockerfile, escapeChar, instruction, instructionRange);\n    }\n    getParserDirectives(document, buffer) {\n        // reset the escape directive in between runs\n        const directives = [];\n        this.escapeChar = '';\n        const offset = util_1.Util.isUTF8BOM(buffer.substring(0, 1)) ? 1 : 0;\n        directiveCheck: for (let i = offset; i < buffer.length; i++) {\n            switch (buffer.charAt(i)) {\n                case ' ':\n                case '\\t':\n                    break;\n                case '\\r':\n                case '\\n':\n                    // blank lines stop the parsing of directives immediately\n                    break directiveCheck;\n                case '#':\n                    let directiveStart = -1;\n                    let directiveEnd = -1;\n                    for (let j = i + 1; j < buffer.length; j++) {\n                        let char = buffer.charAt(j);\n                        switch (char) {\n                            case ' ':\n                            case '\\t':\n                                if (directiveStart !== -1 && directiveEnd === -1) {\n                                    directiveEnd = j;\n                                }\n                                break;\n                            case '\\r':\n                            case '\\n':\n                                break directiveCheck;\n                            case '=':\n                                let valueStart = -1;\n                                let valueEnd = -1;\n                                if (directiveEnd === -1) {\n                                    directiveEnd = j;\n                                }\n                                // assume the line ends with the file\n                                let lineEnd = buffer.length;\n                                directiveValue: for (let k = j + 1; k < buffer.length; k++) {\n                                    char = buffer.charAt(k);\n                                    switch (char) {\n                                        case '\\r':\n                                        case '\\n':\n                                            if (valueStart !== -1 && valueEnd === -1) {\n                                                valueEnd = k;\n                                            }\n                                            // line break found, reset\n                                            lineEnd = k;\n                                            break directiveValue;\n                                        case '\\t':\n                                        case ' ':\n                                            if (valueStart !== -1 && valueEnd === -1) {\n                                                valueEnd = k;\n                                            }\n                                            continue;\n                                        default:\n                                            if (valueStart === -1) {\n                                                valueStart = k;\n                                            }\n                                            break;\n                                    }\n                                }\n                                if (directiveStart === -1) {\n                                    // no directive, it's a regular comment\n                                    break directiveCheck;\n                                }\n                                if (valueStart === -1) {\n                                    // no non-whitespace characters found, highlight all the characters then\n                                    valueStart = j + 1;\n                                    valueEnd = lineEnd;\n                                }\n                                else if (valueEnd === -1) {\n                                    // reached EOF\n                                    valueEnd = buffer.length;\n                                }\n                                const lineRange = vscode_languageserver_types_1.Range.create(document.positionAt(i), document.positionAt(lineEnd));\n                                const nameRange = vscode_languageserver_types_1.Range.create(document.positionAt(directiveStart), document.positionAt(directiveEnd));\n                                const valueRange = vscode_languageserver_types_1.Range.create(document.positionAt(valueStart), document.positionAt(valueEnd));\n                                directives.push(new parserDirective_1.ParserDirective(document, lineRange, nameRange, valueRange));\n                                directiveStart = -1;\n                                if (buffer.charAt(valueEnd) === '\\r') {\n                                    // skip over the \\r\n                                    i = valueEnd + 1;\n                                }\n                                else {\n                                    i = valueEnd;\n                                }\n                                continue directiveCheck;\n                            default:\n                                if (directiveStart === -1) {\n                                    directiveStart = j;\n                                }\n                                break;\n                        }\n                    }\n                    break;\n                default:\n                    break directiveCheck;\n            }\n        }\n        return directives;\n    }\n    parse(buffer) {\n        this.document = vscode_languageserver_textdocument_1.TextDocument.create(\"\", \"\", 0, buffer);\n        this.buffer = buffer;\n        let dockerfile = new dockerfile_1.Dockerfile(this.document);\n        let directives = this.getParserDirectives(this.document, this.buffer);\n        let offset = 0;\n        this.escapeChar = '\\\\';\n        if (directives.length > 0) {\n            dockerfile.setDirectives(directives);\n            this.escapeChar = dockerfile.getEscapeCharacter();\n            // start parsing after the directives\n            offset = this.document.offsetAt(vscode_languageserver_types_1.Position.create(directives.length, 0));\n        }\n        else if (util_1.Util.isUTF8BOM(buffer.substring(0, 1))) {\n            offset = 1;\n        }\n        for (let i = offset; i < this.buffer.length; i++) {\n            const char = this.buffer.charAt(i);\n            switch (char) {\n                case ' ':\n                case '\\t':\n                case '\\r':\n                case '\\n':\n                    break;\n                case '#':\n                    i = this.processComment(dockerfile, i);\n                    break;\n                default:\n                    i = this.processInstruction(dockerfile, char, i);\n                    break;\n            }\n        }\n        dockerfile.organizeComments();\n        return dockerfile;\n    }\n    processInstruction(dockerfile, char, start) {\n        let instruction = char;\n        let instructionEnd = -1;\n        let escapedInstruction = false;\n        instructionCheck: for (let i = start + 1; i < this.buffer.length; i++) {\n            char = this.buffer.charAt(i);\n            switch (char) {\n                case this.escapeChar:\n                    escapedInstruction = true;\n                    char = this.buffer.charAt(i + 1);\n                    if (char === '\\r' || char === '\\n') {\n                        if (instructionEnd === -1) {\n                            instructionEnd = i;\n                        }\n                        i++;\n                    }\n                    else if (char === ' ' || char === '\\t') {\n                        for (let j = i + 2; j < this.buffer.length; j++) {\n                            switch (this.buffer.charAt(j)) {\n                                case ' ':\n                                case '\\t':\n                                    break;\n                                case '\\r':\n                                case '\\n':\n                                    i = j;\n                                    continue instructionCheck;\n                                default:\n                                    // found an argument, mark end of instruction\n                                    instructionEnd = i + 1;\n                                    instruction = instruction + this.escapeChar;\n                                    i = j - 2;\n                                    continue instructionCheck;\n                            }\n                        }\n                        // reached EOF\n                        instructionEnd = i + 1;\n                        instruction = instruction + this.escapeChar;\n                        break instructionCheck;\n                    }\n                    else {\n                        instructionEnd = i + 1;\n                        instruction = instruction + this.escapeChar;\n                        // reset and consider it as one contiguous word\n                        escapedInstruction = false;\n                    }\n                    break;\n                case ' ':\n                case '\\t':\n                    if (escapedInstruction) {\n                        // on an escaped newline, need to search for non-whitespace\n                        escapeCheck: for (let j = i + 1; j < this.buffer.length; j++) {\n                            switch (this.buffer.charAt(j)) {\n                                case ' ':\n                                case '\\t':\n                                    break;\n                                case '\\r':\n                                case '\\n':\n                                    i = j;\n                                    continue instructionCheck;\n                                default:\n                                    break escapeCheck;\n                            }\n                        }\n                        escapedInstruction = false;\n                    }\n                    if (instructionEnd === -1) {\n                        instructionEnd = i;\n                    }\n                    i = this.processArguments(dockerfile, instruction, instructionEnd, start, i);\n                    dockerfile.addInstruction(this.createInstruction(dockerfile, instruction, start, instructionEnd, i));\n                    return i;\n                case '\\r':\n                case '\\n':\n                    if (escapedInstruction) {\n                        continue;\n                    }\n                    if (instructionEnd === -1) {\n                        instructionEnd = i;\n                    }\n                    dockerfile.addInstruction(this.createInstruction(dockerfile, instruction, start, i, i));\n                    return i;\n                case '#':\n                    if (escapedInstruction) {\n                        continue;\n                    }\n                default:\n                    instructionEnd = i + 1;\n                    instruction = instruction + char;\n                    escapedInstruction = false;\n                    break;\n            }\n        }\n        // reached EOF\n        if (instructionEnd === -1) {\n            instructionEnd = this.buffer.length;\n        }\n        dockerfile.addInstruction(this.createInstruction(dockerfile, instruction, start, instructionEnd, this.buffer.length));\n        return this.buffer.length;\n    }\n    processHeredocs(instruction, offset) {\n        let keyword = instruction.getKeyword();\n        if (keyword === main_1.Keyword.ONBUILD) {\n            instruction = instruction.getTriggerInstruction();\n            if (instruction === null) {\n                return offset;\n            }\n            keyword = instruction.getKeyword();\n        }\n        if (keyword !== main_1.Keyword.ADD && keyword !== main_1.Keyword.COPY && keyword !== main_1.Keyword.RUN) {\n            return offset;\n        }\n        const heredocs = [];\n        let tabbed = false;\n        for (const arg of instruction.getArguments()) {\n            const value = arg.getValue();\n            if (value.startsWith(\"<<\") && value.length > 2) {\n                if (value.startsWith(\"<<-\")) {\n                    tabbed = true;\n                }\n                const name = util_1.Util.parseHeredocName(value);\n                if (name !== null) {\n                    heredocs.push(name);\n                }\n            }\n        }\n        if (heredocs.length > 0) {\n            for (const heredoc of heredocs) {\n                offset = this.parseHeredoc(heredoc, offset, tabbed);\n            }\n        }\n        return offset;\n    }\n    processArguments(dockerfile, instruction, instructionEnd, start, offset) {\n        let escaped = false;\n        argumentsCheck: for (let i = offset + 1; i < this.buffer.length; i++) {\n            switch (this.buffer.charAt(i)) {\n                case '\\r':\n                case '\\n':\n                    if (escaped) {\n                        continue;\n                    }\n                    return this.processHeredocs(this.createInstruction(dockerfile, instruction, start, instructionEnd, i), i);\n                case this.escapeChar:\n                    const next = this.buffer.charAt(i + 1);\n                    if (next === '\\n' || next === '\\r') {\n                        escaped = true;\n                        i++;\n                    }\n                    else if (next === ' ' || next === '\\t') {\n                        for (let j = i + 2; j < this.buffer.length; j++) {\n                            switch (this.buffer.charAt(j)) {\n                                case ' ':\n                                case '\\t':\n                                    break;\n                                case '\\r':\n                                case '\\n':\n                                    escaped = true;\n                                default:\n                                    i = j;\n                                    continue argumentsCheck;\n                            }\n                        }\n                        // reached EOF\n                        return this.buffer.length;\n                    }\n                    continue;\n                case '#':\n                    if (escaped) {\n                        i = this.processComment(dockerfile, i);\n                        continue argumentsCheck;\n                    }\n                    break;\n                case ' ':\n                case '\\t':\n                    break;\n                default:\n                    if (escaped) {\n                        escaped = false;\n                    }\n                    break;\n            }\n        }\n        return this.buffer.length;\n    }\n    processComment(dockerfile, start) {\n        let end = this.buffer.length;\n        commentLoop: for (let i = start + 1; i < this.buffer.length; i++) {\n            switch (this.buffer.charAt(i)) {\n                case '\\r':\n                case '\\n':\n                    end = i;\n                    break commentLoop;\n            }\n        }\n        const range = vscode_languageserver_types_1.Range.create(this.document.positionAt(start), this.document.positionAt(end));\n        dockerfile.addComment(new comment_1.Comment(this.document, range));\n        return end;\n    }\n    parseHeredoc(heredocName, offset, tabbed) {\n        let startWord = -1;\n        let lineStart = true;\n        for (let i = offset; i < this.buffer.length; i++) {\n            switch (this.buffer.charAt(i)) {\n                case ' ':\n                    lineStart = false;\n                    break;\n                case '\\t':\n                    if (!tabbed) {\n                        lineStart = false;\n                    }\n                    break;\n                case '\\r':\n                case '\\n':\n                    if (startWord !== -1 && heredocName === this.buffer.substring(startWord, i)) {\n                        return i;\n                    }\n                    startWord = -1;\n                    lineStart = true;\n                    break;\n                default:\n                    if (lineStart) {\n                        startWord = i;\n                        lineStart = false;\n                    }\n                    break;\n            }\n        }\n        return this.buffer.length;\n    }\n    createInstruction(dockerfile, instruction, start, instructionEnd, end) {\n        const startPosition = this.document.positionAt(start);\n        const instructionRange = vscode_languageserver_types_1.Range.create(startPosition, this.document.positionAt(instructionEnd));\n        const lineRange = vscode_languageserver_types_1.Range.create(startPosition, this.document.positionAt(end));\n        return Parser.createInstruction(this.document, dockerfile, this.escapeChar, lineRange, instruction, instructionRange);\n    }\n}\nexports.Parser = Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/parserDirective.js":
/*!************************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/parserDirective.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ParserDirective = void 0;\nconst main_1 = __webpack_require__(/*! ./main */ \"(rsc)/./node_modules/dockerfile-ast/lib/main.js\");\nconst line_1 = __webpack_require__(/*! ./line */ \"(rsc)/./node_modules/dockerfile-ast/lib/line.js\");\nclass ParserDirective extends line_1.Line {\n    constructor(document, range, nameRange, valueRange) {\n        super(document, range);\n        this.nameRange = nameRange;\n        this.valueRange = valueRange;\n    }\n    toString() {\n        return \"# \" + this.getName() + '=' + this.getValue();\n    }\n    getNameRange() {\n        return this.nameRange;\n    }\n    getValueRange() {\n        return this.valueRange;\n    }\n    getName() {\n        return this.document.getText().substring(this.document.offsetAt(this.nameRange.start), this.document.offsetAt(this.nameRange.end));\n    }\n    getValue() {\n        return this.document.getText().substring(this.document.offsetAt(this.valueRange.start), this.document.offsetAt(this.valueRange.end));\n    }\n    getDirective() {\n        const directive = main_1.Directive[this.getName().toLowerCase()];\n        return directive === undefined ? null : directive;\n    }\n}\nexports.ParserDirective = ParserDirective;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL3BhcnNlckRpcmVjdGl2ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUI7QUFDdkIsZUFBZSxtQkFBTyxDQUFDLCtEQUFRO0FBQy9CLGVBQWUsbUJBQU8sQ0FBQywrREFBUTtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdml2ZS12aWJlLWFpLW5leHQvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL3BhcnNlckRpcmVjdGl2ZS5qcz9kMWIzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QYXJzZXJEaXJlY3RpdmUgPSB2b2lkIDA7XG5jb25zdCBtYWluXzEgPSByZXF1aXJlKFwiLi9tYWluXCIpO1xuY29uc3QgbGluZV8xID0gcmVxdWlyZShcIi4vbGluZVwiKTtcbmNsYXNzIFBhcnNlckRpcmVjdGl2ZSBleHRlbmRzIGxpbmVfMS5MaW5lIHtcbiAgICBjb25zdHJ1Y3Rvcihkb2N1bWVudCwgcmFuZ2UsIG5hbWVSYW5nZSwgdmFsdWVSYW5nZSkge1xuICAgICAgICBzdXBlcihkb2N1bWVudCwgcmFuZ2UpO1xuICAgICAgICB0aGlzLm5hbWVSYW5nZSA9IG5hbWVSYW5nZTtcbiAgICAgICAgdGhpcy52YWx1ZVJhbmdlID0gdmFsdWVSYW5nZTtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBcIiMgXCIgKyB0aGlzLmdldE5hbWUoKSArICc9JyArIHRoaXMuZ2V0VmFsdWUoKTtcbiAgICB9XG4gICAgZ2V0TmFtZVJhbmdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lUmFuZ2U7XG4gICAgfVxuICAgIGdldFZhbHVlUmFuZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlUmFuZ2U7XG4gICAgfVxuICAgIGdldE5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50LmdldFRleHQoKS5zdWJzdHJpbmcodGhpcy5kb2N1bWVudC5vZmZzZXRBdCh0aGlzLm5hbWVSYW5nZS5zdGFydCksIHRoaXMuZG9jdW1lbnQub2Zmc2V0QXQodGhpcy5uYW1lUmFuZ2UuZW5kKSk7XG4gICAgfVxuICAgIGdldFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kb2N1bWVudC5nZXRUZXh0KCkuc3Vic3RyaW5nKHRoaXMuZG9jdW1lbnQub2Zmc2V0QXQodGhpcy52YWx1ZVJhbmdlLnN0YXJ0KSwgdGhpcy5kb2N1bWVudC5vZmZzZXRBdCh0aGlzLnZhbHVlUmFuZ2UuZW5kKSk7XG4gICAgfVxuICAgIGdldERpcmVjdGl2ZSgpIHtcbiAgICAgICAgY29uc3QgZGlyZWN0aXZlID0gbWFpbl8xLkRpcmVjdGl2ZVt0aGlzLmdldE5hbWUoKS50b0xvd2VyQ2FzZSgpXTtcbiAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGRpcmVjdGl2ZTtcbiAgICB9XG59XG5leHBvcnRzLlBhcnNlckRpcmVjdGl2ZSA9IFBhcnNlckRpcmVjdGl2ZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/parserDirective.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/property.js":
/*!*****************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/property.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Property = void 0;\nconst vscode_languageserver_types_1 = __webpack_require__(/*! vscode-languageserver-types */ \"(rsc)/./node_modules/vscode-languageserver-types/lib/umd/main.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/dockerfile-ast/lib/util.js\");\nclass Property {\n    constructor(document, escapeChar, arg, arg2) {\n        this.assignmentOperatorRange = null;\n        this.assignmentOperator = null;\n        this.valueRange = null;\n        this.value = null;\n        this.document = document;\n        this.escapeChar = escapeChar;\n        this.nameRange = Property.getNameRange(document, arg);\n        let value = document.getText().substring(document.offsetAt(this.nameRange.start), document.offsetAt(this.nameRange.end));\n        this.name = Property.getValue(value, escapeChar);\n        if (arg2) {\n            this.valueRange = arg2.getRange();\n            value = document.getText().substring(document.offsetAt(this.valueRange.start), document.offsetAt(this.valueRange.end));\n            this.value = Property.getValue(value, escapeChar);\n            this.range = vscode_languageserver_types_1.Range.create(this.nameRange.start, this.valueRange.end);\n        }\n        else {\n            let argRange = arg.getRange();\n            if (this.nameRange.start.line === argRange.start.line\n                && this.nameRange.start.character === argRange.start.character\n                && this.nameRange.end.line === argRange.end.line\n                && this.nameRange.end.character === argRange.end.character) {\n            }\n            else {\n                this.valueRange = Property.getValueRange(document, arg);\n                value = document.getText().substring(document.offsetAt(this.valueRange.start), document.offsetAt(this.valueRange.end));\n                this.value = Property.getValue(value, escapeChar);\n                this.assignmentOperatorRange = vscode_languageserver_types_1.Range.create(this.nameRange.end, this.valueRange.start);\n                this.assignmentOperator = \"=\";\n            }\n            this.range = argRange;\n        }\n    }\n    getRange() {\n        return this.range;\n    }\n    getName() {\n        return this.name;\n    }\n    getNameRange() {\n        return this.nameRange;\n    }\n    getValue() {\n        return this.value;\n    }\n    getValueRange() {\n        return this.valueRange;\n    }\n    /**\n     * Retrieves the operator used for delimiting between the name and\n     * value of this property. This will either be the \"=\" character\n     * or null if a character was not used or if this property has no\n     * value defined.\n     */\n    getAssignmentOperator() {\n        return this.assignmentOperator;\n    }\n    getAssignmentOperatorRange() {\n        return this.assignmentOperatorRange;\n    }\n    /**\n     * Returns the value of this property including any enclosing\n     * single or double quotes and relevant escape characters.\n     * Escaped newlines and its associated contiguous whitespace\n     * characters however will not be returned as they are deemed to\n     * be uninteresting to clients trying to return a Dockerfile.\n     *\n     * @return the unescaped value of this property or null if this\n     *         property has no associated value\n     */\n    getUnescapedValue() {\n        if (this.valueRange === null) {\n            return null;\n        }\n        let escaped = false;\n        let rawValue = \"\";\n        let value = this.document.getText().substring(this.document.offsetAt(this.valueRange.start), this.document.offsetAt(this.valueRange.end));\n        rawLoop: for (let i = 0; i < value.length; i++) {\n            let char = value.charAt(i);\n            switch (char) {\n                case this.escapeChar:\n                    for (let j = i + 1; j < value.length; j++) {\n                        switch (value.charAt(j)) {\n                            case '\\r':\n                                j++;\n                            case '\\n':\n                                escaped = true;\n                                i = j;\n                                continue rawLoop;\n                            case ' ':\n                            case '\\t':\n                                break;\n                            default:\n                                rawValue = rawValue + char;\n                                continue rawLoop;\n                        }\n                    }\n                    // this happens if there's only whitespace after the escape character\n                    rawValue = rawValue + char;\n                    break;\n                case '\\r':\n                case '\\n':\n                    break;\n                case ' ':\n                case '\\t':\n                    if (!escaped) {\n                        rawValue = rawValue + char;\n                    }\n                    break;\n                case '#':\n                    if (escaped) {\n                        for (let j = i + 1; j < value.length; j++) {\n                            switch (value.charAt(j)) {\n                                case '\\r':\n                                    j++;\n                                case '\\n':\n                                    i = j;\n                                    continue rawLoop;\n                            }\n                        }\n                    }\n                    else {\n                        rawValue = rawValue + char;\n                    }\n                    break;\n                default:\n                    rawValue = rawValue + char;\n                    escaped = false;\n                    break;\n            }\n        }\n        return rawValue;\n    }\n    static getNameRange(document, arg) {\n        let value = arg.getValue();\n        let index = value.indexOf('=');\n        if (index !== -1) {\n            let initial = value.charAt(0);\n            let before = value.charAt(index - 1);\n            // check if content before the equals sign are in quotes\n            // \"var\"=value\n            // 'var'=value\n            // otherwise, just assume it's a standard definition\n            // var=value\n            if ((initial === '\"' && before === '\"') || (initial === '\\'' && before === '\\'') || (initial !== '\"' && initial !== '\\'')) {\n                return vscode_languageserver_types_1.Range.create(arg.getRange().start, document.positionAt(document.offsetAt(arg.getRange().start) + index));\n            }\n        }\n        // no '=' found, just defined the property's name\n        return arg.getRange();\n    }\n    static getValueRange(document, arg) {\n        return vscode_languageserver_types_1.Range.create(document.positionAt(document.offsetAt(arg.getRange().start) + arg.getValue().indexOf('=') + 1), document.positionAt(document.offsetAt(arg.getRange().end)));\n    }\n    /**\n     * Returns the actual value of this key-value pair. The value will\n     * have its escape characters removed if applicable. If the value\n     * spans multiple lines and there are comments nested within the\n     * lines, they too will be removed.\n     *\n     * @return the value that this key-value pair will actually be, may\n     *         be null if no value is defined, may be the empty string\n     *         if the value only consists of whitespace\n     */\n    static getValue(value, escapeChar) {\n        let escaped = false;\n        const skip = util_1.Util.findLeadingNonWhitespace(value, escapeChar);\n        if (skip !== 0 && value.charAt(skip) === '#') {\n            // need to skip over comments\n            escaped = true;\n        }\n        value = value.substring(skip);\n        let first = value.charAt(0);\n        let last = value.charAt(value.length - 1);\n        let literal = first === '\\'' || first === '\"';\n        let inSingle = (first === '\\'' && last === '\\'');\n        let inDouble = false;\n        if (first === '\"') {\n            for (let i = 1; i < value.length; i++) {\n                if (value.charAt(i) === escapeChar) {\n                    i++;\n                }\n                else if (value.charAt(i) === '\"' && i === value.length - 1) {\n                    inDouble = true;\n                }\n            }\n        }\n        if (inSingle || inDouble) {\n            value = value.substring(1, value.length - 1);\n        }\n        let commentCheck = -1;\n        let escapedValue = \"\";\n        let start = 0;\n        parseValue: for (let i = 0; i < value.length; i++) {\n            let char = value.charAt(i);\n            switch (char) {\n                case escapeChar:\n                    if (i + 1 === value.length) {\n                        escapedValue = escapedValue + escapeChar;\n                        break parseValue;\n                    }\n                    char = value.charAt(i + 1);\n                    if (char === ' ' || char === '\\t') {\n                        whitespaceCheck: for (let j = i + 2; j < value.length; j++) {\n                            let char2 = value.charAt(j);\n                            switch (char2) {\n                                case ' ':\n                                case '\\t':\n                                    break;\n                                case '\\r':\n                                    j++;\n                                case '\\n':\n                                    escaped = true;\n                                    i = j;\n                                    continue parseValue;\n                                default:\n                                    if (!inDouble && !inSingle && !literal) {\n                                        if (char2 === escapeChar) {\n                                            // add the escaped character\n                                            escapedValue = escapedValue + char;\n                                            // now start parsing from the next escape character\n                                            i = i + 1;\n                                        }\n                                        else {\n                                            // the expectation is that this j = i + 2 here\n                                            escapedValue = escapedValue + char + char2;\n                                            i = j;\n                                        }\n                                        continue parseValue;\n                                    }\n                                    break whitespaceCheck;\n                            }\n                        }\n                    }\n                    if (inDouble) {\n                        if (char === '\\r') {\n                            escaped = true;\n                            i = i + 2;\n                        }\n                        else if (char === '\\n') {\n                            escaped = true;\n                            i++;\n                        }\n                        else if (char !== '\"') {\n                            if (char === escapeChar) {\n                                i++;\n                            }\n                            escapedValue = escapedValue + escapeChar;\n                        }\n                        continue parseValue;\n                    }\n                    else if (inSingle || literal) {\n                        if (char === '\\r') {\n                            escaped = true;\n                            i = i + 2;\n                        }\n                        else if (char === '\\n') {\n                            escaped = true;\n                            i++;\n                        }\n                        else {\n                            escapedValue = escapedValue + escapeChar;\n                        }\n                        continue parseValue;\n                    }\n                    else if (char === escapeChar) {\n                        // double escape, append one and move on\n                        escapedValue = escapedValue + escapeChar;\n                        i++;\n                    }\n                    else if (char === '\\r') {\n                        escaped = true;\n                        // offset one more for \\r\\n\n                        i = i + 2;\n                    }\n                    else if (char === '\\n') {\n                        escaped = true;\n                        i++;\n                        start = i;\n                    }\n                    else {\n                        // any other escapes are simply ignored\n                        escapedValue = escapedValue + char;\n                        i++;\n                    }\n                    break;\n                case ' ':\n                case '\\t':\n                    if (escaped && commentCheck === -1) {\n                        commentCheck = i;\n                    }\n                    escapedValue = escapedValue + char;\n                    break;\n                case '\\r':\n                    i++;\n                case '\\n':\n                    if (escaped && commentCheck !== -1) {\n                        // rollback and remove the whitespace that was previously appended\n                        escapedValue = escapedValue.substring(0, escapedValue.length - (i - commentCheck - 1));\n                        commentCheck = -1;\n                    }\n                    break;\n                case '#':\n                    // a newline was escaped and now there's a comment\n                    if (escaped) {\n                        if (commentCheck !== -1) {\n                            // rollback and remove the whitespace that was previously appended\n                            escapedValue = escapedValue.substring(0, escapedValue.length - (i - commentCheck));\n                            commentCheck = -1;\n                        }\n                        newlineCheck: for (let j = i + 1; j < value.length; j++) {\n                            switch (value.charAt(j)) {\n                                case '\\r':\n                                    j++;\n                                case '\\n':\n                                    i = j;\n                                    break newlineCheck;\n                            }\n                        }\n                        continue parseValue;\n                    }\n                default:\n                    if (escaped) {\n                        escaped = false;\n                        commentCheck = -1;\n                    }\n                    escapedValue = escapedValue + char;\n                    break;\n            }\n        }\n        return escapedValue;\n    }\n}\nexports.Property = Property;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/property.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/propertyInstruction.js":
/*!****************************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/propertyInstruction.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PropertyInstruction = void 0;\nconst vscode_languageserver_types_1 = __webpack_require__(/*! vscode-languageserver-types */ \"(rsc)/./node_modules/vscode-languageserver-types/lib/umd/main.js\");\nconst instruction_1 = __webpack_require__(/*! ./instruction */ \"(rsc)/./node_modules/dockerfile-ast/lib/instruction.js\");\nconst property_1 = __webpack_require__(/*! ./property */ \"(rsc)/./node_modules/dockerfile-ast/lib/property.js\");\nconst argument_1 = __webpack_require__(/*! ./argument */ \"(rsc)/./node_modules/dockerfile-ast/lib/argument.js\");\nconst util_1 = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/dockerfile-ast/lib/util.js\");\nclass PropertyInstruction extends instruction_1.Instruction {\n    constructor(document, range, dockerfile, escapeChar, instruction, instructionRange) {\n        super(document, range, dockerfile, escapeChar, instruction, instructionRange);\n        this.properties = undefined;\n    }\n    getProperties() {\n        if (this.properties === undefined) {\n            let args = this.getPropertyArguments();\n            if (args.length === 0) {\n                this.properties = [];\n            }\n            else if (args.length === 1) {\n                this.properties = [new property_1.Property(this.document, this.escapeChar, args[0])];\n            }\n            else if (args.length === 2) {\n                if (args[0].getValue().indexOf('=') === -1) {\n                    this.properties = [new property_1.Property(this.document, this.escapeChar, args[0], args[1])];\n                }\n                else {\n                    this.properties = [\n                        new property_1.Property(this.document, this.escapeChar, args[0]),\n                        new property_1.Property(this.document, this.escapeChar, args[1])\n                    ];\n                }\n            }\n            else if (args[0].getValue().indexOf('=') === -1) {\n                let text = this.document.getText();\n                let start = args[1].getRange().start;\n                let end = args[args.length - 1].getRange().end;\n                text = text.substring(this.document.offsetAt(start), this.document.offsetAt(end));\n                this.properties = [new property_1.Property(this.document, this.escapeChar, args[0], new argument_1.Argument(text, vscode_languageserver_types_1.Range.create(args[1].getRange().start, args[args.length - 1].getRange().end)))];\n            }\n            else {\n                this.properties = [];\n                for (let i = 0; i < args.length; i++) {\n                    this.properties.push(new property_1.Property(this.document, this.escapeChar, args[i]));\n                }\n            }\n        }\n        return this.properties;\n    }\n    /**\n     * Goes from the back of the string and returns the first\n     * non-whitespace character that is found. If an escape character\n     * is found with newline characters, the escape character will\n     * not be considered a non-whitespace character and its index in\n     * the string will not be returned.\n     *\n     * @param content the string to search through\n     * @return the index in the string for the first non-whitespace\n     *         character when searching from the end of the string\n     */\n    findTrailingNonWhitespace(content) {\n        // loop back to find the first non-whitespace character\n        let index = content.length;\n        whitespaceCheck: for (let i = content.length - 1; i >= 0; i--) {\n            switch (content.charAt(i)) {\n                case ' ':\n                case '\\t':\n                    continue;\n                case '\\n':\n                    if (content.charAt(i - 1) === '\\r') {\n                        i = i - 1;\n                    }\n                case '\\r':\n                    newlineCheck: for (let j = i - 1; j >= 0; j--) {\n                        switch (content.charAt(j)) {\n                            case ' ':\n                            case '\\t':\n                            case '\\r':\n                            case '\\n':\n                            case this.escapeChar:\n                                continue;\n                            default:\n                                index = j;\n                                break newlineCheck;\n                        }\n                    }\n                    break whitespaceCheck;\n                default:\n                    index = i;\n                    break whitespaceCheck;\n            }\n        }\n        return index;\n    }\n    getPropertyArguments() {\n        const args = [];\n        let range = this.getInstructionRange();\n        let instructionNameEndOffset = this.document.offsetAt(range.end);\n        let extra = instructionNameEndOffset - this.document.offsetAt(range.start);\n        let content = this.getTextContent();\n        let fullArgs = content.substring(extra);\n        let start = util_1.Util.findLeadingNonWhitespace(fullArgs, this.escapeChar);\n        if (start === -1) {\n            // only whitespace found, no arguments\n            return [];\n        }\n        const startPosition = this.document.positionAt(instructionNameEndOffset + start);\n        // records whether the parser has just processed an escaped newline or not,\n        // if our starting position is not on the same line as the instruction then\n        // the start of the content is already on an escaped line\n        let escaped = range.start.line !== startPosition.line;\n        // flag to track if the last character was an escape character\n        let endingEscape = false;\n        // position before the first escape character was hit\n        let mark = -1;\n        let end = this.findTrailingNonWhitespace(fullArgs);\n        content = fullArgs.substring(start, end + 1);\n        let argStart = escaped ? -1 : 0;\n        let spaced = false;\n        argumentLoop: for (let i = 0; i < content.length; i++) {\n            let char = content.charAt(i);\n            switch (char) {\n                case this.escapeChar:\n                    if (i + 1 === content.length) {\n                        endingEscape = true;\n                        break argumentLoop;\n                    }\n                    if (!escaped) {\n                        mark = i;\n                    }\n                    switch (content.charAt(i + 1)) {\n                        case ' ':\n                        case '\\t':\n                            if (!util_1.Util.isWhitespace(content.charAt(i + 2))) {\n                                // space was escaped, continue as normal\n                                i = i + 1;\n                                continue argumentLoop;\n                            }\n                            // whitespace encountered, need to figure out if it extends to EOL\n                            whitespaceCheck: for (let j = i + 2; j < content.length; j++) {\n                                switch (content.charAt(j)) {\n                                    case '\\r':\n                                        // offset one more for \\r\\n\n                                        j++;\n                                    case '\\n':\n                                        // whitespace only, safe to skip\n                                        escaped = true;\n                                        i = j;\n                                        continue argumentLoop;\n                                    case ' ':\n                                    case '\\t':\n                                        // ignore whitespace\n                                        break;\n                                    default:\n                                        // whitespace doesn't extend to EOL, create an argument\n                                        args.push(new argument_1.Argument(content.substring(argStart, i), vscode_languageserver_types_1.Range.create(this.document.positionAt(instructionNameEndOffset + start + argStart), this.document.positionAt(instructionNameEndOffset + start + i + 2))));\n                                        argStart = j;\n                                        break whitespaceCheck;\n                                }\n                            }\n                            // go back and start processing the encountered non-whitespace character\n                            i = argStart - 1;\n                            continue argumentLoop;\n                        case '\\r':\n                            // offset one more for \\r\\n\n                            i++;\n                        case '\\n':\n                            // immediately followed by a newline, skip the newline\n                            escaped = true;\n                            i = i + 1;\n                            continue argumentLoop;\n                        case this.escapeChar:\n                            // double escape found, skip it and move on\n                            if (argStart === -1) {\n                                argStart = i;\n                            }\n                            i = i + 1;\n                            continue argumentLoop;\n                        default:\n                            if (argStart === -1) {\n                                argStart = i;\n                            }\n                            // non-whitespace encountered, skip the escape and process the\n                            // character normally\n                            continue argumentLoop;\n                    }\n                case '\\'':\n                case '\"':\n                    if (spaced) {\n                        this.createSpacedArgument(argStart, args, content, mark, instructionNameEndOffset, start);\n                        // reset to start a new argument\n                        argStart = i;\n                        spaced = false;\n                    }\n                    if (argStart === -1) {\n                        argStart = i;\n                    }\n                    for (let j = i + 1; j < content.length; j++) {\n                        switch (content.charAt(j)) {\n                            case char:\n                                if (content.charAt(j + 1) !== ' ' && content.charAt(j + 1) !== '') {\n                                    // there is more content after this quote,\n                                    // continue so that it is all processed as\n                                    // one single argument\n                                    i = j;\n                                    continue argumentLoop;\n                                }\n                                args.push(new argument_1.Argument(content.substring(argStart, j + 1), vscode_languageserver_types_1.Range.create(this.document.positionAt(instructionNameEndOffset + start + argStart), this.document.positionAt(instructionNameEndOffset + start + j + 1))));\n                                i = j;\n                                argStart = -1;\n                                continue argumentLoop;\n                            case this.escapeChar:\n                                j++;\n                                break;\n                        }\n                    }\n                    break argumentLoop;\n                case ' ':\n                case '\\t':\n                    if (escaped) {\n                        // consider there to be a space only if an argument\n                        // is not spanning multiple lines\n                        if (argStart !== -1) {\n                            spaced = true;\n                        }\n                    }\n                    else if (argStart !== -1) {\n                        args.push(new argument_1.Argument(content.substring(argStart, i), vscode_languageserver_types_1.Range.create(this.document.positionAt(instructionNameEndOffset + start + argStart), this.document.positionAt(instructionNameEndOffset + start + i))));\n                        argStart = -1;\n                    }\n                    break;\n                case '\\r':\n                    // offset one more for \\r\\n\n                    i++;\n                case '\\n':\n                    spaced = false;\n                    break;\n                case '#':\n                    if (escaped) {\n                        // a newline was escaped and now there's a comment\n                        for (let j = i + 1; j < content.length; j++) {\n                            switch (content.charAt(j)) {\n                                case '\\r':\n                                    j++;\n                                case '\\n':\n                                    i = j;\n                                    spaced = false;\n                                    continue argumentLoop;\n                            }\n                        }\n                        // went to the end without finding a newline,\n                        // the comment was the last line in the instruction,\n                        // just stop parsing, create an argument if needed\n                        if (argStart !== -1) {\n                            let value = content.substring(argStart, mark);\n                            args.push(new argument_1.Argument(value, vscode_languageserver_types_1.Range.create(this.document.positionAt(instructionNameEndOffset + start + argStart), this.document.positionAt(instructionNameEndOffset + start + mark))));\n                            argStart = -1;\n                        }\n                        break argumentLoop;\n                    }\n                    else if (argStart === -1) {\n                        argStart = i;\n                    }\n                    break;\n                default:\n                    if (spaced) {\n                        this.createSpacedArgument(argStart, args, content, mark, instructionNameEndOffset, start);\n                        // reset to start a new argument\n                        argStart = i;\n                        spaced = false;\n                    }\n                    escaped = false;\n                    if (argStart === -1) {\n                        argStart = i;\n                    }\n                    // variable detected\n                    if (char === '$' && content.charAt(i + 1) === '{') {\n                        let singleQuotes = false;\n                        let doubleQuotes = false;\n                        let escaped = false;\n                        for (let j = i + 1; j < content.length; j++) {\n                            switch (content.charAt(j)) {\n                                case this.escapeChar:\n                                    escaped = true;\n                                    break;\n                                case '\\r':\n                                case '\\n':\n                                    break;\n                                case '\\'':\n                                    singleQuotes = !singleQuotes;\n                                    escaped = false;\n                                    break;\n                                case '\"':\n                                    doubleQuotes = !doubleQuotes;\n                                    escaped = false;\n                                    break;\n                                case ' ':\n                                case '\\t':\n                                    if (escaped || singleQuotes || doubleQuotes) {\n                                        break;\n                                    }\n                                    i = j - 1;\n                                    continue argumentLoop;\n                                case '}':\n                                    i = j;\n                                    continue argumentLoop;\n                                default:\n                                    escaped = false;\n                                    break;\n                            }\n                        }\n                        break argumentLoop;\n                    }\n                    break;\n            }\n        }\n        if (argStart !== -1 && argStart !== content.length) {\n            let end = endingEscape ? content.length - 1 : content.length;\n            let value = content.substring(argStart, end);\n            args.push(new argument_1.Argument(value, vscode_languageserver_types_1.Range.create(this.document.positionAt(instructionNameEndOffset + start + argStart), this.document.positionAt(instructionNameEndOffset + start + end))));\n        }\n        return args;\n    }\n    createSpacedArgument(argStart, args, content, mark, instructionNameEndOffset, start) {\n        if (argStart !== -1) {\n            args.push(new argument_1.Argument(content.substring(argStart, mark), vscode_languageserver_types_1.Range.create(this.document.positionAt(instructionNameEndOffset + start + argStart), this.document.positionAt(instructionNameEndOffset + start + mark))));\n        }\n    }\n}\nexports.PropertyInstruction = PropertyInstruction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/propertyInstruction.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/util.js":
/*!*************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/util.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/* --------------------------------------------------------------------------------------------\n * Copyright (c) Remy Suen. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Util = void 0;\nclass Util {\n    static isUTF8BOM(char) {\n        const uintArray = Uint8Array.from(Buffer.from(char, \"UTF-8\"));\n        return uintArray[0] === 0xEF && uintArray[1] == 0xBB && uintArray[2] == 0xBF;\n    }\n    static isWhitespace(char) {\n        return char === ' ' || char === '\\t' || Util.isNewline(char);\n    }\n    static isNewline(char) {\n        return char === '\\r' || char === '\\n';\n    }\n    static findLeadingNonWhitespace(content, escapeChar) {\n        whitespaceCheck: for (let i = 0; i < content.length; i++) {\n            switch (content.charAt(i)) {\n                case ' ':\n                case '\\t':\n                    continue;\n                case escapeChar:\n                    escapeCheck: for (let j = i + 1; j < content.length; j++) {\n                        switch (content.charAt(j)) {\n                            case ' ':\n                            case '\\t':\n                                continue;\n                            case '\\r':\n                                // offset one more for \\r\\n\n                                i = j + 1;\n                                continue whitespaceCheck;\n                            case '\\n':\n                                i = j;\n                                continue whitespaceCheck;\n                            default:\n                                break escapeCheck;\n                        }\n                    }\n                    // found an escape character and then reached EOF\n                    return -1;\n                default:\n                    return i;\n            }\n        }\n        // only possible if the content is the empty string\n        return -1;\n    }\n    /**\n     * Determines if the given position is contained within the given range.\n     *\n     * @param position the position to check\n     * @param range the range to see if the position is inside of\n     */\n    static isInsideRange(position, range) {\n        if (range.start.line === range.end.line) {\n            return range.start.line === position.line\n                && range.start.character <= position.character\n                && position.character <= range.end.character;\n        }\n        else if (range.start.line === position.line) {\n            return range.start.character <= position.character;\n        }\n        else if (range.end.line === position.line) {\n            return position.character <= range.end.character;\n        }\n        return range.start.line < position.line && position.line < range.end.line;\n    }\n    static parseHeredocName(value) {\n        value = value.substring(2);\n        if (value.charAt(0) === '-') {\n            value = value.substring(1);\n        }\n        if (value.charAt(0) === '\"') {\n            if (value.charAt(value.length - 1) !== '\"') {\n                return null;\n            }\n            value = value.substring(1, value.length - 1);\n        }\n        if (value.charAt(0) === '\\'') {\n            if (value.charAt(value.length - 1) !== '\\'') {\n                return null;\n            }\n            value = value.substring(1, value.length - 1);\n        }\n        if (value.charAt(0) === \"<\") {\n            return null;\n        }\n        return value;\n    }\n}\nexports.Util = Util;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL3V0aWwuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLG9CQUFvQjtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELG9CQUFvQjtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aXZlLXZpYmUtYWktbmV4dC8uL25vZGVfbW9kdWxlcy9kb2NrZXJmaWxlLWFzdC9saWIvdXRpbC5qcz9mMDU3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBDb3B5cmlnaHQgKGMpIFJlbXkgU3Vlbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbid1c2Ugc3RyaWN0Jztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVXRpbCA9IHZvaWQgMDtcbmNsYXNzIFV0aWwge1xuICAgIHN0YXRpYyBpc1VURjhCT00oY2hhcikge1xuICAgICAgICBjb25zdCB1aW50QXJyYXkgPSBVaW50OEFycmF5LmZyb20oQnVmZmVyLmZyb20oY2hhciwgXCJVVEYtOFwiKSk7XG4gICAgICAgIHJldHVybiB1aW50QXJyYXlbMF0gPT09IDB4RUYgJiYgdWludEFycmF5WzFdID09IDB4QkIgJiYgdWludEFycmF5WzJdID09IDB4QkY7XG4gICAgfVxuICAgIHN0YXRpYyBpc1doaXRlc3BhY2UoY2hhcikge1xuICAgICAgICByZXR1cm4gY2hhciA9PT0gJyAnIHx8IGNoYXIgPT09ICdcXHQnIHx8IFV0aWwuaXNOZXdsaW5lKGNoYXIpO1xuICAgIH1cbiAgICBzdGF0aWMgaXNOZXdsaW5lKGNoYXIpIHtcbiAgICAgICAgcmV0dXJuIGNoYXIgPT09ICdcXHInIHx8IGNoYXIgPT09ICdcXG4nO1xuICAgIH1cbiAgICBzdGF0aWMgZmluZExlYWRpbmdOb25XaGl0ZXNwYWNlKGNvbnRlbnQsIGVzY2FwZUNoYXIpIHtcbiAgICAgICAgd2hpdGVzcGFjZUNoZWNrOiBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRlbnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHN3aXRjaCAoY29udGVudC5jaGFyQXQoaSkpIHtcbiAgICAgICAgICAgICAgICBjYXNlICcgJzpcbiAgICAgICAgICAgICAgICBjYXNlICdcXHQnOlxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIGVzY2FwZUNoYXI6XG4gICAgICAgICAgICAgICAgICAgIGVzY2FwZUNoZWNrOiBmb3IgKGxldCBqID0gaSArIDE7IGogPCBjb250ZW50Lmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGNvbnRlbnQuY2hhckF0KGopKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnICc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnXFx0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnXFxyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb2Zmc2V0IG9uZSBtb3JlIGZvciBcXHJcXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGogKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZSB3aGl0ZXNwYWNlQ2hlY2s7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnXFxuJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGo7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIHdoaXRlc3BhY2VDaGVjaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhayBlc2NhcGVDaGVjaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBmb3VuZCBhbiBlc2NhcGUgY2hhcmFjdGVyIGFuZCB0aGVuIHJlYWNoZWQgRU9GXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBvbmx5IHBvc3NpYmxlIGlmIHRoZSBjb250ZW50IGlzIHRoZSBlbXB0eSBzdHJpbmdcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBnaXZlbiBwb3NpdGlvbiBpcyBjb250YWluZWQgd2l0aGluIHRoZSBnaXZlbiByYW5nZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwb3NpdGlvbiB0aGUgcG9zaXRpb24gdG8gY2hlY2tcbiAgICAgKiBAcGFyYW0gcmFuZ2UgdGhlIHJhbmdlIHRvIHNlZSBpZiB0aGUgcG9zaXRpb24gaXMgaW5zaWRlIG9mXG4gICAgICovXG4gICAgc3RhdGljIGlzSW5zaWRlUmFuZ2UocG9zaXRpb24sIHJhbmdlKSB7XG4gICAgICAgIGlmIChyYW5nZS5zdGFydC5saW5lID09PSByYW5nZS5lbmQubGluZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJhbmdlLnN0YXJ0LmxpbmUgPT09IHBvc2l0aW9uLmxpbmVcbiAgICAgICAgICAgICAgICAmJiByYW5nZS5zdGFydC5jaGFyYWN0ZXIgPD0gcG9zaXRpb24uY2hhcmFjdGVyXG4gICAgICAgICAgICAgICAgJiYgcG9zaXRpb24uY2hhcmFjdGVyIDw9IHJhbmdlLmVuZC5jaGFyYWN0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmFuZ2Uuc3RhcnQubGluZSA9PT0gcG9zaXRpb24ubGluZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJhbmdlLnN0YXJ0LmNoYXJhY3RlciA8PSBwb3NpdGlvbi5jaGFyYWN0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmFuZ2UuZW5kLmxpbmUgPT09IHBvc2l0aW9uLmxpbmUpIHtcbiAgICAgICAgICAgIHJldHVybiBwb3NpdGlvbi5jaGFyYWN0ZXIgPD0gcmFuZ2UuZW5kLmNoYXJhY3RlcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmFuZ2Uuc3RhcnQubGluZSA8IHBvc2l0aW9uLmxpbmUgJiYgcG9zaXRpb24ubGluZSA8IHJhbmdlLmVuZC5saW5lO1xuICAgIH1cbiAgICBzdGF0aWMgcGFyc2VIZXJlZG9jTmFtZSh2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygyKTtcbiAgICAgICAgaWYgKHZhbHVlLmNoYXJBdCgwKSA9PT0gJy0nKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUuY2hhckF0KDApID09PSAnXCInKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUuY2hhckF0KHZhbHVlLmxlbmd0aCAtIDEpICE9PSAnXCInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygxLCB2YWx1ZS5sZW5ndGggLSAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUuY2hhckF0KDApID09PSAnXFwnJykge1xuICAgICAgICAgICAgaWYgKHZhbHVlLmNoYXJBdCh2YWx1ZS5sZW5ndGggLSAxKSAhPT0gJ1xcJycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKDEsIHZhbHVlLmxlbmd0aCAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZS5jaGFyQXQoMCkgPT09IFwiPFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxufVxuZXhwb3J0cy5VdGlsID0gVXRpbDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dockerfile-ast/lib/variable.js":
/*!*****************************************************!*\
  !*** ./node_modules/dockerfile-ast/lib/variable.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Variable = void 0;\nclass Variable {\n    constructor(name, nameRange, range, modifier, modifierRange, substitutionParameter, substitutionRange, defined, buildVariable, stringValue) {\n        this.name = name;\n        this.nameRange = nameRange;\n        this.range = range;\n        this.modifier = modifier;\n        this.modifierRange = modifierRange;\n        this.substitutionParameter = substitutionParameter;\n        this.substitutionRange = substitutionRange;\n        this.defined = defined;\n        this.buildVariable = buildVariable;\n        this.stringValue = stringValue;\n    }\n    toString() {\n        return this.stringValue;\n    }\n    getName() {\n        return this.name;\n    }\n    getNameRange() {\n        return this.nameRange;\n    }\n    /**\n     * Returns the range of the entire variable. This includes the symbols for\n     * the declaration of the variable such as the $, {, and } symbols.\n     *\n     * @return the range in the document that this variable encompasses in its\n     *         entirety\n     */\n    getRange() {\n        return this.range;\n    }\n    /**\n     * Returns the modifier character that has been set for\n     * specifying how this variable should be expanded and resolved.\n     * If this variable is ${variable:+value} then the modifier\n     * character is '+'. Will be the empty string if the variable is\n     * declared as ${variable:}. Otherwise, will be null if this\n     * variable will not use variable substitution at all (such as\n     * ${variable} or $variable).\n     *\n     * @return this variable's modifier character, or the empty\n     *         string if it does not have one, or null if this\n     *         variable will not use variable substitution\n     */\n    getModifier() {\n        return this.modifier;\n    }\n    getModifierRange() {\n        return this.modifierRange;\n    }\n    /**\n     * Returns the parameter that will be used for substitution if\n     * this variable uses modifiers to define how its value should be\n     * resolved. If this variable is ${variable:+value} then the\n     * substitution value will be 'value'. Will be the empty string\n     * if the variable is declared as ${variable:+} or some other\n     * variant where the only thing that follows the modifier\n     * character (excluding considerations of escape characters and\n     * so on) is the variable's closing bracket. May be null if this\n     * variable does not have a modifier character defined (such as\n     * ${variable} or $variable).\n     *\n     * @return this variable's substitution parameter, or the empty\n     *         string if it does not have one, or null if there is\n     *         not one defined\n     */\n    getSubstitutionParameter() {\n        return this.substitutionParameter;\n    }\n    getSubstitutionRange() {\n        return this.substitutionRange;\n    }\n    /**\n     * Returns whether this variable has been defined or not.\n     *\n     * @return true if this variable has been defined, false otherwise\n     */\n    isDefined() {\n        return this.defined;\n    }\n    isBuildVariable() {\n        return this.buildVariable === true;\n    }\n    isEnvironmentVariable() {\n        return this.buildVariable === false;\n    }\n}\nexports.Variable = Variable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZG9ja2VyZmlsZS1hc3QvbGliL3ZhcmlhYmxlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsUUFBUTtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixpQkFBaUI7QUFDOUM7QUFDQSxxQkFBcUIsVUFBVTtBQUMvQjtBQUNBLFNBQVMsVUFBVTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLGlCQUFpQjtBQUN4RDtBQUNBLHdDQUF3QyxZQUFZO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxVQUFVO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aXZlLXZpYmUtYWktbmV4dC8uL25vZGVfbW9kdWxlcy9kb2NrZXJmaWxlLWFzdC9saWIvdmFyaWFibGUuanM/MDZhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVmFyaWFibGUgPSB2b2lkIDA7XG5jbGFzcyBWYXJpYWJsZSB7XG4gICAgY29uc3RydWN0b3IobmFtZSwgbmFtZVJhbmdlLCByYW5nZSwgbW9kaWZpZXIsIG1vZGlmaWVyUmFuZ2UsIHN1YnN0aXR1dGlvblBhcmFtZXRlciwgc3Vic3RpdHV0aW9uUmFuZ2UsIGRlZmluZWQsIGJ1aWxkVmFyaWFibGUsIHN0cmluZ1ZhbHVlKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMubmFtZVJhbmdlID0gbmFtZVJhbmdlO1xuICAgICAgICB0aGlzLnJhbmdlID0gcmFuZ2U7XG4gICAgICAgIHRoaXMubW9kaWZpZXIgPSBtb2RpZmllcjtcbiAgICAgICAgdGhpcy5tb2RpZmllclJhbmdlID0gbW9kaWZpZXJSYW5nZTtcbiAgICAgICAgdGhpcy5zdWJzdGl0dXRpb25QYXJhbWV0ZXIgPSBzdWJzdGl0dXRpb25QYXJhbWV0ZXI7XG4gICAgICAgIHRoaXMuc3Vic3RpdHV0aW9uUmFuZ2UgPSBzdWJzdGl0dXRpb25SYW5nZTtcbiAgICAgICAgdGhpcy5kZWZpbmVkID0gZGVmaW5lZDtcbiAgICAgICAgdGhpcy5idWlsZFZhcmlhYmxlID0gYnVpbGRWYXJpYWJsZTtcbiAgICAgICAgdGhpcy5zdHJpbmdWYWx1ZSA9IHN0cmluZ1ZhbHVlO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyaW5nVmFsdWU7XG4gICAgfVxuICAgIGdldE5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWU7XG4gICAgfVxuICAgIGdldE5hbWVSYW5nZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZVJhbmdlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSByYW5nZSBvZiB0aGUgZW50aXJlIHZhcmlhYmxlLiBUaGlzIGluY2x1ZGVzIHRoZSBzeW1ib2xzIGZvclxuICAgICAqIHRoZSBkZWNsYXJhdGlvbiBvZiB0aGUgdmFyaWFibGUgc3VjaCBhcyB0aGUgJCwgeywgYW5kIH0gc3ltYm9scy5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gdGhlIHJhbmdlIGluIHRoZSBkb2N1bWVudCB0aGF0IHRoaXMgdmFyaWFibGUgZW5jb21wYXNzZXMgaW4gaXRzXG4gICAgICogICAgICAgICBlbnRpcmV0eVxuICAgICAqL1xuICAgIGdldFJhbmdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yYW5nZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbW9kaWZpZXIgY2hhcmFjdGVyIHRoYXQgaGFzIGJlZW4gc2V0IGZvclxuICAgICAqIHNwZWNpZnlpbmcgaG93IHRoaXMgdmFyaWFibGUgc2hvdWxkIGJlIGV4cGFuZGVkIGFuZCByZXNvbHZlZC5cbiAgICAgKiBJZiB0aGlzIHZhcmlhYmxlIGlzICR7dmFyaWFibGU6K3ZhbHVlfSB0aGVuIHRoZSBtb2RpZmllclxuICAgICAqIGNoYXJhY3RlciBpcyAnKycuIFdpbGwgYmUgdGhlIGVtcHR5IHN0cmluZyBpZiB0aGUgdmFyaWFibGUgaXNcbiAgICAgKiBkZWNsYXJlZCBhcyAke3ZhcmlhYmxlOn0uIE90aGVyd2lzZSwgd2lsbCBiZSBudWxsIGlmIHRoaXNcbiAgICAgKiB2YXJpYWJsZSB3aWxsIG5vdCB1c2UgdmFyaWFibGUgc3Vic3RpdHV0aW9uIGF0IGFsbCAoc3VjaCBhc1xuICAgICAqICR7dmFyaWFibGV9IG9yICR2YXJpYWJsZSkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHRoaXMgdmFyaWFibGUncyBtb2RpZmllciBjaGFyYWN0ZXIsIG9yIHRoZSBlbXB0eVxuICAgICAqICAgICAgICAgc3RyaW5nIGlmIGl0IGRvZXMgbm90IGhhdmUgb25lLCBvciBudWxsIGlmIHRoaXNcbiAgICAgKiAgICAgICAgIHZhcmlhYmxlIHdpbGwgbm90IHVzZSB2YXJpYWJsZSBzdWJzdGl0dXRpb25cbiAgICAgKi9cbiAgICBnZXRNb2RpZmllcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kaWZpZXI7XG4gICAgfVxuICAgIGdldE1vZGlmaWVyUmFuZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGlmaWVyUmFuZ2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHBhcmFtZXRlciB0aGF0IHdpbGwgYmUgdXNlZCBmb3Igc3Vic3RpdHV0aW9uIGlmXG4gICAgICogdGhpcyB2YXJpYWJsZSB1c2VzIG1vZGlmaWVycyB0byBkZWZpbmUgaG93IGl0cyB2YWx1ZSBzaG91bGQgYmVcbiAgICAgKiByZXNvbHZlZC4gSWYgdGhpcyB2YXJpYWJsZSBpcyAke3ZhcmlhYmxlOit2YWx1ZX0gdGhlbiB0aGVcbiAgICAgKiBzdWJzdGl0dXRpb24gdmFsdWUgd2lsbCBiZSAndmFsdWUnLiBXaWxsIGJlIHRoZSBlbXB0eSBzdHJpbmdcbiAgICAgKiBpZiB0aGUgdmFyaWFibGUgaXMgZGVjbGFyZWQgYXMgJHt2YXJpYWJsZTorfSBvciBzb21lIG90aGVyXG4gICAgICogdmFyaWFudCB3aGVyZSB0aGUgb25seSB0aGluZyB0aGF0IGZvbGxvd3MgdGhlIG1vZGlmaWVyXG4gICAgICogY2hhcmFjdGVyIChleGNsdWRpbmcgY29uc2lkZXJhdGlvbnMgb2YgZXNjYXBlIGNoYXJhY3RlcnMgYW5kXG4gICAgICogc28gb24pIGlzIHRoZSB2YXJpYWJsZSdzIGNsb3NpbmcgYnJhY2tldC4gTWF5IGJlIG51bGwgaWYgdGhpc1xuICAgICAqIHZhcmlhYmxlIGRvZXMgbm90IGhhdmUgYSBtb2RpZmllciBjaGFyYWN0ZXIgZGVmaW5lZCAoc3VjaCBhc1xuICAgICAqICR7dmFyaWFibGV9IG9yICR2YXJpYWJsZSkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHRoaXMgdmFyaWFibGUncyBzdWJzdGl0dXRpb24gcGFyYW1ldGVyLCBvciB0aGUgZW1wdHlcbiAgICAgKiAgICAgICAgIHN0cmluZyBpZiBpdCBkb2VzIG5vdCBoYXZlIG9uZSwgb3IgbnVsbCBpZiB0aGVyZSBpc1xuICAgICAqICAgICAgICAgbm90IG9uZSBkZWZpbmVkXG4gICAgICovXG4gICAgZ2V0U3Vic3RpdHV0aW9uUGFyYW1ldGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdWJzdGl0dXRpb25QYXJhbWV0ZXI7XG4gICAgfVxuICAgIGdldFN1YnN0aXR1dGlvblJhbmdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdWJzdGl0dXRpb25SYW5nZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoaXMgdmFyaWFibGUgaGFzIGJlZW4gZGVmaW5lZCBvciBub3QuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHRydWUgaWYgdGhpcyB2YXJpYWJsZSBoYXMgYmVlbiBkZWZpbmVkLCBmYWxzZSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBpc0RlZmluZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlZmluZWQ7XG4gICAgfVxuICAgIGlzQnVpbGRWYXJpYWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRWYXJpYWJsZSA9PT0gdHJ1ZTtcbiAgICB9XG4gICAgaXNFbnZpcm9ubWVudFZhcmlhYmxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5idWlsZFZhcmlhYmxlID09PSBmYWxzZTtcbiAgICB9XG59XG5leHBvcnRzLlZhcmlhYmxlID0gVmFyaWFibGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dockerfile-ast/lib/variable.js\n");

/***/ })

};
;