"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@dmitryrechkin";
exports.ids = ["vendor-chunks/@dmitryrechkin"];
exports.modules = {

/***/ "(rsc)/./node_modules/@dmitryrechkin/json-schema-to-zod/dist/JSONSchemaToZod.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@dmitryrechkin/json-schema-to-zod/dist/JSONSchemaToZod.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JSONSchemaToZod: () => (/* binding */ JSONSchemaToZod)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/ZodError.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var _Type_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Type.js */ \"(rsc)/./node_modules/@dmitryrechkin/json-schema-to-zod/dist/Type.js\");\n\n\nclass JSONSchemaToZod {\n    /**\n     * Converts a JSON schema to a Zod schema.\n     *\n     * @param {JSONSchema} schema - The JSON schema.\n     * @returns {ZodSchema} - The Zod schema.\n     */\n    static convert(schema) {\n        return this.parseSchema(schema);\n    }\n    /**\n     * Checks if data matches a condition schema.\n     *\n     * @param {JSONValue} data - The data to check.\n     * @param {JSONSchema} condition - The condition schema.\n     * @returns {boolean} - Whether the data matches the condition.\n     */\n    static matchesCondition(data, condition) {\n        // If no properties to check, condition is met\n        if (!condition.properties) {\n            return true;\n        }\n        // If data is not an object or is null, it can't match a schema with properties\n        if (typeof data !== 'object' || data === null || Array.isArray(data)) {\n            return false;\n        }\n        // Now we know data is a JSONObject\n        const objectData = data;\n        // Check all property conditions\n        for (const [key, propCondition] of Object.entries(condition.properties)) {\n            // If property doesn't exist in data\n            if (!(key in objectData)) {\n                // If there's a const condition and property is missing, it doesn't match\n                if ('const' in propCondition) {\n                    return false;\n                }\n                // For other conditions, skip this property\n                continue;\n            }\n            const value = objectData[key];\n            // Check for const condition\n            if ('const' in propCondition && value !== propCondition['const']) {\n                return false;\n            }\n            // Check for minimum condition\n            if ('minimum' in propCondition && typeof value === 'number' && value < propCondition['minimum']) {\n                return false;\n            }\n            // Check for maximum condition\n            if ('maximum' in propCondition && typeof value === 'number' && value > propCondition['maximum']) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Validates data against a conditional schema and adds issues to context if validation fails.\n     *\n     * @param {JSONValue} data - The data to validate.\n     * @param {JSONSchema} schema - The conditional schema.\n     * @param {z.RefinementCtx} ctx - The Zod refinement context.\n     */\n    static validateConditionalSchema(data, schema, ctx) {\n        this.validateRequiredProperties(data, schema, ctx);\n        this.validatePropertyPatterns(data, schema, ctx);\n        this.validateNestedConditions(data, schema, ctx);\n    }\n    /**\n     * Validates that all required properties are present in the data.\n     *\n     * @param {JSONValue} data - The data to validate.\n     * @param {JSONSchema} schema - The schema containing required properties.\n     * @param {z.RefinementCtx} ctx - The Zod refinement context.\n     */\n    static validateRequiredProperties(data, schema, ctx) {\n        if (!schema.required) {\n            return;\n        }\n        // If data is not an object or is null, all required properties are missing\n        if (typeof data !== 'object' || data === null) {\n            for (const requiredProp of schema.required) {\n                ctx.addIssue({\n                    code: zod__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.custom,\n                    message: `Required property '${requiredProp}' is missing`,\n                    path: [requiredProp]\n                });\n            }\n            return;\n        }\n        // Now we know data is an object (either a plain object or an array)\n        for (const requiredProp of schema.required) {\n            if (!(requiredProp in data)) {\n                ctx.addIssue({\n                    code: zod__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.custom,\n                    message: `Required property '${requiredProp}' is missing`,\n                    path: [requiredProp]\n                });\n            }\n        }\n    }\n    /**\n     * Validates property patterns for string properties.\n     *\n     * @param {JSONValue} data - The data to validate.\n     * @param {JSONSchema} schema - The schema containing property patterns.\n     * @param {z.RefinementCtx} ctx - The Zod refinement context.\n     */\n    static validatePropertyPatterns(data, schema, ctx) {\n        if (!schema.properties) {\n            return;\n        }\n        // If data is not an object or is null, we can't validate property patterns\n        if (typeof data !== 'object' || data === null) {\n            return;\n        }\n        // If data is an array, we can't validate property patterns\n        if (Array.isArray(data)) {\n            return;\n        }\n        // Now we know data is a JSONObject\n        const objectData = data;\n        // Process each property in the schema\n        for (const [key, propSchema] of Object.entries(schema.properties)) {\n            // Skip if property doesn't exist in data\n            if (!(key in objectData)) {\n                continue;\n            }\n            const value = objectData[key];\n            // Check pattern validation for strings\n            if (propSchema['pattern'] && typeof value === 'string') {\n                const regex = new RegExp(propSchema['pattern']);\n                if (!regex.test(value)) {\n                    ctx.addIssue({\n                        code: zod__WEBPACK_IMPORTED_MODULE_1__.ZodIssueCode.custom,\n                        message: `String '${value}' does not match pattern '${propSchema['pattern']}'`,\n                        path: [key]\n                    });\n                }\n            }\n        }\n    }\n    /**\n     * Validates nested if-then-else conditions.\n     *\n     * @param {JSONValue} data - The data to validate.\n     * @param {JSONSchema} schema - The schema containing if-then-else conditions.\n     * @param {z.RefinementCtx} ctx - The Zod refinement context.\n     */\n    static validateNestedConditions(data, schema, ctx) {\n        if (!schema['if'] || !schema['then']) {\n            return;\n        }\n        const matchesIf = this.matchesCondition(data, schema['if']);\n        if (matchesIf) {\n            this.validateConditionalSchema(data, schema['then'], ctx);\n        }\n        else if (schema['else']) {\n            this.validateConditionalSchema(data, schema['else'], ctx);\n        }\n    }\n    /**\n     * Parses a JSON schema and returns the corresponding Zod schema.\n     * This is the main entry point for schema conversion.\n     *\n     * @param {JSONSchema} schema - The JSON schema.\n     * @returns {ZodTypeAny} - The ZodTypeAny schema.\n     */\n    static parseSchema(schema) {\n        // Handle array of types (e.g., ['string', 'null'] for nullable types)\n        if (Array.isArray(schema.type)) {\n            return this.handleTypeArray(schema);\n        }\n        // Handle combinators (oneOf, anyOf, allOf)\n        if (schema.oneOf || schema.anyOf || schema.allOf) {\n            return this.parseCombinator(schema);\n        }\n        // Handle if-then-else conditional validation\n        if (schema['if'] && schema['then']) {\n            return this.parseObject(schema);\n        }\n        // Handle object schema without explicit type but with properties\n        if (schema.properties && (!schema.type || schema.type === 'object')) {\n            return this.parseObject(schema);\n        }\n        // Handle all other types\n        return this.handleSingleType(schema);\n    }\n    /**\n     * Handles schemas with an array of types.\n     *\n     * @param {JSONSchema} schema - The JSON schema with type array.\n     * @returns {ZodTypeAny} - The ZodTypeAny schema.\n     */\n    static handleTypeArray(schema) {\n        if (!Array.isArray(schema.type)) {\n            throw new Error('Expected schema.type to be an array');\n        }\n        // Check if the type array includes 'null' to create a nullable type\n        if (schema.type.includes('null')) {\n            return this.handleNullableType(schema);\n        }\n        // If no 'null' in the type array, handle as a union of types\n        return this.createUnionFromTypes(schema.type, schema);\n    }\n    /**\n     * Handles nullable types by creating a nullable schema.\n     *\n     * @param {JSONSchema} schema - The JSON schema with nullable type.\n     * @returns {ZodTypeAny} - The nullable Zod schema.\n     */\n    static handleNullableType(schema) {\n        if (!Array.isArray(schema.type)) {\n            throw new Error('Expected schema.type to be an array');\n        }\n        // Create a copy of the schema without the 'null' type\n        const nonNullSchema = { ...schema };\n        nonNullSchema.type = schema.type.filter(t => t !== 'null');\n        // If there's only one type left, handle it as a single type and make it nullable\n        if (nonNullSchema.type.length === 1) {\n            const singleTypeSchema = this.handleSingleType({ ...schema, type: nonNullSchema.type[0] });\n            return singleTypeSchema.nullable();\n        }\n        // If multiple non-null types, create a union and make it nullable\n        const unionSchema = this.parseSchema(nonNullSchema);\n        return unionSchema.nullable();\n    }\n    /**\n     * Creates a union type from an array of types.\n     *\n     * @param {string[]} types - Array of type strings.\n     * @param {JSONSchema} baseSchema - The base schema to apply to each type.\n     * @returns {ZodTypeAny} - The union Zod schema.\n     */\n    static createUnionFromTypes(types, baseSchema) {\n        const schemas = types.map(type => {\n            const singleTypeSchema = { ...baseSchema, type };\n            return this.parseSchema(singleTypeSchema);\n        });\n        return zod__WEBPACK_IMPORTED_MODULE_2__.union(schemas);\n    }\n    /**\n     * Handles schemas with a single type.\n     *\n     * @param {JSONSchema} schema - The JSON schema with single type.\n     * @returns {ZodTypeAny} - The ZodTypeAny schema.\n     */\n    static handleSingleType(schema) {\n        // Handle schemas without a type property\n        if (schema.type === undefined) {\n            // Check for combinators first\n            if (schema.oneOf || schema.anyOf || schema.allOf) {\n                return this.parseCombinator(schema);\n            }\n            // Check for object properties\n            if (schema.properties) {\n                return this.parseObject(schema);\n            }\n            // Default to any() for schemas with no type and no other indicators\n            return zod__WEBPACK_IMPORTED_MODULE_2__.any();\n        }\n        // Handle specific types\n        switch (schema.type) {\n            case 'string': return this.parseString(schema);\n            case 'number':\n            case 'integer': return this.parseNumberSchema(schema);\n            case 'boolean': return zod__WEBPACK_IMPORTED_MODULE_2__.boolean();\n            case 'array': return this.parseArray(schema);\n            case 'object': return this.parseObject(schema);\n            default: throw new Error('Unsupported schema type');\n        }\n    }\n    /**\n     * Parses a number schema.\n     *\n     * @param {JSONSchema} schema - The JSON schema for a number.\n     * @returns {ZodTypeAny} - The ZodTypeAny schema.\n     */\n    static parseNumberSchema(schema) {\n        let numberSchema = zod__WEBPACK_IMPORTED_MODULE_2__.number();\n        // Apply all number validations\n        let result = numberSchema;\n        result = this.applyNumberBounds(numberSchema, schema);\n        result = this.applyNumberMultipleOf(numberSchema, schema);\n        result = this.applyNumberEnum(numberSchema, schema);\n        result = this.applyIntegerConstraint(numberSchema, schema);\n        return result;\n    }\n    /**\n     * Applies bounds validation to a number schema.\n     *\n     * @param {z.ZodNumber} numberSchema - The base number schema.\n     * @param {JSONSchema} schema - The JSON schema with bounds.\n     * @returns {z.ZodNumber} - The updated schema with bounds validation.\n     */\n    static applyNumberBounds(numberSchema, schema) {\n        let result = numberSchema;\n        if (schema['minimum'] !== undefined) {\n            result = schema['exclusiveMinimum'] ?\n                result.gt(schema['minimum']) :\n                result.gte(schema['minimum']);\n        }\n        if (schema['maximum'] !== undefined) {\n            result = schema['exclusiveMaximum'] ?\n                result.lt(schema['maximum']) :\n                result.lte(schema['maximum']);\n        }\n        return result;\n    }\n    /**\n     * Applies multipleOf validation to a number schema.\n     *\n     * @param {z.ZodNumber} numberSchema - The base number schema.\n     * @param {JSONSchema} schema - The JSON schema with multipleOf.\n     * @returns {z.ZodNumber} - The updated schema with multipleOf validation.\n     */\n    static applyNumberMultipleOf(numberSchema, schema) {\n        if (schema['multipleOf'] === undefined) {\n            return numberSchema;\n        }\n        return numberSchema.refine(val => val % schema['multipleOf'] === 0, { message: `Number must be a multiple of ${schema['multipleOf']}` });\n    }\n    /**\n     * Applies enum validation to a number schema.\n     *\n     * @param {z.ZodNumber} numberSchema - The base number schema.\n     * @param {JSONSchema} schema - The JSON schema with enum.\n     * @returns {z.ZodNumber} - The updated schema with enum validation.\n     */\n    static applyNumberEnum(numberSchema, schema) {\n        if (!schema.enum) {\n            return numberSchema;\n        }\n        // Filter out non-number values from enum\n        const numberEnums = schema.enum.filter(val => typeof val === 'number');\n        if (numberEnums.length === 0) {\n            return numberSchema;\n        }\n        // Use refinement to validate against enum values\n        return numberSchema.refine(val => numberEnums.includes(val), { message: `Number must be one of: ${numberEnums.join(', ')}` });\n    }\n    /**\n     * Applies integer constraint to a number schema if needed.\n     *\n     * @param {z.ZodNumber} numberSchema - The base number schema.\n     * @param {JSONSchema} schema - The JSON schema.\n     * @returns {z.ZodNumber} - The updated schema with integer validation if needed.\n     */\n    static applyIntegerConstraint(numberSchema, schema) {\n        if (schema.type !== 'integer') {\n            return numberSchema;\n        }\n        return numberSchema.refine(val => Number.isInteger(val), { message: 'Number must be an integer' });\n    }\n    /**\n     * Parses a string schema.\n     *\n     * @param {JSONSchema} schema - The JSON schema for a string.\n     * @returns {ZodTypeAny} - The ZodTypeAny schema.\n     */\n    static parseString(schema) {\n        let stringSchema = zod__WEBPACK_IMPORTED_MODULE_2__.string();\n        let result = stringSchema;\n        // Apply all string validations\n        if (schema.format) {\n            // Handle format-specific string validation\n            return this.applyStringFormat(stringSchema, schema);\n        }\n        else {\n            // Only apply other validations if format is not specified\n            // or apply them to the formatted string\n            result = this.applyStringPattern(stringSchema, schema);\n            result = this.applyStringLength(stringSchema, schema);\n            result = this.applyStringEnum(stringSchema, schema);\n        }\n        return result;\n    }\n    /**\n     * Applies format validation to a string schema.\n     *\n     * @param {z.ZodString} stringSchema - The base string schema.\n     * @param {JSONSchema} schema - The JSON schema with format.\n     * @returns {ZodTypeAny} - The updated schema with format validation.\n     */\n    static applyStringFormat(stringSchema, schema) {\n        if (!schema.format) {\n            return stringSchema;\n        }\n        switch (schema.format) {\n            case 'email':\n                return stringSchema.email();\n            case 'date-time':\n                return stringSchema.datetime();\n            case 'uri':\n                return stringSchema.url();\n            case 'uuid':\n                return stringSchema.uuid();\n            case 'date':\n                return stringSchema.date();\n            default:\n                return stringSchema;\n        }\n    }\n    /**\n     * Applies pattern validation to a string schema.\n     *\n     * @param {z.ZodString} stringSchema - The base string schema.\n     * @param {JSONSchema} schema - The JSON schema with pattern.\n     * @returns {z.ZodString} - The updated schema with pattern validation.\n     */\n    static applyStringPattern(stringSchema, schema) {\n        if (!schema['pattern']) {\n            return stringSchema;\n        }\n        const regex = new RegExp(schema['pattern']);\n        return stringSchema.regex(regex, { message: `String must match pattern: ${schema['pattern']}` });\n    }\n    /**\n     * Applies length constraints to a string schema.\n     *\n     * @param {z.ZodString} stringSchema - The base string schema.\n     * @param {JSONSchema} schema - The JSON schema with length constraints.\n     * @returns {z.ZodString} - The updated schema with length validation.\n     */\n    static applyStringLength(stringSchema, schema) {\n        let result = stringSchema;\n        if (schema['minLength'] !== undefined) {\n            stringSchema = stringSchema.min(schema['minLength']);\n        }\n        if (schema['maxLength'] !== undefined) {\n            stringSchema = stringSchema.max(schema['maxLength']);\n        }\n        return result;\n    }\n    /**\n     * Applies enum validation to a string schema.\n     *\n     * @param {z.ZodString} stringSchema - The base string schema.\n     * @param {JSONSchema} schema - The JSON schema with enum.\n     * @returns {ZodTypeAny} - The updated schema with enum validation.\n     */\n    static applyStringEnum(stringSchema, schema) {\n        if (!schema.enum) {\n            return stringSchema;\n        }\n        // Use refinement to validate against enum values\n        return stringSchema.refine((val) => schema.enum?.includes(val), {\n            message: `Value must be one of: ${schema.enum?.join(', ')}`\n        });\n    }\n    /**\n     * Parses a JSON schema of type array and returns the corresponding Zod schema.\n     *\n     * @param {JSONSchema} schema - The JSON schema.\n     * @returns {ZodTypeAny} - The ZodTypeAny schema.\n     */\n    static parseArray(schema) {\n        // Handle tuple validation (items is an array)\n        if (Array.isArray(schema.items)) {\n            const tupleSchemas = schema.items.map(item => this.parseSchema(item));\n            return zod__WEBPACK_IMPORTED_MODULE_2__.union(tupleSchemas);\n        }\n        // Create regular array schema\n        const itemSchema = schema.items ? this.parseSchema(schema.items) : zod__WEBPACK_IMPORTED_MODULE_2__.any();\n        let arraySchema = zod__WEBPACK_IMPORTED_MODULE_2__.array(itemSchema);\n        // Apply array constraints\n        let result = arraySchema;\n        result = this.applyArrayConstraints(arraySchema, schema);\n        return result;\n    }\n    /**\n     * Applies constraints to an array schema.\n     *\n     * @param {z.ZodArray<any>} arraySchema - The base array schema.\n     * @param {JSONSchema} schema - The JSON schema with array constraints.\n     * @returns {z.ZodTypeAny} - The updated array schema with constraints.\n     */\n    static applyArrayConstraints(arraySchema, schema) {\n        // Handle minItems\n        if (schema['minItems'] !== undefined) {\n            arraySchema = arraySchema.min(schema['minItems']);\n        }\n        // Handle maxItems\n        if (schema['maxItems'] !== undefined) {\n            arraySchema = arraySchema.max(schema['maxItems']);\n        }\n        // Handle uniqueItems\n        if (schema['uniqueItems']) {\n            return arraySchema.refine((items) => new Set(items).size === items.length, { message: 'Array items must be unique' });\n        }\n        return arraySchema;\n    }\n    /**\n     * Parses an object schema.\n     *\n     * @param {JSONSchema} schema - The JSON schema for an object.\n     * @returns {ZodTypeAny} - The ZodTypeAny schema.\n     */\n    static parseObject(schema) {\n        // Handle conditional validation (if-then-else) first\n        if (schema['if'] && schema['then']) {\n            return this.parseConditional(schema);\n        }\n        // Create shape object for Zod\n        const shape = {};\n        // Process properties\n        this.processObjectProperties(schema, shape);\n        // Create the object schema and handle additionalProperties\n        return this.processAdditionalProperties(schema, zod__WEBPACK_IMPORTED_MODULE_2__.object(shape));\n    }\n    /**\n     * Processes object properties and builds the shape object.\n     *\n     * @param {JSONSchema} schema - The JSON schema for an object.\n     * @param {Record<string, ZodTypeAny>} shape - The shape object to populate.\n     */\n    static processObjectProperties(schema, shape) {\n        const required = new Set(schema.required || []);\n        if (!schema.properties) {\n            return;\n        }\n        for (const [key, propSchema] of Object.entries(schema.properties)) {\n            const zodSchema = this.parseSchema(propSchema);\n            shape[key] = required.has(key) ? zodSchema : zodSchema.optional();\n        }\n    }\n    /**\n     * Processes additionalProperties configuration.\n     *\n     * @param {JSONSchema} schema - The JSON schema for an object.\n     * @param {z.ZodObject<any, any>} objectSchema - The Zod object schema.\n     * @returns {z.ZodObject<any, any>} - The updated Zod object schema.\n     */\n    static processAdditionalProperties(schema, objectSchema) {\n        if (schema.additionalProperties === true) {\n            return objectSchema.passthrough();\n        }\n        else if (schema.additionalProperties && typeof schema.additionalProperties === 'object') {\n            // Handle schema for additional properties\n            const additionalPropSchema = this.parseSchema(schema.additionalProperties);\n            return objectSchema.catchall(additionalPropSchema);\n        }\n        else {\n            return objectSchema.strict();\n        }\n    }\n    /**\n     * Parses a conditional schema with if-then-else.\n     *\n     * @param {JSONSchema} schema - The JSON schema with conditional validation.\n     * @returns {ZodTypeAny} - The conditional Zod schema.\n     */\n    static parseConditional(schema) {\n        // Create base object schema\n        const zodObject = this.createBaseObjectSchema(schema);\n        // Extract conditional parts\n        const ifCondition = schema['if'];\n        const thenSchema = schema['then'];\n        const elseSchema = schema['else'];\n        // Apply conditional validation using superRefine\n        return zodObject.superRefine((data, ctx) => {\n            // Apply default values to data for condition checking\n            const dataWithDefaults = this.applyDefaultValues(data, schema);\n            // Apply appropriate validation based on condition\n            if (this.matchesCondition(dataWithDefaults, ifCondition)) {\n                this.validateConditionalSchema(dataWithDefaults, thenSchema, ctx);\n            }\n            else if (elseSchema) {\n                this.validateConditionalSchema(dataWithDefaults, elseSchema, ctx);\n            }\n        });\n    }\n    /**\n     * Creates a base object schema from the given JSON schema.\n     *\n     * @param {JSONSchema} schema - The JSON schema.\n     * @returns {z.ZodObject<any, any>} - The base Zod object schema.\n     */\n    static createBaseObjectSchema(schema) {\n        const shape = {};\n        const required = new Set(schema.required || []);\n        for (const [key, value] of Object.entries(schema.properties || {})) {\n            const zodSchema = this.parseSchema(value);\n            shape[key] = required.has(key) ? zodSchema : zodSchema.optional();\n        }\n        const zodObject = zod__WEBPACK_IMPORTED_MODULE_2__.object(shape);\n        return this.processAdditionalProperties(schema, zodObject);\n    }\n    /**\n     * Applies default values from schema properties to data object.\n     *\n     * @param {JSONValue} data - The original data object.\n     * @param {JSONSchema} schema - The schema with default values.\n     * @returns {JSONValue} - The data object with defaults applied.\n     */\n    static applyDefaultValues(data, schema) {\n        // If data is not an object or is null, we can't apply defaults\n        if (typeof data !== 'object' || data === null) {\n            return data;\n        }\n        // If data is an array, we can't apply defaults from schema properties\n        if (Array.isArray(data)) {\n            return data;\n        }\n        // Now we know data is a JSONObject\n        const objectData = data;\n        const dataWithDefaults = { ...objectData };\n        if (!schema.properties) {\n            return dataWithDefaults;\n        }\n        for (const [key, propSchema] of Object.entries(schema.properties)) {\n            if (!(key in dataWithDefaults) && 'default' in propSchema) {\n                dataWithDefaults[key] = propSchema['default'];\n            }\n        }\n        return dataWithDefaults;\n    }\n    /**\n     * Parses a schema with combinators (oneOf, anyOf, allOf).\n     * Delegates to the appropriate combinator parser based on which combinator is present.\n     *\n     * @param {JSONSchema} schema - The JSON schema with combinators.\n     * @returns {ZodTypeAny} - The ZodTypeAny schema.\n     */\n    static parseCombinator(schema) {\n        if (schema.oneOf) {\n            return this.parseOneOf(schema.oneOf);\n        }\n        if (schema.anyOf) {\n            return this.parseAnyOf(schema.anyOf);\n        }\n        if (schema.allOf) {\n            return this.parseAllOf(schema.allOf);\n        }\n        // Should not reach here if schema has combinators\n        throw new Error('Unsupported schema type');\n    }\n    /**\n     * Parses a oneOf combinator schema.\n     *\n     * @param {JSONSchema[]} schemas - Array of JSON schemas in the oneOf.\n     * @returns {ZodTypeAny} - The ZodTypeAny schema.\n     */\n    static parseOneOf(schemas) {\n        return this.createUnionFromSchemas(schemas);\n    }\n    /**\n     * Parses an anyOf combinator schema.\n     *\n     * @param {JSONSchema[]} schemas - Array of JSON schemas in the anyOf.\n     * @returns {ZodTypeAny} - The ZodTypeAny schema.\n     */\n    static parseAnyOf(schemas) {\n        return this.createUnionFromSchemas(schemas);\n    }\n    /**\n     * Creates a union from an array of schemas, handling special cases.\n     *\n     * @param {JSONSchema[]} schemas - Array of JSON schemas to create a union from.\n     * @returns {ZodTypeAny} - The union Zod schema.\n     */\n    static createUnionFromSchemas(schemas) {\n        // Handle empty array case\n        if (schemas.length === 0) {\n            return zod__WEBPACK_IMPORTED_MODULE_2__.any();\n        }\n        // Handle single schema case\n        if (schemas.length === 1) {\n            return this.parseSchema(schemas[0]);\n        }\n        // Process each subschema individually\n        const zodSchemas = [];\n        for (const subSchema of schemas) {\n            // Handle null type specially\n            if (subSchema.type === 'null') {\n                zodSchemas.push(zod__WEBPACK_IMPORTED_MODULE_2__[\"null\"]());\n            }\n            else {\n                zodSchemas.push(this.parseSchema(subSchema));\n            }\n        }\n        // Return appropriate schema based on number of valid schemas\n        if (zodSchemas.length >= 2) {\n            return zod__WEBPACK_IMPORTED_MODULE_2__.union(zodSchemas);\n        }\n        else if (zodSchemas.length === 1) {\n            return zodSchemas[0];\n        }\n        // Fallback if no valid schemas were created\n        return zod__WEBPACK_IMPORTED_MODULE_2__.any();\n    }\n    /**\n     * Parses an allOf combinator schema by merging all schemas.\n     *\n     * @param {JSONSchema[]} schemas - Array of JSON schemas in the allOf.\n     * @returns {ZodTypeAny} - The ZodTypeAny schema.\n     */\n    static parseAllOf(schemas) {\n        // Handle empty array case\n        if (schemas.length === 0) {\n            return zod__WEBPACK_IMPORTED_MODULE_2__.any();\n        }\n        // Handle single schema case\n        if (schemas.length === 1) {\n            return this.parseSchema(schemas[0]);\n        }\n        // Merge all schemas together\n        const mergedSchema = schemas.reduce((acc, currentSchema) => this.mergeSchemas(acc, currentSchema));\n        return this.parseSchema(mergedSchema);\n    }\n    /**\n     * Merges two JSON schemas together.\n     *\n     * @param {JSONSchema} baseSchema - The base JSON schema.\n     * @param {JSONSchema} addSchema - The JSON schema to add.\n     * @returns {JSONSchema} - The merged JSON schema\n     */\n    static mergeSchemas(baseSchema, addSchema) {\n        const merged = { ...baseSchema, ...addSchema };\n        if (baseSchema.properties && addSchema.properties) {\n            const mergedProperties = { ...baseSchema.properties, ...addSchema.properties };\n            merged.properties = mergedProperties;\n        }\n        if (baseSchema.required && addSchema.required) {\n            const mergedRequired = [...new Set([...baseSchema.required, ...addSchema.required])];\n            merged.required = mergedRequired;\n        }\n        return merged;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@dmitryrechkin/json-schema-to-zod/dist/JSONSchemaToZod.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@dmitryrechkin/json-schema-to-zod/dist/Type.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@dmitryrechkin/json-schema-to-zod/dist/Type.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRtaXRyeXJlY2hraW4vanNvbi1zY2hlbWEtdG8tem9kL2Rpc3QvVHlwZS5qcyIsIm1hcHBpbmdzIjoiO0FBQVUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aXZlLXZpYmUtYWktbmV4dC8uL25vZGVfbW9kdWxlcy9AZG1pdHJ5cmVjaGtpbi9qc29uLXNjaGVtYS10by16b2QvZGlzdC9UeXBlLmpzPzNiMDQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHt9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@dmitryrechkin/json-schema-to-zod/dist/Type.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@dmitryrechkin/json-schema-to-zod/dist/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@dmitryrechkin/json-schema-to-zod/dist/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JSONSchemaToZod: () => (/* reexport safe */ _JSONSchemaToZod_js__WEBPACK_IMPORTED_MODULE_0__.JSONSchemaToZod)\n/* harmony export */ });\n/* harmony import */ var _JSONSchemaToZod_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./JSONSchemaToZod.js */ \"(rsc)/./node_modules/@dmitryrechkin/json-schema-to-zod/dist/JSONSchemaToZod.js\");\n/* harmony import */ var _Type_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Type.js */ \"(rsc)/./node_modules/@dmitryrechkin/json-schema-to-zod/dist/Type.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGRtaXRyeXJlY2hraW4vanNvbi1zY2hlbWEtdG8tem9kL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFDO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aXZlLXZpYmUtYWktbmV4dC8uL25vZGVfbW9kdWxlcy9AZG1pdHJ5cmVjaGtpbi9qc29uLXNjaGVtYS10by16b2QvZGlzdC9pbmRleC5qcz84NWJlIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vSlNPTlNjaGVtYVRvWm9kLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vVHlwZS5qcyc7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@dmitryrechkin/json-schema-to-zod/dist/index.js\n");

/***/ })

};
;