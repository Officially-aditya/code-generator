"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@e2b";
exports.ids = ["vendor-chunks/@e2b"];
exports.modules = {

/***/ "(rsc)/./node_modules/@e2b/code-interpreter/dist/index.mjs":
/*!***********************************************************!*\
  !*** ./node_modules/@e2b/code-interpreter/dist/index.mjs ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApiClient: () => (/* reexport safe */ e2b__WEBPACK_IMPORTED_MODULE_0__.ApiClient),\n/* harmony export */   AuthenticationError: () => (/* reexport safe */ e2b__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError),\n/* harmony export */   BuildError: () => (/* reexport safe */ e2b__WEBPACK_IMPORTED_MODULE_0__.BuildError),\n/* harmony export */   CommandExitError: () => (/* reexport safe */ e2b__WEBPACK_IMPORTED_MODULE_0__.CommandExitError),\n/* harmony export */   ConnectionConfig: () => (/* reexport safe */ e2b__WEBPACK_IMPORTED_MODULE_0__.ConnectionConfig),\n/* harmony export */   FileType: () => (/* reexport safe */ e2b__WEBPACK_IMPORTED_MODULE_0__.FileType),\n/* harmony export */   FileUploadError: () => (/* reexport safe */ e2b__WEBPACK_IMPORTED_MODULE_0__.FileUploadError),\n/* harmony export */   FilesystemEventType: () => (/* reexport safe */ e2b__WEBPACK_IMPORTED_MODULE_0__.FilesystemEventType),\n/* harmony export */   InvalidArgumentError: () => (/* reexport safe */ e2b__WEBPACK_IMPORTED_MODULE_0__.InvalidArgumentError),\n/* harmony export */   NotEnoughSpaceError: () => (/* reexport safe */ e2b__WEBPACK_IMPORTED_MODULE_0__.NotEnoughSpaceError),\n/* harmony export */   NotFoundError: () => (/* reexport safe */ e2b__WEBPACK_IMPORTED_MODULE_0__.NotFoundError),\n/* harmony export */   RateLimitError: () => (/* reexport safe */ e2b__WEBPACK_IMPORTED_MODULE_0__.RateLimitError),\n/* harmony export */   Sandbox: () => (/* binding */ Sandbox),\n/* harmony export */   SandboxError: () => (/* reexport safe */ e2b__WEBPACK_IMPORTED_MODULE_0__.SandboxError),\n/* harmony export */   Template: () => (/* reexport safe */ e2b__WEBPACK_IMPORTED_MODULE_0__.Template),\n/* harmony export */   TemplateError: () => (/* reexport safe */ e2b__WEBPACK_IMPORTED_MODULE_0__.TemplateError),\n/* harmony export */   TimeoutError: () => (/* reexport safe */ e2b__WEBPACK_IMPORTED_MODULE_0__.TimeoutError),\n/* harmony export */   \"default\": () => (/* binding */ src_default),\n/* harmony export */   getSignature: () => (/* reexport safe */ e2b__WEBPACK_IMPORTED_MODULE_0__.getSignature),\n/* harmony export */   waitForFile: () => (/* reexport safe */ e2b__WEBPACK_IMPORTED_MODULE_0__.waitForFile),\n/* harmony export */   waitForPort: () => (/* reexport safe */ e2b__WEBPACK_IMPORTED_MODULE_0__.waitForPort),\n/* harmony export */   waitForProcess: () => (/* reexport safe */ e2b__WEBPACK_IMPORTED_MODULE_0__.waitForProcess),\n/* harmony export */   waitForTimeout: () => (/* reexport safe */ e2b__WEBPACK_IMPORTED_MODULE_0__.waitForTimeout),\n/* harmony export */   waitForURL: () => (/* reexport safe */ e2b__WEBPACK_IMPORTED_MODULE_0__.waitForURL)\n/* harmony export */ });\n/* harmony import */ var e2b__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! e2b */ \"(rsc)/./node_modules/e2b/dist/index.mjs\");\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for(\"Symbol.\" + name);\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __await = function(promise, isYieldStar) {\n  this[0] = promise;\n  this[1] = isYieldStar;\n};\nvar __asyncGenerator = (__this, __arguments, generator) => {\n  var resume = (k, v, yes, no) => {\n    try {\n      var x = generator[k](v), isAwait = (v = x.value) instanceof __await, done = x.done;\n      Promise.resolve(isAwait ? v[0] : v).then((y) => isAwait ? resume(k === \"return\" ? k : \"next\", v[1] ? { done: y.done, value: y.value } : y, yes, no) : yes({ value: y, done })).catch((e) => resume(\"throw\", e, yes, no));\n    } catch (e) {\n      no(e);\n    }\n  }, method = (k) => it[k] = (x) => new Promise((yes, no) => resume(k, x, yes, no)), it = {};\n  return generator = generator.apply(__this, __arguments), it[__knownSymbol(\"asyncIterator\")] = () => it, method(\"next\"), method(\"throw\"), method(\"return\"), it;\n};\nvar __forAwait = (obj, it, method) => (it = obj[__knownSymbol(\"asyncIterator\")]) ? it.call(obj) : (obj = obj[__knownSymbol(\"iterator\")](), it = {}, method = (key, fn) => (fn = obj[key]) && (it[key] = (arg) => new Promise((yes, no, done) => (arg = fn.call(obj, arg), done = arg.done, Promise.resolve(arg.value).then((value) => yes({ value, done }), no)))), method(\"next\"), method(\"return\"), it);\n\n// src/index.ts\n\n\n// src/sandbox.ts\n\n\n// src/messaging.ts\n\nasync function extractError(res) {\n  if (res.ok) {\n    return;\n  }\n  switch (res.status) {\n    case 502:\n      return new e2b__WEBPACK_IMPORTED_MODULE_0__.TimeoutError(\n        `${await res.text()}: This error is likely due to sandbox timeout. You can modify the sandbox timeout by passing 'timeoutMs' when starting the sandbox or calling '.setTimeout' on the sandbox with the desired timeout.`\n      );\n    case 404:\n      return new e2b__WEBPACK_IMPORTED_MODULE_0__.NotFoundError(await res.text());\n    default:\n      return new e2b__WEBPACK_IMPORTED_MODULE_0__.SandboxError(`${res.status} ${res.statusText}`);\n  }\n}\nvar ExecutionError = class {\n  constructor(name, value, traceback) {\n    this.name = name;\n    this.value = value;\n    this.traceback = traceback;\n  }\n};\nvar Result = class {\n  constructor(rawData, isMainResult) {\n    this.isMainResult = isMainResult;\n    const data = __spreadValues({}, rawData);\n    delete data[\"type\"];\n    delete data[\"is_main_result\"];\n    this.text = data[\"text\"];\n    this.html = data[\"html\"];\n    this.markdown = data[\"markdown\"];\n    this.svg = data[\"svg\"];\n    this.png = data[\"png\"];\n    this.jpeg = data[\"jpeg\"];\n    this.pdf = data[\"pdf\"];\n    this.latex = data[\"latex\"];\n    this.json = data[\"json\"];\n    this.javascript = data[\"javascript\"];\n    this.isMainResult = isMainResult;\n    this.raw = data;\n    this.data = data[\"data\"];\n    this.chart = data[\"chart\"];\n    this.extra = {};\n    for (const key of Object.keys(data)) {\n      if (![\n        \"plain\",\n        \"html\",\n        \"markdown\",\n        \"svg\",\n        \"png\",\n        \"jpeg\",\n        \"pdf\",\n        \"latex\",\n        \"json\",\n        \"javascript\",\n        \"data\",\n        \"chart\",\n        \"extra\",\n        \"text\"\n      ].includes(key)) {\n        this.extra[key] = data[key];\n      }\n    }\n  }\n  /**\n   * Returns all the formats available for the result.\n   *\n   * @returns Array of strings representing the formats available for the result.\n   */\n  formats() {\n    const formats = [];\n    if (this.html) {\n      formats.push(\"html\");\n    }\n    if (this.markdown) {\n      formats.push(\"markdown\");\n    }\n    if (this.svg) {\n      formats.push(\"svg\");\n    }\n    if (this.png) {\n      formats.push(\"png\");\n    }\n    if (this.jpeg) {\n      formats.push(\"jpeg\");\n    }\n    if (this.pdf) {\n      formats.push(\"pdf\");\n    }\n    if (this.latex) {\n      formats.push(\"latex\");\n    }\n    if (this.json) {\n      formats.push(\"json\");\n    }\n    if (this.javascript) {\n      formats.push(\"javascript\");\n    }\n    if (this.data) {\n      formats.push(\"data\");\n    }\n    for (const key of Object.keys(this.extra)) {\n      formats.push(key);\n    }\n    return formats;\n  }\n  /**\n   * Returns the serializable representation of the result.\n   */\n  toJSON() {\n    return __spreadValues({\n      text: this.text,\n      html: this.html,\n      markdown: this.markdown,\n      svg: this.svg,\n      png: this.png,\n      jpeg: this.jpeg,\n      pdf: this.pdf,\n      latex: this.latex,\n      json: this.json,\n      javascript: this.javascript\n    }, Object.keys(this.extra).length > 0 ? { extra: this.extra } : {});\n  }\n};\nvar Execution = class {\n  constructor(results = [], logs = { stdout: [], stderr: [] }, error, executionCount) {\n    this.results = results;\n    this.logs = logs;\n    this.error = error;\n    this.executionCount = executionCount;\n  }\n  /**\n   * Returns the text representation of the main result of the cell.\n   */\n  get text() {\n    for (const data of this.results) {\n      if (data.isMainResult) {\n        return data.text;\n      }\n    }\n  }\n  /**\n   * Returns the serializable representation of the execution result.\n   */\n  toJSON() {\n    return {\n      results: this.results,\n      logs: this.logs,\n      error: this.error\n    };\n  }\n};\nasync function parseOutput(execution, line, onStdout, onStderr, onResult, onError) {\n  const msg = JSON.parse(line);\n  switch (msg.type) {\n    case \"result\":\n      const result = new Result(\n        __spreadProps(__spreadValues({}, msg), { type: void 0, is_main_result: void 0 }),\n        msg.is_main_result\n      );\n      execution.results.push(result);\n      if (onResult) {\n        await onResult(result);\n      }\n      break;\n    case \"stdout\":\n      execution.logs.stdout.push(msg.text);\n      if (onStdout) {\n        await onStdout({\n          error: false,\n          line: msg.text,\n          timestamp: (/* @__PURE__ */ new Date()).getTime() * 1e3\n        });\n      }\n      break;\n    case \"stderr\":\n      execution.logs.stderr.push(msg.text);\n      if (onStderr) {\n        await onStderr({\n          error: true,\n          line: msg.text,\n          timestamp: (/* @__PURE__ */ new Date()).getTime() * 1e3\n        });\n      }\n      break;\n    case \"error\":\n      execution.error = new ExecutionError(msg.name, msg.value, msg.traceback);\n      if (onError) {\n        await onError(execution.error);\n      }\n      break;\n    case \"number_of_executions\":\n      execution.executionCount = msg.execution_count;\n      break;\n  }\n}\n\n// src/utils.ts\n\nfunction formatRequestTimeoutError(error) {\n  if (error instanceof Error && error.name === \"AbortError\") {\n    return new e2b__WEBPACK_IMPORTED_MODULE_0__.TimeoutError(\"Request timed out \\u2014 the 'requestTimeoutMs' option can be used to increase this timeout\");\n  }\n  return error;\n}\nfunction formatExecutionTimeoutError(error) {\n  if (error instanceof Error && error.name === \"AbortError\") {\n    return new e2b__WEBPACK_IMPORTED_MODULE_0__.TimeoutError(\"Execution timed out \\u2014 the 'timeoutMs' option can be used to increase this timeout\");\n  }\n  return error;\n}\nfunction readLines(stream) {\n  return __asyncGenerator(this, null, function* () {\n    const reader = stream.getReader();\n    let buffer = \"\";\n    try {\n      while (true) {\n        const { done, value } = yield new __await(reader.read());\n        if (value !== void 0) {\n          buffer += new TextDecoder().decode(value);\n        }\n        if (done) {\n          if (buffer.length > 0) {\n            yield buffer;\n          }\n          break;\n        }\n        let newlineIdx = -1;\n        do {\n          newlineIdx = buffer.indexOf(\"\\n\");\n          if (newlineIdx !== -1) {\n            yield buffer.slice(0, newlineIdx);\n            buffer = buffer.slice(newlineIdx + 1);\n          }\n        } while (newlineIdx !== -1);\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  });\n}\n\n// src/consts.ts\nvar DEFAULT_TIMEOUT_MS = 6e4;\nvar JUPYTER_PORT = 49999;\n\n// src/sandbox.ts\nvar Sandbox = class extends e2b__WEBPACK_IMPORTED_MODULE_0__.Sandbox {\n  async runCode(code, opts) {\n    var _a, _b, _c;\n    if ((opts == null ? void 0 : opts.context) && (opts == null ? void 0 : opts.language)) {\n      throw new e2b__WEBPACK_IMPORTED_MODULE_0__.InvalidArgumentError(\n        \"You can provide context or language, but not both at the same time.\"\n      );\n    }\n    const controller = new AbortController();\n    const requestTimeout = (_a = opts == null ? void 0 : opts.requestTimeoutMs) != null ? _a : this.connectionConfig.requestTimeoutMs;\n    const reqTimer = requestTimeout ? setTimeout(() => {\n      controller.abort();\n    }, requestTimeout) : void 0;\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    if (this.envdAccessToken) {\n      headers[\"X-Access-Token\"] = this.envdAccessToken;\n    }\n    try {\n      const res = await fetch(`${this.jupyterUrl}/execute`, {\n        method: \"POST\",\n        headers,\n        body: JSON.stringify({\n          code,\n          context_id: (_b = opts == null ? void 0 : opts.context) == null ? void 0 : _b.id,\n          language: opts == null ? void 0 : opts.language,\n          env_vars: opts == null ? void 0 : opts.envs\n        }),\n        signal: controller.signal,\n        keepalive: true\n      });\n      const error2 = await extractError(res);\n      if (error2) {\n        throw error2;\n      }\n      if (!res.body) {\n        throw new Error(\n          `Not response body: ${res.statusText} ${await (res == null ? void 0 : res.text())}`\n        );\n      }\n      clearTimeout(reqTimer);\n      const bodyTimeout = (_c = opts == null ? void 0 : opts.timeoutMs) != null ? _c : DEFAULT_TIMEOUT_MS;\n      const bodyTimer = bodyTimeout ? setTimeout(() => {\n        controller.abort();\n      }, bodyTimeout) : void 0;\n      const execution = new Execution();\n      try {\n        try {\n          for (var iter = __forAwait(readLines(res.body)), more, temp, error; more = !(temp = await iter.next()).done; more = false) {\n            const chunk = temp.value;\n            await parseOutput(\n              execution,\n              chunk,\n              opts == null ? void 0 : opts.onStdout,\n              opts == null ? void 0 : opts.onStderr,\n              opts == null ? void 0 : opts.onResult,\n              opts == null ? void 0 : opts.onError\n            );\n          }\n        } catch (temp) {\n          error = [temp];\n        } finally {\n          try {\n            more && (temp = iter.return) && await temp.call(iter);\n          } finally {\n            if (error)\n              throw error[0];\n          }\n        }\n      } catch (error3) {\n        throw formatExecutionTimeoutError(error3);\n      } finally {\n        clearTimeout(bodyTimer);\n      }\n      return execution;\n    } catch (error2) {\n      throw formatRequestTimeoutError(error2);\n    }\n  }\n  /**\n   * Creates a new context to run code in.\n   *\n   * @param opts options for creating the context.\n   *\n   * @returns context object.\n   */\n  async createCodeContext(opts) {\n    try {\n      const res = await fetch(`${this.jupyterUrl}/contexts`, {\n        method: \"POST\",\n        headers: __spreadValues({\n          \"Content-Type\": \"application/json\"\n        }, this.connectionConfig.headers),\n        body: JSON.stringify({\n          language: opts == null ? void 0 : opts.language,\n          cwd: opts == null ? void 0 : opts.cwd\n        }),\n        keepalive: true,\n        signal: this.connectionConfig.getSignal(opts == null ? void 0 : opts.requestTimeoutMs)\n      });\n      const error = await extractError(res);\n      if (error) {\n        throw error;\n      }\n      return await res.json();\n    } catch (error) {\n      throw formatRequestTimeoutError(error);\n    }\n  }\n  get jupyterUrl() {\n    return `${this.connectionConfig.debug ? \"http\" : \"https\"}://${this.getHost(\n      JUPYTER_PORT\n    )}`;\n  }\n};\nSandbox.defaultTemplate = \"code-interpreter-v1\";\n\n// src/index.ts\nvar src_default = Sandbox;\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@e2b/code-interpreter/dist/index.mjs\n");

/***/ })

};
;