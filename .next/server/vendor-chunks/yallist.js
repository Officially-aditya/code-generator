"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/yallist";
exports.ids = ["vendor-chunks/yallist"];
exports.modules = {

/***/ "(rsc)/./node_modules/yallist/dist/esm/index.js":
/*!************************************************!*\
  !*** ./node_modules/yallist/dist/esm/index.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Node: () => (/* binding */ Node),\n/* harmony export */   Yallist: () => (/* binding */ Yallist)\n/* harmony export */ });\nclass Yallist {\n    tail;\n    head;\n    length = 0;\n    static create(list = []) {\n        return new Yallist(list);\n    }\n    constructor(list = []) {\n        for (const item of list) {\n            this.push(item);\n        }\n    }\n    *[Symbol.iterator]() {\n        for (let walker = this.head; walker; walker = walker.next) {\n            yield walker.value;\n        }\n    }\n    removeNode(node) {\n        if (node.list !== this) {\n            throw new Error('removing node which does not belong to this list');\n        }\n        const next = node.next;\n        const prev = node.prev;\n        if (next) {\n            next.prev = prev;\n        }\n        if (prev) {\n            prev.next = next;\n        }\n        if (node === this.head) {\n            this.head = next;\n        }\n        if (node === this.tail) {\n            this.tail = prev;\n        }\n        this.length--;\n        node.next = undefined;\n        node.prev = undefined;\n        node.list = undefined;\n        return next;\n    }\n    unshiftNode(node) {\n        if (node === this.head) {\n            return;\n        }\n        if (node.list) {\n            node.list.removeNode(node);\n        }\n        const head = this.head;\n        node.list = this;\n        node.next = head;\n        if (head) {\n            head.prev = node;\n        }\n        this.head = node;\n        if (!this.tail) {\n            this.tail = node;\n        }\n        this.length++;\n    }\n    pushNode(node) {\n        if (node === this.tail) {\n            return;\n        }\n        if (node.list) {\n            node.list.removeNode(node);\n        }\n        const tail = this.tail;\n        node.list = this;\n        node.prev = tail;\n        if (tail) {\n            tail.next = node;\n        }\n        this.tail = node;\n        if (!this.head) {\n            this.head = node;\n        }\n        this.length++;\n    }\n    push(...args) {\n        for (let i = 0, l = args.length; i < l; i++) {\n            push(this, args[i]);\n        }\n        return this.length;\n    }\n    unshift(...args) {\n        for (var i = 0, l = args.length; i < l; i++) {\n            unshift(this, args[i]);\n        }\n        return this.length;\n    }\n    pop() {\n        if (!this.tail) {\n            return undefined;\n        }\n        const res = this.tail.value;\n        const t = this.tail;\n        this.tail = this.tail.prev;\n        if (this.tail) {\n            this.tail.next = undefined;\n        }\n        else {\n            this.head = undefined;\n        }\n        t.list = undefined;\n        this.length--;\n        return res;\n    }\n    shift() {\n        if (!this.head) {\n            return undefined;\n        }\n        const res = this.head.value;\n        const h = this.head;\n        this.head = this.head.next;\n        if (this.head) {\n            this.head.prev = undefined;\n        }\n        else {\n            this.tail = undefined;\n        }\n        h.list = undefined;\n        this.length--;\n        return res;\n    }\n    forEach(fn, thisp) {\n        thisp = thisp || this;\n        for (let walker = this.head, i = 0; !!walker; i++) {\n            fn.call(thisp, walker.value, i, this);\n            walker = walker.next;\n        }\n    }\n    forEachReverse(fn, thisp) {\n        thisp = thisp || this;\n        for (let walker = this.tail, i = this.length - 1; !!walker; i--) {\n            fn.call(thisp, walker.value, i, this);\n            walker = walker.prev;\n        }\n    }\n    get(n) {\n        let i = 0;\n        let walker = this.head;\n        for (; !!walker && i < n; i++) {\n            walker = walker.next;\n        }\n        if (i === n && !!walker) {\n            return walker.value;\n        }\n    }\n    getReverse(n) {\n        let i = 0;\n        let walker = this.tail;\n        for (; !!walker && i < n; i++) {\n            // abort out of the list early if we hit a cycle\n            walker = walker.prev;\n        }\n        if (i === n && !!walker) {\n            return walker.value;\n        }\n    }\n    map(fn, thisp) {\n        thisp = thisp || this;\n        const res = new Yallist();\n        for (let walker = this.head; !!walker;) {\n            res.push(fn.call(thisp, walker.value, this));\n            walker = walker.next;\n        }\n        return res;\n    }\n    mapReverse(fn, thisp) {\n        thisp = thisp || this;\n        var res = new Yallist();\n        for (let walker = this.tail; !!walker;) {\n            res.push(fn.call(thisp, walker.value, this));\n            walker = walker.prev;\n        }\n        return res;\n    }\n    reduce(fn, initial) {\n        let acc;\n        let walker = this.head;\n        if (arguments.length > 1) {\n            acc = initial;\n        }\n        else if (this.head) {\n            walker = this.head.next;\n            acc = this.head.value;\n        }\n        else {\n            throw new TypeError('Reduce of empty list with no initial value');\n        }\n        for (var i = 0; !!walker; i++) {\n            acc = fn(acc, walker.value, i);\n            walker = walker.next;\n        }\n        return acc;\n    }\n    reduceReverse(fn, initial) {\n        let acc;\n        let walker = this.tail;\n        if (arguments.length > 1) {\n            acc = initial;\n        }\n        else if (this.tail) {\n            walker = this.tail.prev;\n            acc = this.tail.value;\n        }\n        else {\n            throw new TypeError('Reduce of empty list with no initial value');\n        }\n        for (let i = this.length - 1; !!walker; i--) {\n            acc = fn(acc, walker.value, i);\n            walker = walker.prev;\n        }\n        return acc;\n    }\n    toArray() {\n        const arr = new Array(this.length);\n        for (let i = 0, walker = this.head; !!walker; i++) {\n            arr[i] = walker.value;\n            walker = walker.next;\n        }\n        return arr;\n    }\n    toArrayReverse() {\n        const arr = new Array(this.length);\n        for (let i = 0, walker = this.tail; !!walker; i++) {\n            arr[i] = walker.value;\n            walker = walker.prev;\n        }\n        return arr;\n    }\n    slice(from = 0, to = this.length) {\n        if (to < 0) {\n            to += this.length;\n        }\n        if (from < 0) {\n            from += this.length;\n        }\n        const ret = new Yallist();\n        if (to < from || to < 0) {\n            return ret;\n        }\n        if (from < 0) {\n            from = 0;\n        }\n        if (to > this.length) {\n            to = this.length;\n        }\n        let walker = this.head;\n        let i = 0;\n        for (i = 0; !!walker && i < from; i++) {\n            walker = walker.next;\n        }\n        for (; !!walker && i < to; i++, walker = walker.next) {\n            ret.push(walker.value);\n        }\n        return ret;\n    }\n    sliceReverse(from = 0, to = this.length) {\n        if (to < 0) {\n            to += this.length;\n        }\n        if (from < 0) {\n            from += this.length;\n        }\n        const ret = new Yallist();\n        if (to < from || to < 0) {\n            return ret;\n        }\n        if (from < 0) {\n            from = 0;\n        }\n        if (to > this.length) {\n            to = this.length;\n        }\n        let i = this.length;\n        let walker = this.tail;\n        for (; !!walker && i > to; i--) {\n            walker = walker.prev;\n        }\n        for (; !!walker && i > from; i--, walker = walker.prev) {\n            ret.push(walker.value);\n        }\n        return ret;\n    }\n    splice(start, deleteCount = 0, ...nodes) {\n        if (start > this.length) {\n            start = this.length - 1;\n        }\n        if (start < 0) {\n            start = this.length + start;\n        }\n        let walker = this.head;\n        for (let i = 0; !!walker && i < start; i++) {\n            walker = walker.next;\n        }\n        const ret = [];\n        for (let i = 0; !!walker && i < deleteCount; i++) {\n            ret.push(walker.value);\n            walker = this.removeNode(walker);\n        }\n        if (!walker) {\n            walker = this.tail;\n        }\n        else if (walker !== this.tail) {\n            walker = walker.prev;\n        }\n        for (const v of nodes) {\n            walker = insertAfter(this, walker, v);\n        }\n        return ret;\n    }\n    reverse() {\n        const head = this.head;\n        const tail = this.tail;\n        for (let walker = head; !!walker; walker = walker.prev) {\n            const p = walker.prev;\n            walker.prev = walker.next;\n            walker.next = p;\n        }\n        this.head = tail;\n        this.tail = head;\n        return this;\n    }\n}\n// insertAfter undefined means \"make the node the new head of list\"\nfunction insertAfter(self, node, value) {\n    const prev = node;\n    const next = node ? node.next : self.head;\n    const inserted = new Node(value, prev, next, self);\n    if (inserted.next === undefined) {\n        self.tail = inserted;\n    }\n    if (inserted.prev === undefined) {\n        self.head = inserted;\n    }\n    self.length++;\n    return inserted;\n}\nfunction push(self, item) {\n    self.tail = new Node(item, self.tail, undefined, self);\n    if (!self.head) {\n        self.head = self.tail;\n    }\n    self.length++;\n}\nfunction unshift(self, item) {\n    self.head = new Node(item, undefined, self.head, self);\n    if (!self.tail) {\n        self.tail = self.head;\n    }\n    self.length++;\n}\nclass Node {\n    list;\n    next;\n    prev;\n    value;\n    constructor(value, prev, next, list) {\n        this.list = list;\n        this.value = value;\n        if (prev) {\n            prev.next = this;\n            this.prev = prev;\n        }\n        else {\n            this.prev = undefined;\n        }\n        if (next) {\n            next.prev = this;\n            this.next = next;\n        }\n        else {\n            this.next = undefined;\n        }\n    }\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/yallist/dist/esm/index.js\n");

/***/ })

};
;